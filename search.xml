<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Blog搭建过程记录</title>
    <url>/2021/06/10/Blog%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h3 id="下载Node-js"><a href="#下载Node-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h3><p>最好是.msi文件，安装过程简单无脑。<br>安装成功后cmd检查node版本和npm版本。</p>
<h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><p>注意：要在Blog目录下运行<code>npm install -g hexo-cli</code>。<br>安装完检查版本的时候出现了一点小问题：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ERROR Cannot find module <span class="string">&#x27;hexo&#x27;</span> from <span class="string">&#x27;D:\Blog\Blog-Source&#x27;</span></span><br><span class="line">ERROR Local hexo loading failed <span class="keyword">in</span> D:\Blog\Blog-Source</span><br><span class="line">ERROR Try running: <span class="string">&#x27;rm -rf node_modules &amp;&amp; npm install --force&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这个时候只需要再次执行<code>npm install</code>即可。</p>
<h3 id="部署插件"><a href="#部署插件" class="headerlink" title="部署插件"></a>部署插件</h3><p>如果是第一次创建博客，需要在Blog目录下运行<code>npm install --save  hexo-deployer-git</code>安装hexo到git的部署插件。</p>
<p>接着在目录的_config.yml文件中添加：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: 远程仓库地址</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>



<h3 id="部署过程"><a href="#部署过程" class="headerlink" title="部署过程"></a>部署过程</h3><p>一般来说只有以下三步：</p>
<ol>
<li><code>hexo clean</code></li>
<li><code>hexo g</code></li>
<li><code>hexo d</code></li>
</ol>
<p>想在部署前先预览的话，只需在第2步之后<code>hexo s</code>即可。</p>
<h3 id="源码保存"><a href="#源码保存" class="headerlink" title="源码保存"></a>源码保存</h3><p>以防万一，分别在GitHub和Gitee都新建了仓库用来保存源码。</p>
<p>第一次想<code>push</code>的话只需要先设置<code>git remote add github(或者gitee) 对应仓库地址</code>就可以了。</p>
<p>然后<code>push</code>的时候，分别<code>git push github/gitee master</code>即可。</p>
]]></content>
      <categories>
        <category>Notes</category>
      </categories>
  </entry>
  <entry>
    <title>Count Sort&amp;Bucket Sort</title>
    <url>/2021/03/29/Count-Sort-Bucket-Sort/</url>
    <content><![CDATA[<h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>对于一组范围较小的整型数组<code>nums</code>，可使用计数排序。</p>
<p>如果使用朴素的计数排序，只是简单的利用下标来决定元素的位置，而没有考虑元素在数组中的稳定性，即相同的值的元素是否在数组中保持原来的位置。因此需要创建一个辅助数组用来记录下标对应的元素出现的次数，同时还需对该辅助数组进行优化，使每个位置的值为当前值和前面所有值的累加，得到的这个累加值就是它对应的元素应该在数组中的顺序。</p>
<p>假如<code>nums</code>是一组长度为<code>N</code>的数组，最大取值和最小取值之间有<code>M</code>个值，由于需要遍历原数组和辅助数组，因此它的时间复杂度为<code>O(M+N)</code>，空间复杂度为<code>O(M)</code>。</p>
<p>具体实现：<a href="">C#</a></p>
<h3 id="计数排序的局限性："><a href="#计数排序的局限性：" class="headerlink" title="计数排序的局限性："></a>计数排序的局限性：</h3><ul>
<li>容易看出，计数排序只适合范围较小的数组，当范围过大时会造成空间的严重浪费。</li>
<li>计数排序只适合元素为整数的数组。</li>
</ul>
<h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>类似于计数排序所创建的辅助数组，桶排序需要创建若干个<strong>桶</strong>来辅助排序。每一个桶代表一个区间范围，可以承载一个或多个元素。桶的数量一般来说取决于元素的个数，除了最后一个桶只存储最大的那个元素外，其他的桶需要存放对应区间的元素。对于计数排序的局限性，桶排序做出了弥补。</p>
<p>假设有一个元素个数为<code>N</code>的浮点型数组<code>nums</code>，最大值<code>max</code>和最小值<code>min</code>的差值为<code>delta</code>，那么桶的个数也初始化为<code>N</code>。如果要确定某一个数<code>num</code>需要被存放到的桶，可以根据计算这个数在整个范围内的占比，即<code>(num-min)/d</code>，乘以除了最后一个桶外，桶的数量<code>(N-1)</code>，来得到对应桶的索引。</p>
<p>将所有元素放入对应的桶中后，分别对各个桶中的元素排序，然后直接遍历就可以得到排序结果。</p>
<p>在平均情况下，也就是每个桶基本都被分配了元素的情况下，时间复杂度为<code>O(N)</code>；极端情况下，元素都挤在某个桶里，时间复杂度为<code>O(NlogN)</code>。</p>
<p>JAVA中，桶一般用<code>LinkedList</code>创建，方便直接将元素添加到尾部，也可以使用封装类<code>Collection</code>对链表进行排序；然而C#中没有封装好的对链表排序的方法，因此使用可以使用<code>List</code>创建。所有的桶也存储在一个<code>List</code>中，因此空间复杂度也为<code>O(N)</code>。</p>
<p>具体实现：<a href="">C#</a></p>
]]></content>
      <categories>
        <category>Sorting and Trees</category>
      </categories>
  </entry>
  <entry>
    <title>Bubble Sort</title>
    <url>/2021/03/29/Bubble-Sort/</url>
    <content><![CDATA[<h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><h3 id="整体思路："><a href="#整体思路：" class="headerlink" title="整体思路："></a>整体思路：</h3><p>对于一个给定数组<code>nums</code>，每一次都比较当前索引和下一个索引的值的大小，若当前值大于下一个值，则交换位置，直到到达数组末尾。</p>
<p>这种方法每次排序要遍历整个数组，至少可以保证最后一个元素的位置是正确的，要进行<code>N-1</code>次循环，因此时间复杂度：<code>O(N^2)</code></p>
<p>可直接在原数组上进行排序，因此空间复杂度：<code>O(1)</code></p>
<h3 id="存在的问题："><a href="#存在的问题：" class="headerlink" title="存在的问题："></a>存在的问题：</h3><p>每次排序遍历的区域的元素可能已经是有序的，但仍然会被遍历并检查大小，导致重复的遍历。</p>
<p>为了避免这种不必要的遍历，可以增加一个变量<code>lastChangedPos</code>来记录一次遍历中最后进行交换的元素位置，然后在一次遍历结束后使用一个<code>sortBorder</code>变量来缩紧边界，使下一次遍历以<code>sortBorder</code>为终止位置。</p>
<p>当整个数组都已经有序时，也不需要再进行遍历，因此再增加一个<code>bool</code>变量<code>isSorted</code>来记录每一次遍历后数组的状态，如果数组已经有序，则直接跳出循环。</p>
<p>具体实现：<a href="https://gitee.com/starkn1ght/algorithms/blob/master/Sort/Sort/BubbleSort.cs">C#</a></p>
]]></content>
      <categories>
        <category>Sorting and Trees</category>
      </categories>
  </entry>
  <entry>
    <title>Git常用知识</title>
    <url>/2021/05/03/Git%E5%B8%B8%E7%94%A8%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><table>
<thead>
<tr>
<th>常用命令</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>git config --global user.name 用户名</code></td>
<td>设置用户签名</td>
</tr>
<tr>
<td><code>git config --global user.email 邮箱</code></td>
<td>设置用户签名</td>
</tr>
<tr>
<td><code>git init</code></td>
<td>初始化本地库</td>
</tr>
<tr>
<td><code>git status</code></td>
<td>查看本地库状态</td>
</tr>
<tr>
<td><code>git add 文件名</code></td>
<td>添加到暂存区</td>
</tr>
<tr>
<td><code>git commit -m &quot;日志信息&quot; 文件名</code></td>
<td>提交到本地库</td>
</tr>
<tr>
<td><code>git reflog</code></td>
<td>查看历史记录</td>
</tr>
<tr>
<td><code>git reset --hard 版本号</code></td>
<td>版本穿梭</td>
</tr>
</tbody></table>
<h3 id="Git分支操作"><a href="#Git分支操作" class="headerlink" title="Git分支操作"></a>Git分支操作</h3><table>
<thead>
<tr>
<th>命令名称</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td><code>git branch 分支名</code></td>
<td>创建分支</td>
</tr>
<tr>
<td><code>git branch -v</code></td>
<td>查看分支</td>
</tr>
<tr>
<td><code>git checkout 分支名</code></td>
<td>切换分支</td>
</tr>
<tr>
<td><code>git merge 分支名</code></td>
<td>把指定分支合并到当前分支上</td>
</tr>
</tbody></table>
<h4 id="冲突合并"><a href="#冲突合并" class="headerlink" title="冲突合并"></a>冲突合并</h4><p>冲突产生的原因：合并分支时，两个分支在同一个文件有两套完全不同的修改。必须人为决定新代码内容。</p>
<p>解决方式：切换到<code>master</code>分支上，使用<code>git merge</code>命令将需要被合并的分支合并到<code>master</code>分支，手动修改冲突后，重新提交到本地库。</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>HTML&amp;CSS基础 Part2</title>
    <url>/2021/06/26/HTML-CSS%E5%9F%BA%E7%A1%80-Part2/</url>
    <content><![CDATA[<h2 id="Formatting"><a href="#Formatting" class="headerlink" title="Formatting"></a>Formatting</h2><h3 id="The-Box-Model"><a href="#The-Box-Model" class="headerlink" title="The Box Model"></a>The Box Model</h3><p>盒子模型就是浏览器渲染元素的时候，将元素装进一个不可见的盒子。</p>
<p>盒子中是内容部分，即内容显示的地方。</p>
<p>在内容外是内边距区域，为了给内容一些外部空间。</p>
<p>然后是边框区域，如果设置了边框，边框就会显示在这里。</p>
<p>最后是外边距区域，是元素与元素之间的空间。</p>
<p><strong>注意</strong>：如果两个元素挨在一起，它们的外边距会被压缩。即第一个元素的底边外距和第二个元素的顶边外距重合。所以从技术上来说，可以用外边距来将元素隔开，然后用内边距来增加边距到内容的空间。</p>
<h3 id="Sizing-Elements"><a href="#Sizing-Elements" class="headerlink" title="Sizing Elements"></a>Sizing Elements</h3><p>默认情况下，宽和高属性是给内容区域设定的，任何内边距和边框都会增加盒子的实际大小，然而外边距对盒子大小没有影响，它只是将盒子与别的元素隔开。</p>
<p>为了避免计算盒子的大小，需要设置盒子尺寸的属性了。默认情况下是 <code>box-sizing: content-box;</code> ，如果更改为 <code>box-sizing: border-box;</code> ，这时盒子的尺寸就是定义的宽和高的大小了，也就是说不管有没有设置内边距和边框，盒子的尺寸都不变，只是内容区域随着内边距和边框增大或减小。</p>
<p>如果想要所有元素都应用这个属性，就可以在顶部使用全局选择器选中所有元素。但是全局选择器不应被经常使用，因为它会造成性能问题。不过全局选择器定义的规则对伪元素是不生效的，这时需要扩展这个规则，使它也应用于伪元素。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使用全局选择器，并将规则应用于伪元素 */</span></span><br><span class="line">*, *<span class="selector-pseudo">::before</span>, *<span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：宽和高属性只对块级元素有效，如果想给行内元素设置宽和高，需要更改显示属性为 <code>display: inline-block;</code> ，这样两个盒子就会在水平方向上挨在一起而不是另起一行。</p>
<h3 id="Overflowing"><a href="#Overflowing" class="headerlink" title="Overflowing"></a>Overflowing</h3><p>当盒子中的内容超出盒子的大小时，就称为溢出，可以修改溢出属性来隐藏溢出的内容。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 隐藏溢出内容 */</span></span><br><span class="line"><span class="attribute">overflow</span>: hidden;  </span><br><span class="line"></span><br><span class="line"><span class="comment">/* 可以滑动进度条来查看被隐藏的溢出内容 */</span></span><br><span class="line"><span class="attribute">overflow</span>: scroll;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 只有有溢出内容时才会出现滚动条 */</span></span><br><span class="line"><span class="attribute">overflow</span>: auto;</span><br></pre></td></tr></table></figure>



<h3 id="Measurement-Units"><a href="#Measurement-Units" class="headerlink" title="Measurement Units"></a>Measurement Units</h3><p>在 CSS 中有分为两大类的很多种计量单位，分别为绝对和相对计量单位。</p>
<p>绝对单位是固定的，不会变的，比如像素（px）、点（pt）、英寸（in）、厘米（cm）、毫米（mm）。</p>
<p>相对单位就是相对于其他东西来说的，比如百分比（%）就是相对于容器大小的，视域宽度（vw）和视域高度（vh）是和显示器视域相关的，元素字符大小（em）和根元素字符大小（rem）是和字体大小相关的。</p>
<p>默认情况下 <code>body</code> 元素的高度是 0 ，它取决于后代的高度，因此如果想要使一个盒子占满垂直高度，就要用到视域单位，使元素与浏览器视域相关。</p>
<h3 id="Positioning"><a href="#Positioning" class="headerlink" title="Positioning"></a>Positioning</h3><p>如果想给一个容器内的盒子相对于该容器定位，就要修改定位属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 容器的定位属性设置为 relative */</span></span><br><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 盒子的定位属性设置为 absolute ，并使盒子位于容器的最右边 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 根据视域来定位，创建一个总是显示在顶部的导航栏 */</span></span><br><span class="line"><span class="selector-class">.nav</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：当一个元素是绝对定位时，这个元素就从正常排版流中去掉了，其他元素会当他不存在一样正常排版。</p>
<h3 id="Floating-Elements"><a href="#Floating-Elements" class="headerlink" title="Floating Elements"></a>Floating Elements</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 使头像浮动在浏览器的左边，它之后的元素会环绕它排版 */</span></span><br><span class="line"><span class="selector-class">.avatar</span> &#123;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 为某一段文字清除浮动属性，这段文字就不会再环绕头像了 */</span></span><br><span class="line"><span class="selector-class">.para</span> &#123;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有一个问题叫父级浮动坍缩，也就是因为父级看不到浮动的子元素。解决这种问题的一种方法是在底部添加一个清除浮动的 <code>div</code> 标签，不过这种方法对搜索引擎和流读取是没有意义的，这样的 HTML 代码就不整洁。</p>
<p>还有一种方法可以用伪元素，因此可以用伪元素 <code>after</code> 在父级元素的最后添加空字符串，并将显示属性改为块级元素，然后再清除两端浮动。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>第三种方法，可以使用溢出属性，只要将溢出属性设置为除了 <code>visible</code> 以外的其他属性，不过溢出属性并不是这个问题的好解法，因为它可能截断内容或出现滚动条。</p>
<p>因此还是推荐使用伪元素方法。</p>
<h3 id="Flex-Box"><a href="#Flex-Box" class="headerlink" title="Flex Box"></a>Flex Box</h3><p>弹性盒子可以让一些元素按一个方向排列，不管是横向还是纵向。</p>
<p>可以用弹性方向属性 <code>flex-direction</code> 来设置排列的方向，默认值是行。</p>
<p>在弹性盒子中有两个轴，分别是主轴（Main axis）和正交轴（Cross axis），如果弹性盒子方向是行，那么主轴就是水平向右，正交轴就是垂直向下的。如果弹性盒子方向是列，那么主轴就是垂直向下，正交轴就是水平向右的。</p>
<p>对齐元素需要记住两个属性，主轴对齐方式 <code>justify-content</code> 和正交轴对齐方式 <code>align-items</code> ，还有一个正交内容对齐属性 <code>align-content</code> ，它只在容器内有多行内容时才起作用。</p>
<p>当弹性盒子中一行内的元素增多时，元素会被调整宽度，以刚好在一行内，这可以通过换行属性 <code>flex-wrap</code> 来修改，默认是不换行 <code>nowrap</code> ，当换成换行 <code>wrap</code> ，元素会保持原有尺寸，多出的元素会另起一行。</p>
<p>当有了多行之后，元素在垂直方向上就不再居中了，第一行更靠近正交轴的起始，最后一行靠近末尾。这时 <code>align-content</code> 属性就起作用了，用这个属性可以将多行作为一个整体对齐。</p>
<p>如果想修改盒子中其中一个元素的对齐方式，比如把第一个元素移到顶部，这时就要把自对齐属性 <code>align-self</code> 设为弹性起始位置 <code>flex-start</code> 。自对齐是对弹性盒子内的元素设置的，而不是对弹性盒子容器，这个属性会覆盖之前设置的正交对齐属性。</p>
<p>调整元素大小也有几个要记住的属性：</p>
<ul>
<li>弹性独立大小 <code>flex-basis</code> ：用来设置每个元素的大小；</li>
<li>弹性增长属性 <code>flex-grow</code> ：设置增长系数；</li>
<li>弹性收缩属性 <code>flex-shrink</code> ：设置收缩系数；</li>
<li>弹性属性 <code>flex</code> ：以上三个属性的缩写。</li>
</ul>
<h3 id="Grid"><a href="#Grid" class="headerlink" title="Grid"></a>Grid</h3><p>弹性盒子可以使元素按行或列排版，但有时需要行和列一起排版，这时就要用到网格。</p>
<p>在网格中，首先需要一个容器，将容器的显示属性 <code>display</code> 设为 <code>grid</code> ，然后用 <code>grid-template-rows</code> 和 <code>grid-template-columns</code> 来设置行数和列数以及行和列的大小。如果要创建相同大小的多行或多列，可以使用 <code>repeat()</code> 函数，例如 2 行且高度为 100px 可以写为 <code>repeat(2, 100px)</code> 。</p>
<p>还有另一个属性叫网络模板 grid-template ，就是上面两个属性的组合版。</p>
<p>默认情况下，元素在网格的每个单元中是左上角对齐的，要修改对齐方式可以使用两个属性，横轴对齐 <code>justify-items</code> 和纵轴对齐 <code>align-items</code> 。要调整网格在容器中对齐的属性，可以使用水平对齐内容属性 <code>justify-content</code> 和垂直内容对齐属性 <code>align-content</code> 。</p>
<p>设置单元格的间隔，可以使用三个属性：<code>row-gap</code> 、<code>column-gap</code> 、<code>gap</code> 。</p>
<p>如果想让某个单元格内的元素水平或垂直横跨几个单元格，即合并单元格，可以使用 <code>grid-column</code> 和 <code>grid-row</code> 属性。还有另一种方法是先指定一个特殊的范围，再用元素来填充，使用网络模板区域 <code>grid-template-areas</code> 来确定合并的单元格，然后一个单独的网络区域 <code>grid-area</code> 来表示填充。</p>
<h3 id="Hiding-Elements"><a href="#Hiding-Elements" class="headerlink" title="Hiding Elements"></a>Hiding Elements</h3><p>如果修改显示属性 <code>display</code> 为 <code>none</code> 的话，元素就相当于不存在，其他元素会顶替该元素的位置。</p>
<p>而如果将可见属性 <code>visibility</code> 设为 <code>hidden</code> ，这个元素就只是隐身了而已，还是存在于原本的位置。</p>
<h3 id="Media-Queries"><a href="#Media-Queries" class="headerlink" title="Media Queries"></a>Media Queries</h3><p>使用媒体查询，可以根据分辨率在不同设备上提供不同样式。这种网页叫<strong>响应式网页</strong>，因为它可以针对不同介质做出调整。</p>
<p>假如在宽屏设备上运行时要使两个盒子并排显示，而在手机上运行时使两个盒子分行显示：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: gray;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用伪元素修改第二个盒子的颜色 */</span></span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>) &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: bisque;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 媒体查询，如果条件满足，就会执行 */</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 重写一个样式来覆盖之前的样式 */</span></span><br><span class="line">  <span class="selector-class">.container</span> &#123;</span><br><span class="line">    <span class="attribute">flex-direction</span>: row;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用媒体查询还可以设计只在打印时使用的样式。</p>
<h2 id="Typography"><a href="#Typography" class="headerlink" title="Typography"></a>Typography</h2><h3 id="Flash-of-Unstyled-Text"><a href="#Flash-of-Unstyled-Text" class="headerlink" title="Flash of Unstyled Text"></a>Flash of Unstyled Text</h3><p>当网页加载很慢的时候，在设置的字体资源被下载下来之前，可能显示的是默认字体，直到资源下载完毕才变成设置好的字体，这就是无样式字体闪现。这个问题无法避免，只能通过修改 <code>font-display</code> 属性来最小化影响。</p>
<h3 id="System-Font-Stack"><a href="#System-Font-Stack" class="headerlink" title="System Font Stack"></a>System Font Stack</h3><p>使用系统字体栈，可以告诉浏览器使用系统的默认字体。好处就是性能优化，因为浏览器不用下载任何字体，也就不会出现无样式字体闪现问题。总体来说，对用户体验是有提升的。但是由于不同操作系统的字体不同，如果使用系统字体，那么文字在不同计算机上显示就不同。</p>
<h3 id="Sizing-Font"><a href="#Sizing-Font" class="headerlink" title="Sizing Font"></a>Sizing Font</h3><p>首要原则是，不要使用像素来设置字体大小，因为不同设备对像素的处理是不同的，因此不能用像素作为跨平台的字体尺寸量度单位。这时就要使用相对单位，即 <code>rem</code> 或 <code>em</code> ，一般来说使用 <code>rem</code> 最佳。</p>
<p>可以使用 <a href="https://type-scale.com/">Type Scale</a> 这个工具来选择合适的标题、正文字体大小。</p>
<h3 id="Vertical-Spacing"><a href="#Vertical-Spacing" class="headerlink" title="Vertical Spacing"></a>Vertical Spacing</h3><ul>
<li><p>边距属性 <code>margin</code> ：</p>
<p>为了满足接近性原则，即人类阅读时觉察到的内容相关性，相关的内容应该互相挨在一起。因此可以修改标题的边距属性，使其远离上一个段落，接近下一个段落。</p>
</li>
<li><p>行高 <code>line-height</code> ：</p>
<p>这个值指的是每行所占的垂直空间的大小。通常来说这个值是字体大小的1 .5 倍。当设置行高时，如果不写单位，这个数值就被认为是倍数，浏览器就会自动将这个系数乘以字体大小，这样就不需要在修改字体大小的时候同时修改行高了。</p>
</li>
</ul>
<h3 id="Horizontal-Spacing"><a href="#Horizontal-Spacing" class="headerlink" title="Horizontal Spacing"></a>Horizontal Spacing</h3><ul>
<li><p>字符间距 <code>letter-spacing</code> ：</p>
<p>用来设置每个字符间的间距；</p>
</li>
<li><p>词间距 <code>word-spacing</code> ：</p>
<p>用来设置词与词之间的间距，感觉网页用纯中文的话这个属性和上一个属性效果是一样的；</p>
</li>
<li><p>宽度 <code>width</code> ：</p>
<p>研究表明，最佳的行宽是 50 - 70 个字符（英文），可以将行宽设置为 <code>50ch</code> ，<code>ch</code> 指的是一个数字 0 字符占用的宽度。</p>
</li>
</ul>
<h3 id="Formatting-Text"><a href="#Formatting-Text" class="headerlink" title="Formatting Text"></a>Formatting Text</h3><ul>
<li><p>文字对齐 <code>text-align</code> ：</p>
<p>控制文字水平方向的对齐方式；</p>
</li>
<li><p>文字缩进 <code>text-indent</code> ：</p>
<p>给每行最开始的字符添加额外的缩进；</p>
</li>
<li><p>文字装饰 <code>text-decoration</code> ：</p>
<p>给文字添加下划线、删除线等；</p>
</li>
<li><p>文字转换 <code>text-transform</code> ：</p>
<p>将字符转换为大写或小写；</p>
</li>
<li><p>空格 <code>white-space</code> ：</p>
<p>管理换行；如果想要截断文字，首先需要设置一个行宽，第二是将空格属性改为 <code>nowrap</code> ，接着将溢出属性设置为 <code>hidden</code> ，最后将文字溢出属性设为 <code>ellipsis</code> ，这样就会在末尾添加省略号。</p>
<p>新版 CSS 支持截断固定行的内容，叫做行截断 <code>line-clamp</code> ，如果设置为 3 ，就会在 3 行后截断文字。</p>
</li>
<li><p>列 <code>column-*</code> ：</p>
<p>可以设置多列文本；如果想将段落分为两栏显示，可以将 <code>column-count</code> 设为 <code>2</code> ；如果想修改两栏之间的间距，修改 <code>column-gap</code> ；还可以在中间加一个分割线，只要设置分栏规则 <code>column-rule</code> 即可；</p>
</li>
<li><p>方向 <code>direction</code> ：</p>
<p>设置文字阅读的方向。</p>
</li>
</ul>
<h2 id="Images"><a href="#Images" class="headerlink" title="Images"></a>Images</h2><h3 id="Background-Images"><a href="#Background-Images" class="headerlink" title="Background Images"></a>Background Images</h3><p>为了给某个元素添加背景图，可以用背景 <code>background</code> 属性，或背景图片 <code>background-image</code> 属性。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">/images/bg.jpg</span>);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="CSS-Sprites"><a href="#CSS-Sprites" class="headerlink" title="CSS Sprites"></a>CSS Sprites</h3><p>如果网页中有很多图片，并且访问的用户很多，所有的用户会发送上千个请求，这样对服务器的负担很重。这时就可以使用 CSS Sprites 生成工具将所有图片组合成一张雪碧图，然后只用一次请求就得到这张图片。</p>
<p>不过没有必要将所有图片都组合到一张雪碧图中。如果将很大的图片添加到雪碧图中，会导致雪碧图的文件大小非常大；其次是雪碧图没有拓展性可言，如果要替换某个图片，就需要重新生成新的雪碧图。所以最好只在图标和 logo 上使用雪碧图。</p>
<h3 id="Data-URLs"><a href="#Data-URLs" class="headerlink" title="Data URLs"></a>Data URLs</h3><p>数据标识符是另一种减少 HTTP 请求的技巧。这个技巧可以将图片直接嵌入 HTML 文档或 CSS 样式中。</p>
<p><a href="https://www.cssportal.com/image-to-data/">Data URI Generator</a> 能生成图片的数据标识符。使用数据标识符，可以减少发送 HTTP 请求的数量，加快载入速度，但是嵌入标识符文件是比源文件要大的，所以不要用数据标识符在页面嵌入太多图片，因为这会增加原本 HTML 或 CSS 文件的大小；其次，这会增加网页维护的难度，如果想更换图片，需要重新生成一个数据标识符；第三个问题，在移动端使用嵌入标识符比使用单独的图片要加载更慢。</p>
<h3 id="Clipping"><a href="#Clipping" class="headerlink" title="Clipping"></a>Clipping</h3><p>图片裁切工具 <a href="https://www.cssportal.com/css-clip-path-generator/">CSS Clip-Path Generator</a> ，能把图片裁切成各种形状。</p>
<h3 id="Supporting-High-density-Screens"><a href="#Supporting-High-density-Screens" class="headerlink" title="Supporting High-density Screens"></a>Supporting High-density Screens</h3><ul>
<li>物理分辨率（Physical Resolution）：屏幕实际的像素点数；</li>
<li>逻辑分辨率（Logical Resolution）：决定设备的表现特征；</li>
<li>设备像素比率（Device Pixel Ratio）：物理分辨率除以逻辑分辨率；</li>
<li>高分屏（High Density）：DPR &gt; 1 的屏幕。</li>
</ul>
<p>CSS 的计算方式永远是逻辑分辨率。</p>
<p>使用源集合属性 <code>srcset</code> 可以为高分屏提供高分图片：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;img</span><br><span class="line">  class=&quot;avatar&quot;</span><br><span class="line">  src=&quot;/images/Avatar.jpg&quot;</span><br><span class="line">  alt=&quot;&quot;</span><br><span class="line">  srcset=&quot;</span><br><span class="line">    /images/Avatar.jpg    1x,</span><br><span class="line">    /images/Avatar@2x.jpg 2x,</span><br><span class="line">    /images/Avatar@3x.jpg 3x</span><br><span class="line">  &quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>



<h3 id="Resolution-Switching"><a href="#Resolution-Switching" class="headerlink" title="Resolution Switching"></a>Resolution Switching</h3><p>当图片的宽度或高度被设为相对单位时，上述的做法会导致分辨率转换问题。</p>
<p>需要将上面的 1x，2x，3x 改为图片的真实宽度，如一个 400 x 400 的图片，真实宽度就是 <code>400w</code> 。</p>
<p>如果希望图片在手机上占满屏幕，在平板上占二分之一，在电脑上占三分之一的话，可以使用媒体查询。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;img</span><br><span class="line">  class=&quot;avatar&quot;</span><br><span class="line">  src=&quot;/images/Avatar.jpg&quot;</span><br><span class="line">  alt=&quot;&quot;</span><br><span class="line">  srcset=&quot;</span><br><span class="line">    /images/Avatar.jpg    1x,</span><br><span class="line">    /images/Avatar@2x.jpg 2x,</span><br><span class="line">    /images/Avatar@3x.jpg 3x</span><br><span class="line">  &quot;</span><br><span class="line">  sizes=&quot;</span><br><span class="line">    (max-width: 500px) 100vw,</span><br><span class="line">    (max-width: 800px) 50vw,</span><br><span class="line">    33vw</span><br><span class="line">  &quot;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure>

<p>可以使用 <a href="https://www.responsivebreakpoints.com/">Responsive Image Breakpoints Generator</a> 来按要求生成不同尺寸的图片。</p>
<h3 id="Using-Modern-Image-Formats"><a href="#Using-Modern-Image-Formats" class="headerlink" title="Using Modern Image Formats"></a>Using Modern Image Formats</h3><p>使用 <a href="https://cloudconvert.com/">CloudConvert</a> 将图片压缩成 webp 格式。会比 JPEG 格式的图片稍微糊一点。</p>
<h3 id="Scalable-Vector-Graphics"><a href="#Scalable-Vector-Graphics" class="headerlink" title="Scalable Vector Graphics"></a>Scalable Vector Graphics</h3><p>可缩放矢量图都是由数学工具软件创建的，使用的是直线和曲线，因此在任何尺寸都非常清晰。</p>
<p>它广泛用于图标、标志、简单图形和背景。</p>
<p><a href="https://www.svgbackgrounds.com/">Create Customizable, Hi-Def, and Scalable Backgrounds</a> 可以用来创建简单的 SVG 背景图。</p>
<h3 id="Icon-Fonts"><a href="#Icon-Fonts" class="headerlink" title="Icon Fonts"></a>Icon Fonts</h3><p><a href="https://fontawesome.com/">Font Awesome</a> 是一套图标字体库和 CSS 框架，提供大量可缩放矢量图标，可以被定制各种 CSS 样式。</p>
<h2 id="Form"><a href="#Form" class="headerlink" title="Form"></a>Form</h2><h3 id="Creating-a-Form"><a href="#Creating-a-Form" class="headerlink" title="Creating a Form"></a>Creating a Form</h3><p>一个表单内需要有若干个输入域，在输入域的前面应该添加一个标签，最好使用 <code>label</code> 元素，因为 <code>label</code> 元素是行内元素。每个 <code>label</code> 元素都有一个 <code>for</code> 属性，这个属性可以将标签和输入域联系起来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>Email<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>Clear<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="CSS-Frameworks"><a href="#CSS-Frameworks" class="headerlink" title="CSS Frameworks"></a>CSS Frameworks</h3><p>CSS 框架是一种可以复用的创建网页的样式库。</p>
<p>一个轻量级 CSS 框架 <a href="https://milligram.io/">Milligram</a> 。</p>
<h3 id="Data-Lists"><a href="#Data-Lists" class="headerlink" title="Data Lists"></a>Data Lists</h3><p>给输入框提供一个选择列表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;country&quot;</span>&gt;</span>Country<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;country&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">list</span>=<span class="string">&quot;countries&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">datalist</span> <span class="attr">id</span>=<span class="string">&quot;countries&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>China<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Japan<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>America<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span>&gt;</span>Korea<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">datalist</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Drop-down-Lists"><a href="#Drop-down-Lists" class="headerlink" title="Drop-down Lists"></a>Drop-down Lists</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;Front-end&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 留空第一项，表示不用必须选一个内容 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>CSS<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>JavaScript<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">optgroup</span> <span class="attr">label</span>=<span class="string">&quot;Back-end&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>Java<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Node.js<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>ASP.NET<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">optgroup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Check-Boxes"><a href="#Check-Boxes" class="headerlink" title="Check Boxes"></a>Check Boxes</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;front-end&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;front-end&quot;</span> <span class="attr">class</span>=<span class="string">&quot;label-inline&quot;</span>&gt;</span>Front-end<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;back-end&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;back-end&quot;</span> <span class="attr">class</span>=<span class="string">&quot;label-inline&quot;</span>&gt;</span>Back-end<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Radio-Buttons"><a href="#Radio-Buttons" class="headerlink" title="Radio Buttons"></a>Radio Buttons</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;membership&quot;</span> <span class="attr">id</span>=<span class="string">&quot;silver&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;silver&quot;</span> <span class="attr">class</span>=<span class="string">&quot;label-inline&quot;</span>&gt;</span>Silver<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">name</span>=<span class="string">&quot;membership&quot;</span> <span class="attr">id</span>=<span class="string">&quot;gold&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;gold&quot;</span> <span class="attr">class</span>=<span class="string">&quot;label-inline&quot;</span>&gt;</span>Gold<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="File-Inputs"><a href="#File-Inputs" class="headerlink" title="File Inputs"></a>File Inputs</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;image/*&quot;</span> <span class="attr">multiple</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Grouping-Related-Fields"><a href="#Grouping-Related-Fields" class="headerlink" title="Grouping Related Fields"></a>Grouping Related Fields</h3><p>当表单变得复杂后，需要将相关联的输入域分入逻辑容器，这时就需要输入域集合元素 <code>filedset</code> 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">fieldset</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">legend</span>&gt;</span>Payment<span class="tag">&lt;/<span class="name">legend</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">fieldset</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Hidden-Fields"><a href="#Hidden-Fields" class="headerlink" title="Hidden Fields"></a>Hidden Fields</h3><p>通常使用隐藏域来携带需要修改内容的 id 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;course-id&quot;</span> <span class="attr">value</span>=<span class="string">&quot;12345&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Data-Validation"><a href="#Data-Validation" class="headerlink" title="Data Validation"></a>Data Validation</h3><p>需要验证数据来防范安全攻击和数据崩溃。HTML 内建了数据验证，但是复杂的验证还是要用 JavaScript 。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 设置必填字段、最大长度 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">required</span> <span class="attr">maxlength</span>=<span class="string">&quot;10&quot;</span> /&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 设置数值的最小和最大取值范围 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;number&quot;</span> <span class="attr">required</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;5&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Submitting-the-Form"><a href="#Submitting-the-Form" class="headerlink" title="Submitting the Form"></a>Submitting the Form</h3><p>为了提交表单，需要在动作属性 <code>action</code> 中填写数据发送的目标，可以使用后端服务 <a href="https://formspree.io/">Formspree</a> ；</p>
<p>其次，还需要填写请求方式属性 <code>method</code> ，提交表单时，需要使用 <code>POST</code> 方式；</p>
<p>每个输入域都需要输入名称属性 <code>name</code> 。</p>
<h2 id="Maintainable-CSS"><a href="#Maintainable-CSS" class="headerlink" title="Maintainable CSS"></a>Maintainable CSS</h2><h3 id="Best-Practices"><a href="#Best-Practices" class="headerlink" title="Best Practices"></a>Best Practices</h3><p>写出简洁可控 CSS 代码的技巧：</p>
<ol>
<li>坚持一种命名规范；</li>
<li>在样式表中划分逻辑区域，可能会用到 CSS 处理工具，如 sass 或 lass ；</li>
<li>避免使用过于特殊的选择器；</li>
<li>尽量别用 <code>important</code> 关键字；</li>
<li>给 CSS 样式排序，可以打开命令面板输入 <code>sort</code> 进行排序；</li>
<li>善用样式的继承特性；</li>
<li>封装重复性的样式；</li>
<li>避免代码中的重复行为。</li>
</ol>
<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>可以利用 CSS 变量来减少属性的重复赋值。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  --<span class="attribute">color</span>-primary: <span class="number">#0099cc</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color-primary);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.two</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="built_in">var</span>(--color-primary);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Object-oriented-CSS"><a href="#Object-oriented-CSS" class="headerlink" title="Object-oriented CSS"></a>Object-oriented CSS</h3><p>面向对象的 CSS 基于两个简单的原则：</p>
<ol>
<li>将容器和内容分开；</li>
<li>将结构和外观分开。</li>
</ol>
<h3 id="BEM（Block-Element-Modifier）"><a href="#BEM（Block-Element-Modifier）" class="headerlink" title="BEM（Block Element Modifier）"></a>BEM（Block Element Modifier）</h3><p>块级元素构造器的思路是将页面假设为很多的块或模块，这些块包含了内容，并可以调整结构。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- BEM 命名方式是用双短横线隔开构造器的两个词，用双下划线来隔开元素的两个词 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card card--popular&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">&quot;card__header&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;card__price&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;card__body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
  </entry>
  <entry>
    <title>HTML&amp;CSS基础</title>
    <url>/2021/06/25/HTML-CSS%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><h3 id="Hyperlinks"><a href="#Hyperlinks" class="headerlink" title="Hyperlinks"></a>Hyperlinks</h3><p>使用 <code>anchor</code> 标签来创建超链接。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 直接开始下载图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">download</span>&gt;</span>My image.<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 根据 id 跳转到相应位置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#section&quot;</span>&gt;</span>Section<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 跳转到页面最顶部 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>Jump to top<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 在新标签页打开外链 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Image"><a href="#Image" class="headerlink" title="Image"></a>Image</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 使用 object-fit: cover 来避免图片因为和容器大小比例不同而被拉伸 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">        </span><br><span class="line"><span class="css">        <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="css">            <span class="attribute">object-fit</span>: cover;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- alt 中应输入图片的描述，以便图片无法加载时用户也能看到图片的描述 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;image.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;Some description.&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Video-and-Audio"><a href="#Video-and-Audio" class="headerlink" title="Video and Audio"></a>Video and Audio</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 显示视频控制按钮、让视频自动播放、循环播放 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">loop</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span>&gt;</span></span><br><span class="line">	<span class="comment">&lt;!-- 给不支持视频的浏览器添加替换文本 --&gt;</span></span><br><span class="line">    You bowser doesn&#x27;t support videos.</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 音频同上 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">src</span>=<span class="string">&quot;music.mp3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Lists"><a href="#Lists" class="headerlink" title="Lists"></a>Lists</h3><p>创建列表时可以根据项的数量快速创建，例如：<code>ul&gt;li*3</code> ，表示创建一个包含三项的无序列表。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 去掉列表前的圆形标记 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="css">            <span class="attribute">list-style-type</span>: none;</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ul =&gt; unordered list; li =&gt; list item; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>About me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Courses<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Contact me<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- ol =&gt; ordered list; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Step 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Step 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Step 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- dl =&gt; description list; dt =&gt; description term; dd =&gt; description detail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>A web page<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dt</span>&gt;</span>Author<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  	<span class="tag">&lt;<span class="name">dd</span>&gt;</span>GoldenCorn<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Tables"><a href="#Tables" class="headerlink" title="Tables"></a>Tables</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 给表格、表头单元格、数据单元格都添加样式；使用 border-collapse: collapse 来压缩边框间的空隙 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">      <span class="selector-tag">table</span>, <span class="selector-tag">th</span>, <span class="selector-tag">td</span> &#123; </span></span><br><span class="line"><span class="css">		<span class="attribute">border</span>: <span class="number">1px</span> solid gray; </span></span><br><span class="line"><span class="css">		<span class="attribute">border-collapse</span>: collapse; </span></span><br><span class="line"><span class="css">		<span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line">	  &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- tr =&gt; table row; th =&gt; table header cell; td =&gt; table data cell; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- thead &amp; tbody 是为了应对搜索引擎优化表格格式 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- 一个横跨 2 列的表头 --&gt;</span></span><br><span class="line">       	  <span class="tag">&lt;<span class="name">th</span> <span class="attr">colspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>Expenses<span class="tag">&lt;/<span class="name">th</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Categories<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Amount<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Beef<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>$5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>Chicken<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>$3.5<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 汇总行，默认是字体加粗并居中的 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tfoot</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>Total<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>$8.5<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tfoot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="Containers"><a href="#Containers" class="headerlink" title="Containers"></a>Containers</h3><p><code>div</code> 元素相当于一个容器，它本身并不显示。<code>div</code> 元素是块级元素（Block-line Element），永远要占用一行，然后填充所有可用的宽度。可以通过 CSS 修改宽度和其他样式。</p>
<p>还有一个常见的容器是 <code>span</code> 元素，常用来给文字添加样式。不过它不是块级元素，而是行内元素（Inline Element），不会自己占用一整行。</p>
<h3 id="Semantic-Elements"><a href="#Semantic-Elements" class="headerlink" title="Semantic Elements"></a>Semantic Elements</h3><p>HTML5 支持一些更具描述性的元素，称为语义元素。如果用语义元素来代替通用容器，搜索引擎就能更容易地知道页面包含什么内容。</p>
<ul>
<li><code>article</code> 元素：可以是任何独立、自述的内容片段；</li>
<li><code>figure</code> 元素：插图的容器元素，也没有任何可视化的外观，可以对插图添加描述；</li>
<li><code>mark</code> 元素：可以高亮或者标记文字；</li>
<li><code>time</code> 元素：时间的容器元素。</li>
</ul>
<h4 id="Structuring-a-Web-Page"><a href="#Structuring-a-Web-Page" class="headerlink" title="Structuring a Web Page"></a>Structuring a Web Page</h4><ul>
<li><code>main</code> 元素：表示网页的主体，这意味着每个网页只能有一个 <code>main</code> 标签，如果使用了多个，就会出现验证问题；</li>
<li><code>section</code> 元素：给相关内容分组；</li>
<li><code>header</code> 元素：表示介绍信息，可以用于页面、分部或者 <code>article</code> ；</li>
<li><code>footer</code> 元素：同上；</li>
<li><code>aside</code> 元素：表示和主体不直接相关的内容，如侧边栏。</li>
</ul>
<h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="Normalizing-CSS"><a href="#Normalizing-CSS" class="headerlink" title="Normalizing CSS"></a>Normalizing CSS</h3><p>不同的浏览器对 CSS 的渲染不一样，为了避免这类问题，需要用到一个工具：normalize.css 。</p>
<p>下载工具，然后添加样式表：<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css/normalize.css&quot; /&gt;</code> ；</p>
<p>由于这个工具会将 HTML 的 <code>body</code> 元素外边距设置为 0 ，因此需要手动在网页的样式表中重新设置 <code>body</code> 元素的外边距。</p>
<h3 id="Basic-Selectors"><a href="#Basic-Selectors" class="headerlink" title="Basic Selectors"></a>Basic Selectors</h3><p>类选择器与 id 选择器的不同在于不能有多个元素拥有同一个 id ，但是多个元素可以公用一个类。</p>
<p>超链接选择器的用法（不常用）：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选中所有有目标的超链接标签 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[target]</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择指向某个网页的超链接标签 */</span></span><br><span class="line"><span class="comment">/* 特点：精确搜索，需要目标链接和 HTML 中的一致，否则不会生效 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href=<span class="string">&quot;https://baidu.com&quot;</span>]</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 特点：模糊搜索，检测 baidu 关键词的出现 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href*=<span class="string">&quot;baidu&quot;</span>]</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 检测是否以某个字符串开头 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;https&quot;</span>]</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 组合使用，检测是否以某个字符串开头以及某个字符串结尾 */</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href^=<span class="string">&quot;https&quot;</span>]</span><span class="selector-attr">[href$=<span class="string">&quot;.com&quot;</span>]</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Relational-Selectors"><a href="#Relational-Selectors" class="headerlink" title="Relational Selectors"></a>Relational Selectors</h3><p>如果需要对一个设置了 id 的标签内部的某种标签添加样式，可以直接根据 id 选择这个标签。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 选择 id = &quot;products&quot; 的标签的所有后代 p  */</span></span><br><span class="line"><span class="selector-id">#products</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择 id = &quot;products&quot; 的标签的直接后代 p  */</span></span><br><span class="line"><span class="selector-id">#products</span> &gt; <span class="selector-tag">p</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择 id = &quot;products&quot; 的标签后面的同级相邻元素(siblings) p  */</span></span><br><span class="line"><span class="selector-id">#products</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 选择 id = &quot;products&quot; 的标签后面的所有同级元素(siblings) p  */</span></span><br><span class="line"><span class="selector-id">#products</span> ~ <span class="selector-tag">p</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>关系选择器可以使代码更简洁，但是也会让代码变得很脆弱，因为它取决于这个元素在 DOM 中的位置，如果移动元素的位置，规则就失效了。</p>
<p>其次，这种选择器的效率不如基本选择器。因为浏览器是从右到左阅读的，当浏览器看到选择器，会先读取最右边的元素，比如先选中 DOM 中的所有 <code>p</code> 元素，然后对于每个 <code>p</code> 元素，去验证是否位于 <code>products</code> 的后面。不过这种区别大部分时候不明显。</p>
<h3 id="Pseudo-class-Selectors"><a href="#Pseudo-class-Selectors" class="headerlink" title="Pseudo-class Selectors"></a>Pseudo-class Selectors</h3><p>在 CSS 中，有很多浏览器自己默认添加的伪类。</p>
<p>这些伪类都以冒号开头，假如需要选择一个标签内的第一个后代标签，可以在冒号后输入 <code>first-child</code> ，但是这种代码也很脆弱，因为更换元素的位置后，规则就失效了。</p>
<p>另一个伪类 <code>first-of-type</code> ，会应用到容器中每个第一次出现的类型标签。如果想要这条规则只应用于特定的标签，可以在冒号前添加指定的元素类型。</p>
<p>还有两个类似的伪类是 <code>last-child</code> 和 <code>last-of-type</code> 。</p>
<p><strong>注意</strong>：在使用 <code>first-child</code> 和 <code>last-child</code> 时，如果指定了元素类型，而指定的元素并不是父标签的第一个或最后一个后代的话，规则就不会生效。</p>
<p>如果想让一个列表的所有奇数行颜色不同，可以使用伪类 <code>nth-child()</code> ：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(odd) &#123;</span><br><span class="line">	<span class="attribute">color</span>:gray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一个针对超链接的伪类 <code>visited</code> ，可以修改已点击过的超链接的样式；伪类 <code>link</code> ，会自动应用到所有超链接标签，可以用来修改还没被点击过的超链接的样式；伪类 <code>hover</code> ，用于当用户将鼠标悬停在某个元素上时，不一定是超链接，可以是其他任意元素。</p>
<p>伪类 <code>focus</code> ，用于用户使用 Tab 键跳转焦点的时候。</p>
<h3 id="Pseudo-element-Selectors"><a href="#Pseudo-element-Selectors" class="headerlink" title="Pseudo-element Selectors"></a>Pseudo-element Selectors</h3><p>如果想要给元素的某个部分添加样式，例如一段话中的第一个字，就需要用到伪元素选择器。</p>
<p>伪元素以双冒号开头，对于一段话中的第一个字，可以使用伪元素 <code>first-letter</code> ；对于一段话中的第一行，使用 <code>first-line</code> ；对于某个被选中的元素，可以使用 <code>selection</code> ；</p>
<p>还有一个常见的伪元素 <code>before</code> ，可以在元素内容前添加内容；类似的伪元素 <code>after</code> ，可以在元素内容后添加内容。</p>
<h3 id="Selectors-Specificity"><a href="#Selectors-Specificity" class="headerlink" title="Selectors Specificity"></a>Selectors Specificity</h3><p>每种选择器都有权重，如果不同规则对应同一个元素，浏览器会显示权重最高的。</p>
<p>优先级最高的是 id 选择器，其次是类和属性选择器，接着是元素类型选择器。如果优先级相同，会应用后定义的那条规则。</p>
<p>如果在规则末尾添加 <code>!important</code> 关键字，就可以忽视优先级，直接应用当前规则。但是应该避免使用这个关键字，因为这样的 CSS 代码混乱且难以维护。可以使用比当前最高优先级更高优先级的选择器来覆盖规则，例如：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* id 选择器优先级 (1, 0, 0)  */</span></span><br><span class="line"><span class="selector-id">#products</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 元素类型选择器 + id 选择器优先级 (1, 0, 1)  */</span></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-id">#products</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>一些 CSS 规则可以从它们的父级元素继承下来，一般情况下继承是默认的。如果想要显示继承某些规则，可以在相应属性后添加 <code>inherit</code> 。</p>
<h3 id="Gradients"><a href="#Gradients" class="headerlink" title="Gradients"></a>Gradients</h3><p>可以用线性渐变函数 <code>linear-gradient</code> 来创建渐变效果，默认情况下的渐变是从上到下的，如果需要设置从左上至右下，能在第一个参数中添加 <code>to bottom right</code> 。</p>
<p>还有一个渐变是径向渐变 <code>radio-gradient</code> ，能创建从中心向容器边缘过渡的渐变效果。</p>
<p>也可以使用在线渐变工具来创建渐变效果，比自己手动创建要简单得多。</p>
]]></content>
      <categories>
        <category>HTML&amp;CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Heap Sort</title>
    <url>/2021/03/26/Heap-Sort/</url>
    <content><![CDATA[<h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>堆排序结合了插入排序和归并排序的优点：拥有和归并排序一样的时间复杂度，和插入排序一样具有空间原址性，即任何时候都只需要常数个额外的元素空间存储临时数据。</p>
<p>二叉堆是一个数组，可被近似为完全二叉树（从上到下从左到右依次填满），对于二叉堆上的任一个节点的下标<code>node</code>（下标从<code>1</code>开始，<code>0</code>为空值），可以很容易计算出它的父节点、左子节点和右子节点的下标：</p>
<figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="built_in">int</span> parent = node / <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> left = node * <span class="number">2</span>;</span><br><span class="line"><span class="built_in">int</span> right = node * <span class="number">2</span> + <span class="number">1</span>;</span><br></pre></td></tr></table></figure>

<p>二叉堆可分为最大堆和最小堆。最大堆指堆中所有节点都比自己的孩子节点值大，因此根节点的值就是这个堆的最大值；最小堆指堆中所有节点都比自己的孩子节点值小，因此根节点的值是这个堆中最小的。</p>
<h3 id="MAX-HEAPIFY-维护堆"><a href="#MAX-HEAPIFY-维护堆" class="headerlink" title="MAX-HEAPIFY    维护堆"></a>MAX-HEAPIFY    维护堆</h3><p>由于维护最大堆的过程基本上是重复使某一节点与孩子节点比较大小和下沉的过程，因此可使用递归法，对于一个给定的二叉堆数组<code>nums</code>，主要维护思路：</p>
<ul>
<li>确定<strong>base case</strong>，当节点没有左孩子和右孩子的时候，递归结束；</li>
<li>先获取当前节点<code>node</code>的左右孩子<code>left</code>、<code>right</code>；</li>
<li>将当前节点<code>nums[node]</code>与左孩子<code>nums[left]</code>比较，若<code>nums[node] &lt; nums[left]</code>，用临时变量<code>largest</code>将<code>left</code>记录下来，否则记录<code>node</code>；</li>
<li>将<code>nums[largest]</code>与右孩子<code>nums[right]</code>比较，若<code>nums[largest] &lt; nums[right]</code>，将<code>right</code>赋给<code>largest</code>；</li>
<li>如果此时<code>largest == node</code>，说明当前节点比所有左右孩子的值都大，因此满足最大堆的性质；否则，将<code>nums[node]</code>与<code>nums[largest]</code>交换；</li>
<li>交换后，原来的<code>largest</code>节点的值在以它为根的子树上可能又无法满足最大堆的特性，因此需要从该节点开始，不断重复整个过程，直到达到<strong>base case</strong>。</li>
</ul>
<p>时间复杂度：<code>O(H)=O(logN)</code>，<code>H</code>为树的高度</p>
<p>空间复杂度：<code>O(logN)</code></p>
<p>具体实现：<a href="">C#</a></p>
<h3 id="BUILD-MAX-HEAP-建最大堆"><a href="#BUILD-MAX-HEAP-建最大堆" class="headerlink" title="BUILD-MAX-HEAP    建最大堆"></a>BUILD-MAX-HEAP    建最大堆</h3><p>给定一个数组<code>nums</code>建最大堆，容易推得：二叉堆的叶子节点在数组中的位置为<code>nums[n/2+1...n]</code>，因此可以从叶子节点的上一层开始，自底向上地使用堆维护算法<code>MAX-HEAPIFY</code>，即可建立一个最大堆。</p>
<p>时间复杂度：<code>O(N)</code>，因为最坏情况要全部遍历一遍数组</p>
<p>空间复杂度：<code>O(logN)</code></p>
<p>具体实现：<a href="">C#</a></p>
<h3 id="HEAPSORT-堆排序"><a href="#HEAPSORT-堆排序" class="headerlink" title="HEAPSORT    堆排序"></a>HEAPSORT    堆排序</h3><p>给定一个无序数组<code>nums</code>，用堆排序使它从小到大排序。主要思路：</p>
<ul>
<li>使用建最大堆方法<code>BUILD-MAX-HEAP</code>将数组建成一个最大堆；</li>
<li>循环开始，从最后一个节点开始，将节点的值<code>nums[N]</code>与根节点的值<code>nums[1]</code>交换；</li>
<li>此时最后一个节点的值<code>nums[N]</code>即为最大值，将堆的大小缩减<code>1</code>；</li>
<li>使用堆维护方法<code>MAX-HEAPIFY</code>让当前根节点下沉到正确位置；</li>
<li>直到遍历完毕，循环结束。</li>
</ul>
<p>时间复杂度：<code>O(NlogN)</code>，遍历<code>N</code> * 堆维护<code>logN</code></p>
<p>空间复杂度：<code>O(logN)</code></p>
<p>具体实现：<a href="">C#</a></p>
<h3 id="Priority-Queue-优先队列"><a href="#Priority-Queue-优先队列" class="headerlink" title="Priority Queue    优先队列"></a>Priority Queue    优先队列</h3><p>和堆一样，优先队列也有两种形式：最大优先队列和最小优先队列。</p>
<p>优先队列是一种用来维护一组可比较大小的元素的数据结构，对于一个基于最大堆的最大优先队列，假设优先队列数组为<code>priorityQueue</code>，应支持以下操作：</p>
<h4 id="提供访问的public方法"><a href="#提供访问的public方法" class="headerlink" title="提供访问的public方法"></a>提供访问的public方法</h4><h5 id="Max"><a href="#Max" class="headerlink" title="Max()"></a>Max()</h5><p>返回队列中的最大值，即为堆顶元素<code>priorityQueue[1]</code>；</p>
<p>时间复杂度：<code>O(1)</code></p>
<h5 id="Insert-T-value"><a href="#Insert-T-value" class="headerlink" title="Insert(T value)"></a>Insert(T value)</h5><p>将新元素插入堆底，并让它上浮<code>Swim(int position)</code>到正确位置；</p>
<p>时间复杂度：<code>O(logN)</code></p>
<h5 id="DelMax"><a href="#DelMax" class="headerlink" title="DelMax()"></a>DelMax()</h5><p>删除最大值，即第一个元素。先将堆顶元素与最后一个元素进行交换，使堆的大小缩减<code>Count--</code>，即做到了删除最大值的操作，然后使交换过后的处于第一位的最小值下沉到正确位置<code>Sink(1)</code>；</p>
<p>时间复杂度：<code>O(logn)</code></p>
<h4 id="不提供访问的private方法"><a href="#不提供访问的private方法" class="headerlink" title="不提供访问的private方法"></a>不提供访问的private方法</h4><h5 id="Swim-int-position"><a href="#Swim-int-position" class="headerlink" title="Swim(int position)"></a>Swim(int position)</h5><p>若当前位置的元素（第一个元素除外）值大于它的父节点元素值，则交换它与父节点元素的位置，然后使位置指针移动到父节点的位置（此时为当前元素值）继续比较。</p>
<p>时间复杂度：<code>O(logn)</code></p>
<h5 id="Sink-int-position"><a href="#Sink-int-position" class="headerlink" title="Sink(int position)"></a>Sink(int position)</h5><p>与<code>MAX-HEAPIFY</code>方法一样，首先确定<strong>base case</strong>。</p>
<p>对于当前位置的元素，对它计算左子节点的位置，如果左子节点的位置超出了堆的大小，说明当前位置已经到达堆底。因此，在左子节点位置不超出堆大小的范围内，先假设左子节点的值更大并将左子节点位置用一个临时变量<code>greater</code>存储，如果右子节点存在并且大于<code>greater</code>，则将右子节点位置赋给<code>greater</code>。</p>
<p>如果当前位置的值比<code>greater</code>位置的值大，说明当前位置的值满足最大堆特性，跳出循环；否则，交换当前位置和<code>greater</code>位置的值，并将位置指针移动到<code>greater</code>位置，继续下一次比较。</p>
<p>时间复杂度：<code>O(logn)</code></p>
<p>总之，在一个包含N个元素的堆中，所有优先队列的操作都可以在<code>O(logn)</code>时间内完成。</p>
<p>具体实现：<a href="">C#</a></p>
<blockquote>
<p>参考资料：</p>
<p>Introduction to Algorithms. 3rd ed.</p>
</blockquote>
]]></content>
      <categories>
        <category>Sorting and Trees</category>
      </categories>
  </entry>
  <entry>
    <title>Insertion Sort</title>
    <url>/2021/03/26/Insertion-Sort/</url>
    <content><![CDATA[<h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>对于<strong>少量元素</strong>的排序，插入排序是一个有效的算法。</p>
<p>主要思想：将输入数组视为一组扑克牌，最初我们左手为空，且桌面上的扑克面朝下。每次只抓牌堆顶部的牌，将它与左手中的牌从右到左依次比较，从而找到正确的插入位置。由此可知左手中的牌总是已经排序好的。</p>
<p>假设输入长度为N的数组<code>nums[N]</code>，当前抓的牌索引为<code>cur</code>，左手中数组的索引将为<code>nums[0..cur-1]</code>，而仍在桌上的数组的索引将为<code>nums[cur+1..N-1]</code>。</p>
<p>时间复杂度：<code>O(N^2)</code></p>
<p>空间复杂度：<code>O(1)</code></p>
<p>具体实现：<a href="https://gitee.com/starkn1ght/algorithms/blob/master/Sort/Sort/InsertionSort.cs">C#</a></p>
<blockquote>
<p>参考资料：</p>
<p>Introduction to Algorithms. 3rd ed.</p>
</blockquote>
]]></content>
      <categories>
        <category>Sorting and Trees</category>
      </categories>
  </entry>
  <entry>
    <title>Java Advanced</title>
    <url>/2022/01/20/Java-Advanced/</url>
    <content><![CDATA[<h2 id="线程的基本概念"><a href="#线程的基本概念" class="headerlink" title="线程的基本概念"></a>线程的基本概念</h2><ul>
<li><p>一个线程是一个程序内部的顺序控制流。</p>
</li>
<li><p>线程和进程</p>
<ul>
<li><p>每个进程都有独立代码和数据空间（进程上下文），进程切换的开销大。</p>
</li>
<li><p>线程是轻量的进程，同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器（PC），线程切换的开销小。</p>
</li>
</ul>
</li>
<li><p>多进程：在操作系统中，能同时运行多个任务。</p>
</li>
<li><p>多线程：在同一应用程序中，有多个顺序流同时执行。</p>
</li>
</ul>
<h2 id="线程的概念模型"><a href="#线程的概念模型" class="headerlink" title="线程的概念模型"></a>线程的概念模型</h2><ul>
<li><p>虚拟的CPU，封装在 Java.lang.Thread 类中。</p>
</li>
<li><p>CPU所执行的代码，传递给 Thread 类。</p>
</li>
<li><p>CPU所处理的数据，传递给 Thread 类。</p>
</li>
</ul>
<h2 id="线程体"><a href="#线程体" class="headerlink" title="线程体"></a>线程体</h2><p>每个线程都通过 Thread 对象的方法 run() 来实现，方法 run() 称为线程体。</p>
<h2 id="构造线程的两种方法"><a href="#构造线程的两种方法" class="headerlink" title="构造线程的两种方法"></a>构造线程的两种方法</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>定义一个线程类，继承自 Thread 类并重写方法 run() ，调用 start 方法来启动新线程，自动进入 run 方法。</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>提供一个实现 Runnable 接口的类作为线程的目标对象，在初始化一个 Thread 类或 Thread 子类的对象时，把目标对象传递给这个线程实例，由该目标对象提供线程体 run() 。</p>
<h2 id="Deamon-Thread"><a href="#Deamon-Thread" class="headerlink" title="Deamon Thread"></a>Deamon Thread</h2><p>Java 中有两种类型的 Thread ：User Thread 和 Deamon Thread ，User threads是高优先级的thread，JVM将会等待所有的User Threads运行完毕之后才会结束运行。</p>
<p>Daemon threads 是低优先级的 thread，它的作用是为 User Thread 提供服务。 因为 daemon threads 的低优先级，并且仅为 user thread 提供服务，所以当所有的 user thread 都结束之后，JVM 会自动退出，不管是否还有 daemon threads 在运行中。</p>
<p>因为这个特性，所以我们通常在daemon threads中处理无限循环的操作，因为这样不会影响user threads的运行。</p>
<p>Daemon threads 并不推荐使用在I/O操作中。</p>
<p>但是有些不当的操作也可能导致 daemon threads 阻塞 JVM 关闭，比如在 daemon thread 中调用 join() 方法。</p>
<p>如果对某个线程对象启动之前调用了 setDeamon(true) 方法，这个线程就变成了后台线程。</p>
<h2 id="线程的休眠"><a href="#线程的休眠" class="headerlink" title="线程的休眠"></a>线程的休眠</h2><p>如果启动新线程后希望主线程多持续一会再结束，可在 start 语句后加上让当前线程休眠 1 毫秒的语句。</p>
<p>线程休眠的作用就是要让其他线程得到执行的机会。</p>
<h2 id="通过-Runnable-接口构造线程"><a href="#通过-Runnable-接口构造线程" class="headerlink" title="通过 Runnable 接口构造线程"></a>通过 Runnable 接口构造线程</h2><ul>
<li><p>只有一个 run 方法，因此只需实现 run 方法；</p>
</li>
<li><p>Thread 类也实现了 Runnable 接口；</p>
</li>
<li><p>便于多个线程共享资源；</p>
</li>
<li><p>Java 不支持多继承，如果已经继承了某个基类，便需要实现 Runnable 接口来生成多线程；</p>
</li>
<li><p>以实现 Runnable 接口的对象为参数建立新的线程；</p>
</li>
<li><p>还是通过 start 方法启动线程。</p>
</li>
</ul>
<h2 id="两种线程构造方式的比较"><a href="#两种线程构造方式的比较" class="headerlink" title="两种线程构造方式的比较"></a>两种线程构造方式的比较</h2><ul>
<li><p>使用 Runnable 接口：可以将 CPU 、代码和数据分开，形成清晰的模型，还可以从其他类继承。另外，还可以实现多个线程间数据的共享。</p>
</li>
<li><p>直接继承 Thread 类：编写简单，重写 run 方法，不能再从其他类继承。无法实现多线程间的数据共享。</p>
</li>
</ul>
<h2 id="多线程的同步控制"><a href="#多线程的同步控制" class="headerlink" title="多线程的同步控制"></a>多线程的同步控制</h2><h3 id="线程间的互斥"><a href="#线程间的互斥" class="headerlink" title="线程间的互斥"></a>线程间的互斥</h3><ul>
<li>同时运行的几个线程需要共享一些数据。</li>
<li>共享的数据，在某一时刻只允许一个线程对其进行操作。</li>
</ul>
<h3 id="线程间的协作"><a href="#线程间的协作" class="headerlink" title="线程间的协作"></a>线程间的协作</h3><p>可以有条件地同时操作共享数据。</p>
<h3 id="“生产者-消费者”-问题"><a href="#“生产者-消费者”-问题" class="headerlink" title="“生产者/消费者” 问题"></a>“生产者/消费者” 问题</h3><ul>
<li><p>假设一个线程负责往数据区写数据，另一个线程负责从同一个数据区读数据，两个线程可以并行执行。</p>
</li>
<li><p>如果数据区已满，生产者要等消费者取走一些数据才能继续写入。</p>
</li>
<li><p>如果数据区为空，消费者要等生产者写入一些数据后再取。</p>
</li>
</ul>
<h3 id="synchronized-——-线程同步关键字，实现互斥"><a href="#synchronized-——-线程同步关键字，实现互斥" class="headerlink" title="synchronized —— 线程同步关键字，实现互斥"></a>synchronized —— 线程同步关键字，实现互斥</h3><ul>
<li><p>用于指定需要同步的代码段或方法，也就是监视区。</p>
</li>
<li><p>可实现与一个锁的交互。</p>
</li>
<li><p>功能是：先判断对象的锁是否存在，如果在就获得锁，然后执行其后的代码段；如果对象的锁不在，已被其他线程拿走，就进入等待状态，直到获得锁。</p>
</li>
<li><p>当被 synchronized 限定的代码段执行完后，就释放锁。</p>
</li>
</ul>
<h3 id="同步与锁的要点"><a href="#同步与锁的要点" class="headerlink" title="同步与锁的要点"></a>同步与锁的要点</h3><ul>
<li><p>只能同步方法，不能同步变量。</p>
</li>
<li><p>每个对象只有一个锁。</p>
</li>
<li><p>类可以同时拥有同步和非同步方法，非同步方法可以被多个线程自由访问而不受锁的限制。</p>
</li>
<li><p>线程睡眠时，所持的任何锁都不会释放。</p>
</li>
<li><p>线程可以获得多个锁，例如在一个对象的同步方法中调用另一个对象的同步方法。</p>
</li>
<li><p>同步损害并发性，应尽量缩小同步范围。</p>
</li>
<li><p>在使用同步代码块时，应指定在哪个对象上同步。</p>
</li>
</ul>
<h2 id="线程的等待与唤醒"><a href="#线程的等待与唤醒" class="headerlink" title="线程的等待与唤醒"></a>线程的等待与唤醒</h2><h3 id="wait-方法"><a href="#wait-方法" class="headerlink" title="wait() 方法"></a>wait() 方法</h3><p>为了更有效地协调不同线程的工作，需要在线程间建立沟通桥梁，通过“对话”来解决线程间的同步问题。</p>
<p>如果当前正在执行同步代码的某个线程A调用 wait() 方法，该线程暂停执行而进入对象x的等待池，并释放已获得的锁。直到其他线程在对象x上调用 notify() 或 notifyAll() 方法，才能重新获得对象x的锁并继续执行。</p>
<h3 id="notify-方法"><a href="#notify-方法" class="headerlink" title="notify() 方法"></a>notify() 方法</h3><p>随机唤醒一个线程，本线程继续执行。</p>
<p>线程被唤醒后，还需等待发出唤醒消息者释放监视器，这期间关键数据仍可能被改变。</p>
<p>被唤醒的线程开始执行时，一定要判断当前状态是否适合自己运行。</p>
<h3 id="notifyAll"><a href="#notifyAll" class="headerlink" title="notifyAll()"></a>notifyAll()</h3><p>唤醒所有等待的线程，本线程继续执行。</p>
<h2 id="线程的基本状态"><a href="#线程的基本状态" class="headerlink" title="线程的基本状态"></a>线程的基本状态</h2><h3 id="诞生状态"><a href="#诞生状态" class="headerlink" title="诞生状态"></a>诞生状态</h3><p>线程刚刚被创建</p>
<h3 id="就绪状态"><a href="#就绪状态" class="headerlink" title="就绪状态"></a>就绪状态</h3><p>线程的 start 方法已被执行</p>
<p>线程已准备好运行</p>
<h3 id="运行状态"><a href="#运行状态" class="headerlink" title="运行状态"></a>运行状态</h3><p>处理机分配给了线程，线程正在运行</p>
<h3 id="阻塞状态（Blocked）"><a href="#阻塞状态（Blocked）" class="headerlink" title="阻塞状态（Blocked）"></a>阻塞状态（Blocked）</h3><p>在线程发出输入/输出请求且必须等待其返回</p>
<p>遇到 synchronized 标记的方法而未获得锁</p>
<p>为等候一个条件变量，线程调用 wait() 方法</p>
<h3 id="休眠状态（Sleeping）"><a href="#休眠状态（Sleeping）" class="headerlink" title="休眠状态（Sleeping）"></a>休眠状态（Sleeping）</h3><p>执行 sleep 方法进入休眠</p>
<h3 id="死亡状态"><a href="#死亡状态" class="headerlink" title="死亡状态"></a>死亡状态</h3><p>线程已完成或退出</p>
<h2 id="死锁问题"><a href="#死锁问题" class="headerlink" title="死锁问题"></a>死锁问题</h2><p>线程在运行过程中，某个步骤往往需要满足一些条件才能继续执行，如果条件无法满足，会进入阻塞状态；</p>
<p>当多个线程陷入彼此等待的轮回中，任何线程都动弹不得，此即所谓死锁（deadlock）；</p>
<p>对于死锁问题，关键不在于出现问题后调试，而在于预防。</p>
<h2 id="结束线程的生命"><a href="#结束线程的生命" class="headerlink" title="结束线程的生命"></a>结束线程的生命</h2><p>通常通过控制 run 方法中循环条件的方式来结束一个线程。</p>
<p>用 stop 方法可以结束线程的声明。但如果一个线程正在操作共享数据，操作过程没有完成就用 stop 结束的话，将会导致数据的不完整，因此不提倡使用此方法。</p>
<h2 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h2><h3 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h3><p>在单 CPU 的系统中，多个线程需要共享 CPU ，在任何时间点上实际只能有一个线程运行。</p>
<p>控制多个线程在同一 CPU 上以某种顺序执行称为线程调度。</p>
<p>Java 虚拟机支持固定优先级算法，基于线程的优先级对其进行调度。</p>
<h3 id="线程的优先级-1"><a href="#线程的优先级-1" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><p>每个 Java 线程都有一个优先级，范围在 1 和 10 之间，数字大的优先级高。缺省值为 5 ；</p>
<p>在线程 A 运行过程中创建的线程 B ，初始状态具有和 A 相同的优先级；</p>
<p>如果 A 是个后台线程，B 也是后台线程；</p>
<p>可在线程创建后的任何时候，通过 setPriority(int priority) 方法改变其原来的优先级。</p>
<p>对于具有相同优先级的线程，Java 的处理是随机的。</p>
<p>底层操作系统支持的优先级可能少于10个，从而造成一些混乱。因此只能将优先级作为一种粗略的工具使用。最后的控制可以通过 yield() 函数来完成。</p>
<blockquote>
<p>yield 方法的作用是使当前线程放弃执行权，去调用与其同优先级的线程。如果没有同优先级的线程，那么该线程继续执行。若在 yield 方法后添加 sleep 方法使其休眠，低优先级的方法才有可能抢夺到执行权。</p>
</blockquote>
<p>只能基于效率来使用优先级，而不能依靠优先级来保证算法的正确性。</p>
<p>假设某线程正在运行，只有出现下列情况之一，才会使其暂停运行：</p>
<ul>
<li><p>一个具有更高优先级的线程变为就绪状态（Ready）；</p>
</li>
<li><p>由于输入/输出或其他原因调用 sleep、wait、yield 方法使其阻塞；</p>
</li>
<li><p>对于支持时间分片的系统，时间片的时间期满。</p>
</li>
</ul>
<h2 id="线程安全的定义"><a href="#线程安全的定义" class="headerlink" title="线程安全的定义"></a>线程安全的定义</h2><p>当多个线程访问同一对象时，如果不用考虑这些线程在运行环境下的调度和交替执行，也不需进行额外的同步，或在调用方进行任何其他的协调操作，调用这个对象的行为都可以获得正确的结果，那这个对象是线程安全的。</p>
<h2 id="实现-Java-线程安全的方式"><a href="#实现-Java-线程安全的方式" class="headerlink" title="实现 Java 线程安全的方式"></a>实现 Java 线程安全的方式</h2><ul>
<li><p>如果访问的是不可变对象，本身就是线程安全的；</p>
</li>
<li><p>绝对线程安全；</p>
</li>
<li><p>相对线程安全；</p>
</li>
<li><p>线程兼容和线程对立。</p>
<ul>
<li><p>线程兼容：对象本身不是线程安全的，但是可以通过在调用端正确使用同步来保证对象在并发环境中安全使用。</p>
</li>
<li><p>线程对立：无论调用端是否采用了同步措施，都无法在多线程环境中并发使用。</p>
</li>
</ul>
</li>
</ul>
<h2 id="线程安全的实现"><a href="#线程安全的实现" class="headerlink" title="线程安全的实现"></a>线程安全的实现</h2><h3 id="互斥同步"><a href="#互斥同步" class="headerlink" title="互斥同步"></a>互斥同步</h3><p>同步的互斥实现方式：临界区（Critical Section），互斥量（Mutex），信号量（Semaphone）；</p>
<p>Synchronized 关键字经过编译后会在同步块前后形成 monitorenter 和 monitorexit 两个字节码。</p>
<ul>
<li><p>synchronized 同步块对自己是可重入的，不会将自己锁死；</p>
</li>
<li><p>同步块在已进入的线程执行完之前，会阻塞后面其他线程的进入。</p>
</li>
</ul>
<p>重入锁 ReentrantLock</p>
<ul>
<li><p>相比采用 synchronized ，重入锁可实现：等待可中断、公平锁、锁可以绑定多个条件；</p>
</li>
<li><p>Synchronized 表现为原生语法层面的互斥锁，而 ReentrantLock 表现为 API 层面的互斥锁。</p>
</li>
</ul>
<h3 id="非阻塞同步"><a href="#非阻塞同步" class="headerlink" title="非阻塞同步"></a>非阻塞同步</h3><p>阻塞同步：互斥同步存在的问题是进行线程阻塞和唤醒所带来的性能问题，这种同步称为阻塞同步，是一种悲观并发策略；</p>
<p>非阻塞同步：使用基于冲突的乐观并发策略，先进行操作，若没有其他线程征用共享数据，则操作成功；否则就是产生了冲突，采取不断重试直到成功的策略，不需要把线程挂起，称为非阻塞同步。</p>
<p>使用硬件处理器指令进行不断重试策略：</p>
<ul>
<li><p>测试并设置（Test-and-Set）</p>
</li>
<li><p>获取并增加（Fetch-and-Increment）</p>
</li>
<li><p>交换（Swap）</p>
</li>
<li><p>比较并交换（Compare-and-Swap，CAS）</p>
</li>
<li><p>加载链接（Load-Linked），条件存储（Store-Conditional）</p>
</li>
</ul>
<h3 id="无同步方案"><a href="#无同步方案" class="headerlink" title="无同步方案"></a>无同步方案</h3><p>可重入代码：也叫纯代码。可在代码执行过程中中断它，转而去执行另一段代码，而在控制权返回后，原来的程序不会出现任何错误。</p>
<p>线程本地存储：如果一段代码中数据必须与其他代码共享，那就看这些共享数据的代码能否在同一线程中执行，如果可以，就将共享数据的可见范围限定在同一个线程中。</p>
<h2 id="锁优化"><a href="#锁优化" class="headerlink" title="锁优化"></a>锁优化</h2><h3 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h3><p>互斥同步存在的问题：挂起线程和恢复线程都需要转入内核态中完成，这些操作给系统并发性能带来很大压力。</p>
<p>如果物理机器有一个以上的处理器能让两个或以上的线程并行执行，那就可以让后面请求锁的线程稍等一会，但不放弃处理器的执行时间，看持有锁的线程是否会很快释放锁。为了让线程等待，只需执行一个忙循环（自旋），这项技术就是自旋锁。Java 中自旋次数默认10次。</p>
<h3 id="自适应自旋"><a href="#自适应自旋" class="headerlink" title="自适应自旋"></a>自适应自旋</h3><p>由前一次在同一个锁上的自旋时间和锁拥有者的状态决定。</p>
<h3 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h3><p>定义：JVM 即时编译器在运行时，对一些代码上要求同步但被检测到不可能存在共享数据竞争的锁进行消除。</p>
<p>判定依据：如果在一段代码中，堆上所有数据都不会逃逸出去被其他线程访问到，就可以将它们当作栈上数据对待，认为他们是线程私有的，同步加锁自然无需进行。</p>
<h3 id="锁粗化"><a href="#锁粗化" class="headerlink" title="锁粗化"></a>锁粗化</h3><p>通常同步块的作用范围应尽可能小，但是如果一系列连续操作都对同一对象反复加锁，甚至加锁操作出现在循环体中，那即使没有线程争用，频繁的互斥同步也会导致不必要的性能损耗，此时应将同步块作用范围扩大。</p>
<h3 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h3><p>目的：消除数据无竞争下的同步，进一步提高程序性能。偏向锁就是在无竞争情况下将整个同步都消除，连CAS操作都不做。</p>
<p>偏向：意思是这个锁会偏向第一个获得它的线程，如果接下来该锁没有被其他线程获取，则持有该锁的线程永远不需要再次进行同步。</p>
<h2 id="URLConnection-对象"><a href="#URLConnection-对象" class="headerlink" title="URLConnection 对象"></a>URLConnection 对象</h2><p>一个 URLConnection 对象代表一个 URL 和 Java 程序的通讯连接，可以通过它对这个 URL 进行读或写。</p>
<h3 id="与-URL-对象的区别"><a href="#与-URL-对象的区别" class="headerlink" title="与 URL 对象的区别"></a>与 URL 对象的区别</h3><ul>
<li><p>URL 是单向的，URLConnection 是双向的。</p>
</li>
<li><p>URLConnection 可以查看服务器的响应信息的首部。</p>
</li>
<li><p>可以设置客户端请求消息的首部。</p>
</li>
</ul>
<h3 id="使用-URLConnection-对象通信的一般步骤"><a href="#使用-URLConnection-对象通信的一般步骤" class="headerlink" title="使用 URLConnection 对象通信的一般步骤"></a>使用 URLConnection 对象通信的一般步骤</h3><ol>
<li><p>构造一个 URL 对象</p>
</li>
<li><p>调用 URL 对象的 openConnection() 方法获取对应 URL 的 URLConnection 对象</p>
</li>
<li><p>配置 URLConnection 对象</p>
</li>
<li><p>读取首部字段</p>
</li>
<li><p>获得输入流从而读取数据</p>
</li>
<li><p>获得输出流向 URL 发送数据</p>
</li>
<li><p>关闭连接</p>
</li>
</ol>
<h2 id="发送-GET-请求"><a href="#发送-GET-请求" class="headerlink" title="发送 GET 请求"></a>发送 GET 请求</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static String sendGet(String url, String param) &#123;</span><br><span class="line">    String result &#x3D; &quot;&quot;;</span><br><span class="line">    BufferedReader in &#x3D; null;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        String urlNameString &#x3D; url + &quot;?&quot; + param;</span><br><span class="line">        URL realURL &#x3D; new URL(urlNameString);</span><br><span class="line">        var connection &#x3D; realURL.openConnection();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 设置通用的请求属性</span><br><span class="line">        connection.setRequestProperty(&quot;accept&quot;, &quot;*&#x2F;*&quot;);</span><br><span class="line">        connection.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class="line">        &#x2F;&#x2F; 建立实际的连接</span><br><span class="line">        connection.connect();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 定义输入流来读取 URL 响应</span><br><span class="line">        in &#x3D; new BufferedReader(new InputStreamReader(connection.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        while ((line &#x3D; in.readLine()) !&#x3D; null)</span><br><span class="line">            result +&#x3D; line;</span><br><span class="line"></span><br><span class="line">    &#125; catch (MalformedURLException e) &#123;</span><br><span class="line">        System.out.println(&quot;Malformed exception&quot;);</span><br><span class="line">    &#125; catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (in !&#x3D; null)</span><br><span class="line">                in.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="发送-POST-请求"><a href="#发送-POST-请求" class="headerlink" title="发送 POST 请求"></a>发送 POST 请求</h2><p>POST 请求的参数需要通过 URLConnection 的输出流来写入。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public static String sendPost(String url, String param) &#123;</span><br><span class="line">    &#x2F;&#x2F; 构造一个输出流</span><br><span class="line">    PrintWriter out &#x3D; null;</span><br><span class="line">    &#x2F;&#x2F; 构造一个输入流</span><br><span class="line">    BufferedReader in &#x3D; null;</span><br><span class="line">    String result &#x3D; &quot;&quot;;</span><br><span class="line"></span><br><span class="line">    try &#123;</span><br><span class="line">        URL realUrl &#x3D; new URL(url);</span><br><span class="line">        &#x2F;&#x2F; 打开和 url 之间的连接</span><br><span class="line">        var connection &#x3D; realUrl.openConnection();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 设置通用的请求属性</span><br><span class="line">        connection.setRequestProperty(&quot;accept&quot;, &quot;*&#x2F;*&quot;);</span><br><span class="line">        connection.setRequestProperty(&quot;connection&quot;, &quot;Keep-Alive&quot;);</span><br><span class="line">        &#x2F;&#x2F; 允许输出流</span><br><span class="line">        connection.setDoOutput(true);</span><br><span class="line">        &#x2F;&#x2F; 获取 URLConnection 对象对应的输出流</span><br><span class="line">        out &#x3D; new PrintWriter(connection.getOutputStream());</span><br><span class="line">        &#x2F;&#x2F; 发送请求参数</span><br><span class="line">        out.print(param);</span><br><span class="line">        &#x2F;&#x2F; flush 输出流的缓冲</span><br><span class="line">        out.flush();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 读取返回信息</span><br><span class="line">        in &#x3D; new BufferedReader(new InputStreamReader(connection.getInputStream()));</span><br><span class="line">        String line;</span><br><span class="line">        while ((line &#x3D; in.readLine()) !&#x3D; null)</span><br><span class="line">            result +&#x3D; line;</span><br><span class="line">    &#125; catch (MalformedURLException e) &#123;</span><br><span class="line">        System.out.println(&quot;Malformed exception&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    catch (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (out !&#x3D; null)</span><br><span class="line">                out.close();</span><br><span class="line">            if (in !&#x3D; null)</span><br><span class="line">                in.close();</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HttpURLConnection-类"><a href="#HttpURLConnection-类" class="headerlink" title="HttpURLConnection 类"></a>HttpURLConnection 类</h2><p>在 URLConnection 的基础上提供一系列针对 http 请求的内容。</p>
<ul>
<li><p>HTTP 状态码，如 HTTP_OK:200</p>
</li>
<li><p>setRequestMethod，设置请求方法GET/POST等</p>
</li>
<li><p>getResponseCode，获取 HTTP 的响应</p>
</li>
</ul>
<h2 id="Socket-通信原理"><a href="#Socket-通信原理" class="headerlink" title="Socket 通信原理"></a>Socket 通信原理</h2><p>网络上的两个程序通过一个双向的通讯连接实现数据的交换，这个双向链路的一段称为一个 socket 。</p>
<p>socket 通常用来实现客户方和服务方的连接。</p>
<h2 id="Socket-通信实现"><a href="#Socket-通信实现" class="headerlink" title="Socket 通信实现"></a>Socket 通信实现</h2><h3 id="客户端-Socket-的建立"><a href="#客户端-Socket-的建立" class="headerlink" title="客户端 Socket 的建立"></a>客户端 Socket 的建立</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 客户端socket的建立</span><br><span class="line">try &#123;</span><br><span class="line">    Socket socket &#x3D; new Socket(&quot;127.0.0.1&quot;, 2000);</span><br><span class="line">&#125; catch (UnknownHostException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务端-Socket-的建立"><a href="#服务端-Socket-的建立" class="headerlink" title="服务端 Socket 的建立"></a>服务端 Socket 的建立</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 服务端socket的建立</span><br><span class="line">ServerSocket serverSocket &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">    serverSocket &#x3D; new ServerSocket(2000);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    System.out.println(&quot;Cannot listen to&quot; + e);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; 接收请求</span><br><span class="line">Socket socket &#x3D; null;</span><br><span class="line">try &#123;</span><br><span class="line">    &#x2F;&#x2F; 一直等待连接请求，是一个阻塞方法</span><br><span class="line">    socket &#x3D; serverSocket.accept();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">    System.out.println(&quot;Error: &quot; + e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打开输入-输出流"><a href="#打开输入-输出流" class="headerlink" title="打开输入/输出流"></a>打开输入/输出流</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 打开输入输出流</span><br><span class="line">PrintStream os &#x3D; new PrintStream(new BufferedOutputStream(socket.getOutputStream()));</span><br><span class="line">DataInputStream is &#x3D; new DataInputStream(new BufferedInputStream(socket.getInputStream()));</span><br><span class="line">PrintWriter out &#x3D; new PrintWriter(socket.getOutputStream(), true);</span><br><span class="line">BufferedReader in &#x3D; new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br></pre></td></tr></table></figure>

<h3 id="关闭-socket"><a href="#关闭-socket" class="headerlink" title="关闭 socket"></a>关闭 socket</h3><p>注意先关闭输入输出流再关闭 socket</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 关闭 socket</span><br><span class="line">os.close();</span><br><span class="line">is.close();</span><br><span class="line">socket.close();</span><br></pre></td></tr></table></figure>

<h2 id="Socket-多客户端通信实现"><a href="#Socket-多客户端通信实现" class="headerlink" title="Socket 多客户端通信实现"></a>Socket 多客户端通信实现</h2><h3 id="客户端代码"><a href="#客户端代码" class="headerlink" title="客户端代码"></a>客户端代码</h3><p>与之前的通信实现没有什么区别</p>
<h3 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MultiTalkServer &#123;</span><br><span class="line">    &#x2F;&#x2F; 统计向服务端发送请求的客户端的编号</span><br><span class="line">    static int clientNum &#x3D; 0;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        ServerSocket server &#x3D; null;</span><br><span class="line">        boolean listening &#x3D; true;</span><br><span class="line"></span><br><span class="line">        try &#123;</span><br><span class="line">            server &#x3D; new ServerSocket(4700);</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            System.out.println(&quot;Cannot listen on port: 4700.&quot;);</span><br><span class="line">            System.exit(-1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        while (listening) &#123;</span><br><span class="line">            new ServerThread(server.accept(), clientNum).start();</span><br><span class="line">            clientNum++;</span><br><span class="line">        &#125;</span><br><span class="line">        server.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class ServerThread extends Thread &#123;</span><br><span class="line">    Socket socket &#x3D; null;</span><br><span class="line">    int clientNum;</span><br><span class="line"></span><br><span class="line">    public ServerThread(Socket socket, int num) &#123;</span><br><span class="line">        this.socket &#x3D; socket;</span><br><span class="line">        clientNum &#x3D; num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            String line;</span><br><span class="line">            BufferedReader sin &#x3D; new BufferedReader(new InputStreamReader(System.in));</span><br><span class="line">            PrintWriter os &#x3D; new PrintWriter(socket.getOutputStream());</span><br><span class="line">            BufferedReader is &#x3D; new BufferedReader(new InputStreamReader(socket.getInputStream()));</span><br><span class="line"></span><br><span class="line">            System.out.println(&quot;Client &quot; + clientNum + &quot;:&quot; + is.readLine());</span><br><span class="line">            line &#x3D; sin.readLine();</span><br><span class="line">            while (!line.equals(&quot;bye&quot;)) &#123;</span><br><span class="line">                os.println(line);</span><br><span class="line">                os.flush();</span><br><span class="line">                System.out.println(&quot;Server: &quot; + line);</span><br><span class="line">                System.out.println(&quot;Client &quot; + clientNum + &quot;: &quot; + is.readLine());</span><br><span class="line">                line &#x3D; sin.readLine();</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            os.close();</span><br><span class="line">            is.close();</span><br><span class="line">            socket.close();</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.out.println(&quot;Error: &quot; + e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="数据报通信"><a href="#数据报通信" class="headerlink" title="数据报通信"></a>数据报通信</h2><p>不需要面向连接的通讯方式，采用的是 UDP 协议。</p>
<h3 id="UDP（User-Datagram-Protocol）"><a href="#UDP（User-Datagram-Protocol）" class="headerlink" title="UDP（User Datagram Protocol）"></a>UDP（User Datagram Protocol）</h3><p>非面向连接的提供不可靠的数据包式的数据传输的协议。类似于从邮局发送信件的过程。</p>
<p>DatagramPacket，DatagramSocket，MulticastSocket 等类使用 UDP 协议进行网络通讯。</p>
<h3 id="TCP（Transport-Control-Protocol）"><a href="#TCP（Transport-Control-Protocol）" class="headerlink" title="TCP（Transport Control Protocol）"></a>TCP（Transport Control Protocol）</h3><p>面向连接的能够提供可靠流式数据传输的协议。类似于打电话的过程。</p>
<p>URL，URLConnection，Socket，ServerSocket 等类都使用 TCP 协议进行网络通讯。</p>
<h3 id="二者区别"><a href="#二者区别" class="headerlink" title="二者区别"></a>二者区别</h3><ul>
<li><p>TCP 有建立时间</p>
</li>
<li><p>UDP 传输有大小限制：64KB以内</p>
</li>
<li><p>TCP 的应用：Telnet，Ftp</p>
</li>
<li><p>UDP：Ping</p>
</li>
</ul>
<h2 id="使用数据报进行广播通信"><a href="#使用数据报进行广播通信" class="headerlink" title="使用数据报进行广播通信"></a>使用数据报进行广播通信</h2><h3 id="客户端代码-1"><a href="#客户端代码-1" class="headerlink" title="客户端代码"></a>客户端代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MulticastClient &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        MulticastSocket socket &#x3D; new MulticastSocket(4446);</span><br><span class="line">        InetAddress address &#x3D; InetAddress.getByName(&quot;230.0.0.1&quot;);</span><br><span class="line">        socket.joinGroup(address);</span><br><span class="line"></span><br><span class="line">        DatagramPacket packet;</span><br><span class="line">        &#x2F;&#x2F; 接收广播信息</span><br><span class="line">        for (int i &#x3D; 0; i &lt; 5; i++) &#123;</span><br><span class="line">            byte[] buf &#x3D; new byte[256];</span><br><span class="line">            packet &#x3D; new DatagramPacket(buf, buf.length);</span><br><span class="line">            socket.receive(packet);</span><br><span class="line">            String received &#x3D; new String(packet.getData());</span><br><span class="line">            System.out.println(&quot;Quote of the moment: &quot; + received);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        socket.leaveGroup(address);</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="服务端代码-1"><a href="#服务端代码-1" class="headerlink" title="服务端代码"></a>服务端代码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MulticastServer &#123;</span><br><span class="line">    public static void main(String[] args) throws IOException &#123;</span><br><span class="line">        new MulticastServerThread().start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class MulticastServerThread extends Thread &#123;</span><br><span class="line">    private long FIVE_SEC &#x3D; 5000;</span><br><span class="line">    protected DatagramSocket socket &#x3D; null;</span><br><span class="line">    protected BufferedReader in &#x3D; null;</span><br><span class="line">    protected boolean moreQuotes &#x3D; true;</span><br><span class="line"></span><br><span class="line">    public MulticastServerThread() throws IOException&#123;</span><br><span class="line">        socket &#x3D; new DatagramSocket(4446);</span><br><span class="line">        try &#123;</span><br><span class="line">            in &#x3D; new BufferedReader(new FileReader(&quot;one-liners.txt&quot;));</span><br><span class="line">        &#125; catch (FileNotFoundException e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void run() &#123;</span><br><span class="line">        while (moreQuotes) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                byte[] buf &#x3D; new byte[256];</span><br><span class="line">                &#x2F;&#x2F; 构造quote</span><br><span class="line">                String dateString &#x3D; null;</span><br><span class="line">                if (in &#x3D;&#x3D; null)</span><br><span class="line">                    dateString &#x3D; new Date().toString();</span><br><span class="line">                else</span><br><span class="line">                    dateString &#x3D; getNextQuotes();</span><br><span class="line">                buf &#x3D; dateString.getBytes();</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 发送广播</span><br><span class="line">                InetAddress group &#x3D; InetAddress.getByName(&quot;230.0.0.1&quot;);</span><br><span class="line">                DatagramPacket packet &#x3D; new DatagramPacket(buf, buf.length, group, 4446);</span><br><span class="line">                socket.send(packet);</span><br><span class="line"></span><br><span class="line">                &#x2F;&#x2F; 休眠一段时间</span><br><span class="line">                try &#123;</span><br><span class="line">                    sleep((long) (Math.random()*FIVE_SEC));</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                System.out.println(e);</span><br><span class="line">                moreQuotes &#x3D; false;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    protected String getNextQuotes() &#123;</span><br><span class="line">        String returnValue &#x3D; null;</span><br><span class="line">        try &#123;</span><br><span class="line">            if ((returnValue &#x3D; in.readLine()) &#x3D;&#x3D; null) &#123;</span><br><span class="line">                in.close();</span><br><span class="line">                moreQuotes &#x3D; false;</span><br><span class="line">                returnValue &#x3D; &quot;No more quotes.&quot;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        return returnValue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Java-虚拟机的概念"><a href="#Java-虚拟机的概念" class="headerlink" title="Java 虚拟机的概念"></a>Java 虚拟机的概念</h2><p>Java 虚拟机是一个想象中的机器，在计算机上通过软件模拟来实现。Java 虚拟机有想象的硬件，如处理器、堆栈、寄存器还有相应的指令系统。</p>
<p>Java 虚拟机是实现 Java 跨平台特性的关键。</p>
<h3 id="Java-虚拟机的生命周期"><a href="#Java-虚拟机的生命周期" class="headerlink" title="Java 虚拟机的生命周期"></a>Java 虚拟机的生命周期</h3><p>main() 方法是程序的起点，它被执行的线程初始化为程序的初始线程。程序中其它线程都由它来启动。</p>
<p>只要 Java 虚拟机中还有普通线程在执行，虚拟机就不会停止。如果有足够权限，可以调用 exit() 方法终止程序。</p>
<h3 id="Java-虚拟机的体系结构"><a href="#Java-虚拟机的体系结构" class="headerlink" title="Java 虚拟机的体系结构"></a>Java 虚拟机的体系结构</h3><p>每一个 Java 虚拟机都有一个 <strong>类加载器子系统（Class loader subsystem）</strong>，负责加载程序中的类型（类 class 和接口 interface），并赋予唯一的名字。每一个 Java 虚拟机都有一个 <strong>执行引擎（execution engine）</strong> 负责执行被加载类中包含的指令。</p>
<h2 id="Java-虚拟机内存划分"><a href="#Java-虚拟机内存划分" class="headerlink" title="Java 虚拟机内存划分"></a>Java 虚拟机内存划分</h2><p>运行时数据区大致可划分为</p>
<h3 id="线程共享区"><a href="#线程共享区" class="headerlink" title="线程共享区"></a>线程共享区</h3><ul>
<li><p>方法区 Method Area</p>
<p>  JVM 中内存共享的一片区域，用来存储类信息、常量、静态变量、class 文件。垃圾回收器也会对这部分区域进行回收，比如常量池的清理和类型的卸载。</p>
<p>  方法区内存不够的时候会抛出 OutOfMemoryError 错误。</p>
</li>
<li><p>堆 Heap</p>
<p>  是 JVM 中内存最大、线程共享的区域。唯一目的是存储对象实例。也是垃圾回收器主要工作的区域。</p>
<p>  由于现代垃圾收集器采用分代收集算法，因此堆也分为新生代堆和老年代堆。</p>
<p>  可以通过参数 -Xmx（JVM 最大可用内存）和 -Xms（JVM 初始内存）来调整堆内存。如果扩大至无法继续扩展时，会出现 OutOfMemoryError 错误。</p>
</li>
</ul>
<h3 id="线程私有区"><a href="#线程私有区" class="headerlink" title="线程私有区"></a>线程私有区</h3><ul>
<li><p>虚拟机栈 VM Stack</p>
<p>  就是指栈内存。Java 中每一个方法从调用直至执行完毕的过程，就对应着一个栈帧从虚拟机栈中入栈到出栈的过程。</p>
<p>  如果线程所请求的栈深度大于虚拟机栈允许的深度，将抛出 StackOverflowError 异常。</p>
<p>  如果虚拟机栈可以动态扩展，扩展时无法申请到足够内存，就会抛出 OutOfMemoryError 异常。</p>
</li>
<li><p>本地方法栈 Native Method Stack</p>
<p>  用来执行本地方法，不一定是用 Java 代码写的方法。抛出异常的情况和虚拟机栈一样，而虚拟机栈用来执行 Java 方法。</p>
</li>
<li><p>程序计数器 Program Counter Register</p>
<p>  JVM 将这个计数看作当前线程执行某条字节码的行数，根据计数器的值来选取需要执行的操作语句。属于线程私有，不可共享，如果共享会导致计数混乱，无法准确执行当前线程要执行的语句。</p>
<p>  该区域不会出现任何 OutOfMemoryError 的情况。</p>
</li>
</ul>
<h2 id="JVM-类加载机制"><a href="#JVM-类加载机制" class="headerlink" title="JVM 类加载机制"></a>JVM 类加载机制</h2><p>JVM 把描述类的数据从 class 文件加载到内存，并对数据进行校验、转换解析和初始化，最终形成可以被虚拟机直接使用的 Java 类型。</p>
<p>Java 语言里，类的加载和连接过程是在程序运行期间完成的。</p>
<h3 id="类的生命周期"><a href="#类的生命周期" class="headerlink" title="类的生命周期"></a>类的生命周期</h3><p><strong>1. 加载 Loading</strong></p>
<p>通过一个类的类名来获取此类的二进制字节码。</p>
<p>将这个字节码所代表的静态存储结构转化为方法区的运行时数据结构。</p>
<p>在 Java 堆中生成一个代表这个类的 Class 对象，作为方法区数据的访问入口。</p>
<p><strong>2. 验证 Verification</strong></p>
<ul>
<li><p><strong>JVM 规范</strong>：验证输入的字节流是否符合 Class 文件的存储格式，否则抛出一个 VerifyError 异常。</p>
</li>
<li><p><strong>文件格式验证</strong>：验证字节流是否符合 Class 文件格式的规范，并能被当前版本的 JVM 处理。经过这个阶段验证，字节流进入内存的方法区中存储。</p>
</li>
<li><p><strong>元数据验证</strong>：对类的元数据信息进行语义校验，保证不存在不符合 Java 语言规范的元数据信息。</p>
</li>
<li><p><strong>字节码验证</strong>：进行数据流和控制流分析，对类的方法体进行校验分析，保证被校验的类的方法在运行时不会做危害 JVM 安全的行为。</p>
</li>
<li><p><strong>符号引用验证</strong>：发生在虚拟机将符号引用转换为直接引用的时候（解析阶段），对常量池中的各种符号引用的信息进行匹配性的校验。</p>
</li>
</ul>
<p><strong>3. 准备 Preparation</strong></p>
<p>正式为类变量分配内存并设置类变量初始值（各数据类型的零值）的阶段，这些内存将在方法区中进行分配。</p>
<p><strong>4. 解析 Resolution</strong></p>
<p>是在 JVM 中将常量池内的符号引用替换为直接引用的过程。</p>
<blockquote>
<p><strong>符号引用</strong>：以一组符号来描述所引用的目标，可以是任何形式的字面量。符号引用与 JVM 实现的内存布局无关，引用的目标不一定已加载到内存中。</p>
</blockquote>
<blockquote>
<p><strong>直接引用</strong>：可以是直接指向目标的指针、相对偏移量或一个能间接定位到目标的句柄。如果有了直接引用，那引用目标必然已经存在于内存中。</p>
</blockquote>
<p><strong>5. 初始化 Initialization</strong></p>
<p>&lt;clinit&gt;() 方法：由编译器自动收集类中所有类变量的赋值动作和静态语句块中语句合并产生，收集的顺序是由语句在源文件中出现的顺序决定的。</p>
<p>该方法与实例构造器 &lt;init&gt;() 不同，不需显式的调用父类构造器。</p>
<p>该方法对于类或接口来说不是必须的。</p>
<p>JVM 会保证一个类的该方法在多线程环境中被正确加锁和同步。</p>
<p><strong>6. 使用 Using</strong></p>
<ul>
<li><p>类的主动引用</p>
<p>  遇到 new（实例化对象）、getstatic（读取一个类的静态字段）、putstatic（设置一个类的静态字段、invokestatic（调用一个类的静态方法）这四条字节码指令时</p>
<p>  对类进行反射调用的时候。</p>
<p>  当初始化一个类时，发现其父类没有进行初始化，需先触发其父类的初始化。</p>
<p>  当虚拟机启动时，虚拟机会初始化主类（包含 main 方法的那个类）。</p>
</li>
<li><p>类的被动引用</p>
<p>  通过子类调用父类的静态字段，不会导致子类的初始化（只有直接定义一个静态字段时这个类才会被初始化）。</p>
<p>  通过数组定义类的应用类，创建动作由字节码 newarray 触发。</p>
<p>  常量会在编译阶段存入调用类的常量池。</p>
</li>
</ul>
<p><strong>7. 卸载 Unloading</strong></p>
<h2 id="判断对象是否存活算法"><a href="#判断对象是否存活算法" class="headerlink" title="判断对象是否存活算法"></a>判断对象是否存活算法</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><p>实现简单，判断效率也高，但 Java 语言没有选择引用计数算法来管理内存，其中主要原因是它很难解决对象间相互循环引用的问题。</p>
<h3 id="可达性分析算法（根搜索算法）"><a href="#可达性分析算法（根搜索算法）" class="headerlink" title="可达性分析算法（根搜索算法）"></a>可达性分析算法（根搜索算法）</h3><p>在主流的商用程序语言中（Java 和 C#），都是使用可达性分析算法来判断对象是否存活。</p>
<p>根搜索算法是从离散数学的图论引入的，程序把所有引用关系看作一张图，从一个节点 GC ROOT 开始，如果一个节点与 GC ROOT 之间没有引用链存在，则该节点视为垃圾回收的对象。</p>
<p>在 Java 语言中，可作为 GC Roots 对象的包括：</p>
<ul>
<li><p>虚拟机栈（栈帧中的本地变量表）中引用的对象；</p>
</li>
<li><p>方法区中的类静态属性引用的对象；</p>
</li>
<li><p>方法区中的常量引用的对象；</p>
</li>
<li><p>本地方法栈中 JNI 引用的对象。</p>
</li>
</ul>
<h3 id="对象引用"><a href="#对象引用" class="headerlink" title="对象引用"></a>对象引用</h3><h4 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a><strong>强引用</strong></h4><p>只要引用存在，垃圾回收器永远不会回收。</p>
<p><code>Object obj = new Object();</code></p>
<p>obj 对象对后面 new Object 有一个强引用，只有当这个 obj 对象被释放后（即为 null），对象才会被释放。</p>
<h4 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a><strong>软引用</strong></h4><p>非必须引用，内存溢出之前进行回收，可通过以下代码实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object obj &#x3D; new Object();</span><br><span class="line">SoftReference&lt;Object&gt; sf &#x3D; new SoftReference&lt;Object&gt;(obj);</span><br><span class="line">obj &#x3D; null;</span><br><span class="line">sf.get();</span><br></pre></td></tr></table></figure>

<p>软引用主要用于实现类似缓存的功能，在内存足够的情况下直接通过软引用取值，提升速度；当内存不足时，自动删除这部分缓存数据，从真正的来源查询这些数据。</p>
<h4 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a><strong>弱引用</strong></h4><p>在第二次垃圾回收时再回收，可以通过以下代码实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object obj &#x3D; new Object();</span><br><span class="line">WeakReference&lt;Object&gt; wf &#x3D; new WeakReference&lt;Object&gt;(obj);</span><br><span class="line">obj &#x3D; null;</span><br><span class="line">wf.get();  &#x2F;&#x2F; 有时候会返回 null</span><br><span class="line">wf.isEnQueued();</span><br></pre></td></tr></table></figure>

<p>弱引用主要用于监控对象是否已经被垃圾回收器标记为即将回收的垃圾，可以通过弱引用的 isEnQueued 方法返回对象是否已被垃圾回收器回收。</p>
<h4 id="虚引用（幽灵-幻影引用）"><a href="#虚引用（幽灵-幻影引用）" class="headerlink" title="虚引用（幽灵/幻影引用）"></a><strong>虚引用（幽灵/幻影引用）</strong></h4><p>在每次垃圾回收时都被回收，无法通过引用获取到对象值，可通过以下代码实现。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Object obj &#x3D; new Object();</span><br><span class="line">PhantomReference&lt;Object&gt; pf &#x3D; new PhantomReference&lt;Object&gt;(obj);</span><br><span class="line">obj &#x3D; null;</span><br><span class="line">pf.get();  &#x2F;&#x2F; 永远返回 null</span><br><span class="line">pf.isEnQueued();</span><br></pre></td></tr></table></figure>

<p>主要用于检测对象是否已经从内存中删除。</p>
<h2 id="分代垃圾回收"><a href="#分代垃圾回收" class="headerlink" title="分代垃圾回收"></a>分代垃圾回收</h2><p>分代垃圾收集器是基于以下两个假设而创建的</p>
<ol>
<li>绝大多数对象在短时间内变得不可达（即无用）</li>
<li>只有少量老年对象引用年轻对象</li>
</ol>
<h3 id="年轻代和老年代"><a href="#年轻代和老年代" class="headerlink" title="年轻代和老年代"></a>年轻代和老年代</h3><h4 id="年轻代"><a href="#年轻代" class="headerlink" title="年轻代"></a><strong>年轻代</strong></h4><p>新创建的对象都存放在这里。因为大多数对象很快变得不可达，所以大多数对象在年轻代中创建，然后消失。当对象从这块内存区域消失时，就发生了一次“minor GC”。</p>
<p>年轻代共有 3 块区域，1 块为 Eden 区，2 块为 Survivor 区。各个空间的执行顺序如下：</p>
<p>绝大多数新创建的对象分配在 Eden 区。</p>
<p>在 Eden 区发生一次 GC 后，存活的对象移到其中一个 Survivor 区。</p>
<p>一旦一个 Survivor 区已满，存活的对象移动到另一个 Survivor 区。然后之前空间已满的 Survivor 区将置为空。</p>
<p>经过重复多次这样的步骤后依旧存活的对象将被移到老年代。</p>
<h4 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a><strong>老年代</strong></h4><p>没有变得不可达，存活下来的年轻代对象被复制到这里。这块内存区域一般大于年轻代。GC 发生的次数比在年轻代的少。对象从老年代消失时，就是“major GC”（或“full GC”）发生了。</p>
<h2 id="典型的垃圾收集算法"><a href="#典型的垃圾收集算法" class="headerlink" title="典型的垃圾收集算法"></a>典型的垃圾收集算法</h2><h3 id="Mark-Sweep-标记-清除算法"><a href="#Mark-Sweep-标记-清除算法" class="headerlink" title="Mark-Sweep 标记-清除算法"></a>Mark-Sweep 标记-清除算法</h3><p>最基础最容易实现的垃圾回收算法。分为两个阶段：标记阶段和清除阶段。</p>
<p>标记阶段的任务是标记出所有需要被回收的对象，清除阶段就是回收被标记的对象所占用的空间。</p>
<p>虽然实现比较容易，但有一个比较严重的问题就是容易产生内存碎片，碎片太多可能会导致后续过程中需要为大对象分配空间时，无法找到足够空间而提前触发新的一次垃圾收集动作。</p>
<h3 id="Copying-复制算法"><a href="#Copying-复制算法" class="headerlink" title="Copying 复制算法"></a>Copying 复制算法</h3><p>将可用内存按容量划分为大小相等的两块，每次只使用其中一块。当这一块内存用完了，就将还存活着的对象复制到另一块上，然后再把已使用的内存空间一次性清理掉，这样就不容易出现内存碎片的问题。</p>
<p>这种算法虽实现简单，运行高效且不容易产生内存碎片，但却对内存空间的使用做出了高昂的代价，因为能够使用的内存缩减到原来的一半。</p>
<p>显然，复制算法的效率与存活对象的数量有很大关系，如果存活对象很多，那么复制算法的效率将大大降低。</p>
<h3 id="Mark-Compact-标记-整理算法"><a href="#Mark-Compact-标记-整理算法" class="headerlink" title="Mark-Compact 标记-整理算法"></a>Mark-Compact 标记-整理算法</h3><p>为解决复制算法的缺陷，充分利用内存空间，提出了标记-整理算法。</p>
<p>该算法标记阶段和标记-清除算法一样，但是在完成标记后，不是直接清理可回收对象，而是将存活对象都向一端移动，然后清理掉端边界以外的内存。</p>
<h3 id="Generational-Collection-分代收集算法"><a href="#Generational-Collection-分代收集算法" class="headerlink" title="Generational Collection 分代收集算法"></a>Generational Collection 分代收集算法</h3><p>是大部分 JVM 的 GC 采用的算法。</p>
<p>核心思想是根据对象存活的生命周期将内存划分为若干不同区域。即老年代（Tenured Generation）和年轻代（Young Generation）。</p>
<p>老年代的特点是每次 GC 时只有少量对象被回收，而新生代是每次 GC 都有大量对象需要被回收，那么就可以根据不同代的特点采取最适合的收集算法。</p>
<p>目前大部分 GC 对于新生代都采用 Copying 算法，因为新生代中存在大量需被回收的对象，也就是说需要复制的次数少。但实际并不是按 1 : 1 的比例来划分新生代空间，而是分为一块较大的 Eden 空间，和两块较小的 Survivor 空间。每次只使用 Eden 空间和其中一块 Survivor 空间。</p>
<p>由于老年代每次回收都只回收少量对象，一般采用 Mark-Compact 算法。</p>
<p>注意，在堆区之外还有一个代叫永久代（Permanent Generation），用来存储 class 类、常量、方法描述等。对永久代主要回收：废弃常量和无用的类。</p>
<h2 id="典型的垃圾收集器"><a href="#典型的垃圾收集器" class="headerlink" title="典型的垃圾收集器"></a>典型的垃圾收集器</h2><h3 id="Serial-Serial-Old"><a href="#Serial-Serial-Old" class="headerlink" title="Serial/Serial Old"></a>Serial/Serial Old</h3><p>是最基本最古老的单线程收集器，在它进行垃圾收集时，必须暂停所有用户线程。</p>
<p>Serial 收集器是针对新生代的收集器，采用 Copying 算法。Serial Old 收集器是针对老年代的收集器，采用 Mark-Compact 算法。</p>
<p>优点是实现简单高效，但缺点是会给用户带来停顿。</p>
<h3 id="ParNew"><a href="#ParNew" class="headerlink" title="ParNew"></a>ParNew</h3><p>是 Serial 收集器的多线程版本，使用多个线程进行垃圾收集。</p>
<h3 id="Parallel-Scavenge"><a href="#Parallel-Scavenge" class="headerlink" title="Parallel Scavenge"></a>Parallel Scavenge</h3><p>是一个新生代的多线程收集器（并行收集器），在回收期间不需要暂停其他用户线程，该收集器与前两个不同，主要是为了达到一个可控的吞吐量。</p>
<p>Parallel Old 是该收集器的老年代版本（并行收集器），同样使用多线程。</p>
<h3 id="Current-Mark-Sweep"><a href="#Current-Mark-Sweep" class="headerlink" title="Current Mark Sweep"></a>Current Mark Sweep</h3><p>CMS 收集器是一种以获取最短回收停顿时间为目标的收集器，是一种并发收集器，采用 Mark-Sweep 算法。</p>
<h3 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h3><p>G1 收集器是当今收集器计数发展最前沿的结果，是一款面向服务端应用的收集器，能充分利用多 CPU、多核环境。因此是一款并行并发收集器，并能建立可预测的停顿时间模型。</p>
<h2 id="Java-反射机制"><a href="#Java-反射机制" class="headerlink" title="Java 反射机制"></a>Java 反射机制</h2><h3 id="Java-类型信息"><a href="#Java-类型信息" class="headerlink" title="Java 类型信息"></a>Java 类型信息</h3><p>获取 Java 运行时的类型信息有两种方法：</p>
<ul>
<li><p>RTTI（Run-time Type Identification）</p>
<p>  在运行时，需要识别一个对象的类型。假如从数组中取出一个元素时，Java 虚拟机会自动将结果转型回父类型（例如 Circle 继承自 Shape，取出一个 Circle 元素时会将其转换为 Shape）。</p>
<p>  因为在 Java 中，所有类型转换都是在运行时进行正确性检查的。</p>
<p>  大部分代码尽可能少地了解对象的具体类型，而是和对象家族中一个通用类型打交道。</p>
</li>
<li><p>Java 反射机制</p>
<p>  在运行状态中，对于任意一个类，都能知道这个类的所有属性和方法；对于任意一个对象，都能调用它的任意方法和属性；这种动态获取信息以及动态调用对象方法的功能称为 Java 的反射机制。</p>
</li>
</ul>
<h3 id="利用-Class-类来创建实例"><a href="#利用-Class-类来创建实例" class="headerlink" title="利用 Class 类来创建实例"></a>利用 Class 类来创建实例</h3><p>创建 Class 的一个对象，返回一个类的引用</p>
<p><code>Class cls = Class.forName(&quot;Airplane&quot;);  // 返回一个类型</code></p>
<p>通过类的引用创建实例</p>
<p><code>cls.newInstance();  // 通过 newInstance 创建一个 Airplane 类型的实例，一般调用默认构造函数</code></p>
<h3 id="Method-类的-invoke-方法"><a href="#Method-类的-invoke-方法" class="headerlink" title="Method 类的 invoke 方法"></a>Method 类的 invoke 方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line">public class InvokeTester &#123;</span><br><span class="line">    public void add(Integer param1, Integer param2) &#123;</span><br><span class="line">        System.out.println(param1.intValue() + param2.intValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void stringAdd(String str) &#123;</span><br><span class="line">        System.out.println(&quot;out&quot; + str);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Method mth &#x3D; InvokeTester.class.getMethod(&quot;add&quot;, new Class[]&#123;Integer.class, Integer.class&#125;);</span><br><span class="line">            mth.invoke(InvokeTester.class.newInstance(), new Integer(1), new Integer(2));</span><br><span class="line">            Method mth1 &#x3D; InvokeTester.class.getMethod(&quot;stringAdd&quot;, String.class);</span><br><span class="line">            mth1.invoke(InvokeTester.class.newInstance(), &quot;---test&quot;);</span><br><span class="line">        &#125;  catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>某些情况下，一个客户不想或不能直接引用另一个对象，而代理对象可以在客户端和目标对象之间起到中介的作用。</p>
<p>代理模式的作用：为其他对象提供一种代理以控制对当前对象的访问。</p>
<h3 id="代理模式一般涉及的角色"><a href="#代理模式一般涉及的角色" class="headerlink" title="代理模式一般涉及的角色"></a>代理模式一般涉及的角色</h3><h4 id="抽象角色：声明真实对象和代理对象的共同接口。"><a href="#抽象角色：声明真实对象和代理对象的共同接口。" class="headerlink" title="抽象角色：声明真实对象和代理对象的共同接口。"></a>抽象角色：声明真实对象和代理对象的共同接口。</h4><h4 id="代理角色：内部含有对真实对象的引用，从而可以操作真实对象，同时提供与真实对象相同的接口，以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他操作，相当于对真实对象进行封装。"><a href="#代理角色：内部含有对真实对象的引用，从而可以操作真实对象，同时提供与真实对象相同的接口，以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他操作，相当于对真实对象进行封装。" class="headerlink" title="代理角色：内部含有对真实对象的引用，从而可以操作真实对象，同时提供与真实对象相同的接口，以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他操作，相当于对真实对象进行封装。"></a>代理角色：内部含有对真实对象的引用，从而可以操作真实对象，同时提供与真实对象相同的接口，以便在任何时刻都能代替真实对象。同时，代理对象可以在执行真实对象操作时，附加其他操作，相当于对真实对象进行封装。</h4><h4 id="真实角色：代理角色所代表的真实对象，是最终要引用的对象。"><a href="#真实角色：代理角色所代表的真实对象，是最终要引用的对象。" class="headerlink" title="真实角色：代理角色所代表的真实对象，是最终要引用的对象。"></a>真实角色：代理角色所代表的真实对象，是最终要引用的对象。</h4><h3 id="静态代理例子"><a href="#静态代理例子" class="headerlink" title="静态代理例子"></a>静态代理例子</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F; 共同接口</span><br><span class="line">abstract class Subject &#123;</span><br><span class="line">    public abstract void request();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 真实对象</span><br><span class="line">class RealSubject extends Subject &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void request() &#123;</span><br><span class="line">        System.out.println(&quot;From real subject.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 代理对象</span><br><span class="line">class ProxySubject extends Subject &#123;</span><br><span class="line">    &#x2F;&#x2F; 内部含有对真实对象的引用</span><br><span class="line">    private RealSubject realSubject;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void request() &#123;</span><br><span class="line">        &#x2F;&#x2F; 在真实操作前附加的操作</span><br><span class="line">        preRequest();</span><br><span class="line"></span><br><span class="line">        if (realSubject &#x3D;&#x3D; null) &#123;</span><br><span class="line">            realSubject &#x3D; new RealSubject();</span><br><span class="line">        &#125;</span><br><span class="line">        realSubject.request();</span><br><span class="line"></span><br><span class="line">        &#x2F;&#x2F; 在真实操作后附加的操作</span><br><span class="line">        postRequest();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void preRequest() &#123;</span><br><span class="line">        System.out.println(&quot;Pre&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void postRequest() &#123;</span><br><span class="line">        System.out.println(&quot;Post&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Subject subject &#x3D; new ProxySubject();</span><br><span class="line">        subject.request();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态代理的优缺点"><a href="#静态代理的优缺点" class="headerlink" title="静态代理的优缺点"></a>静态代理的优缺点</h3><ul>
<li><p>优点</p>
<p>  业务类只需要关注业务逻辑本身，保证了业务类的重用性。这是代理的共有优点。</p>
</li>
<li><p>缺点</p>
<p>  代理对象的一个接口只服务于一种类型的对象，如果要代理的方法很多，势必要为每一个方法都进行代理，静态代理在程序规模稍大时就无法胜任了。</p>
<p>  如果接口增加一个方法，除了所有实现类需要实现这个方法外，所有代理类也需实现该方法。增加了代码维护的复杂度。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java Advanced</category>
      </categories>
  </entry>
  <entry>
    <title>Java Basics</title>
    <url>/2021/12/29/Java-Basics/</url>
    <content><![CDATA[<h2 id="JAVA-语言基础"><a href="#JAVA-语言基础" class="headerlink" title="JAVA 语言基础"></a>JAVA 语言基础</h2><h3 id="JAVA-语言特点"><a href="#JAVA-语言特点" class="headerlink" title="JAVA 语言特点"></a>JAVA 语言特点</h3><p>面向对象思想：核心之一是开发者可以使用自定义的类型和关联操作。代码和数据的实际集合体叫做“对象”，一个对象可以想象成绑定了很多“行为（代码）”和“状态（数据）”的物体。<br>平台无关性：JAVA 语言的最大优势在于平台无关性。程序只需进行一次开发便可以在不同平台上运行（只要安装相应的 JAVA 虚拟机）。</p>
<h3 id="JAVA-运行机制"><a href="#JAVA-运行机制" class="headerlink" title="JAVA 运行机制"></a>JAVA 运行机制</h3><p>源文件（*.java 文件）先被编译成字节码文件（*.class 文件），然后由 JVM 通过解释的方式执行字节码文件。</p>
<h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><p>byte：占 1 字节（2^7），-128127；<br>short：占 2 字节（2^15），-3276832767；<br>int：占 4 字节（2^31），-2147483648~2147483647；<br>long：占 8 字节（2^63）；</p>
<h4 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h4><p>float：占 4 字节；<br>double：占 8 字节；</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><ol>
<li><p> 数组是对象，需要动态初始化。先定义数组的名字，然后用动态的方式分配内存空间。</p>
</li>
<li><p> 数组可以赋值给 Object 类型的变量。</p>
</li>
<li><p> 在数组中可以调用 Object 类中的所有方法。</p>
</li>
<li><p> 想要复制一个数组或数组的部分元素可以使用 arraycopy() 方法。</p>
</li>
<li><p> 二维数组：二维数组的长度指的是其行数。</p>
</li>
</ol>
<h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><p>JAVA 中的所有对象都要通过类来创建，类是创建对象的模板，是对象的抽象描述，对象是类的具体实例。<br>可以在一个源文件中声明多个类，但每个类在编译后都会生成自己的字节码文件。当在一段代码中使用另一个类时，需要确保在当前代码所在目录中能搜索到需要使用的类的字节码文件。</p>
<h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>属性用来记录对象的最基本信息，一个对象通常包含多个属性，具体包含哪些属性由创建对象的类来决定。<br>使用一个类创建出的不同对象，具备相同的属性。</p>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>方法是对象所提供的功能。</p>
<h3 id="对象的内存模型"><a href="#对象的内存模型" class="headerlink" title="对象的内存模型"></a>对象的内存模型</h3><h4 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h4><p>对于一条创建对象的语句 Rect r1 = new Rect(); 实际包含两个操作，一个是 Rect r1，第二个是 r1 = new Rect() 。<br>r1 是一个引用变量，即一块内存空间。若这段代码写在某个方法中，则 r1 为一个局部变量，内存空间开辟在栈中。真正的对象由 new Rect() 创建出来，通过 new 关键字创建的对象属于动态创建，对象的存储空间被分配到堆中。<br>Rect r2 = r1 依旧包含两个操作，第一是创建一个引用变量 r2 ，第二是将 r1 中的内容赋值给 r2 。</p>
<h4 id="参数传递时的内存模型"><a href="#参数传递时的内存模型" class="headerlink" title="参数传递时的内存模型"></a>参数传递时的内存模型</h4><ol>
<li><p> 方法声明时的参数列表被称为形参，方法调用时的参数列表称为实参。</p>
</li>
<li><p> 方法调用中的参数传递时，形参会占用一块内存空间。传递参数只是进行了值传递，也就是将实参的值赋给了形参。形参和实参不是同一块内存区域，仅仅是值相同而已。方法执行时对形参的任何操作都不会影响到实参。</p>
</li>
</ol>
<h3 id="对象的内存回收"><a href="#对象的内存回收" class="headerlink" title="对象的内存回收"></a>对象的内存回收</h3><h4 id="无用对象"><a href="#无用对象" class="headerlink" title="无用对象"></a>无用对象</h4><ul>
<li><p>  离开了作用域的对象；</p>
</li>
<li><p>  无引用指向对象。</p>
</li>
</ul>
<h4 id="Java运行时系统通过垃圾回收器周期性地释放无用对象所使用的内存。"><a href="#Java运行时系统通过垃圾回收器周期性地释放无用对象所使用的内存。" class="headerlink" title="Java运行时系统通过垃圾回收器周期性地释放无用对象所使用的内存。"></a>Java运行时系统通过垃圾回收器周期性地释放无用对象所使用的内存。</h4><h4 id="对对象进行垃圾回收前，自动调用对象的-finalize-方法。"><a href="#对对象进行垃圾回收前，自动调用对象的-finalize-方法。" class="headerlink" title="对对象进行垃圾回收前，自动调用对象的 finalize() 方法。"></a>对对象进行垃圾回收前，自动调用对象的 finalize() 方法。</h4><h3 id="垃圾收集器"><a href="#垃圾收集器" class="headerlink" title="垃圾收集器"></a>垃圾收集器</h3><ul>
<li>自动扫描对象的动态内存区，对不再使用的对象做上标记以进行垃圾回收。</li>
<li>作为一个后台线程运行，通常在系统空闲时异步地执行。</li>
</ul>
<h3 id="finalize-方法"><a href="#finalize-方法" class="headerlink" title="finalize() 方法"></a>finalize() 方法</h3><p>有可能在任何时机以任何次序执行。因此，重写方法时对其他资源的释放操作不能有严格的次序关系，即不管哪个对象的 finalize() 方法先执行，都不应该影响程序的正确性。</p>
<h3 id="终结类与终结方法"><a href="#终结类与终结方法" class="headerlink" title="终结类与终结方法"></a>终结类与终结方法</h3><ul>
<li>终结类只能直接使用，不能被继承；</li>
<li>终结方法是继承过来只能原样使用，不能被重写的方法。</li>
</ul>
<h3 id="方法的查找"><a href="#方法的查找" class="headerlink" title="方法的查找"></a>方法的查找</h3><ul>
<li>实例方法的查找：从对象创建时的类开始，逐层向上查找；</li>
<li>类方法（静态方法）的查找：总是在引用变量声明时所属的类中进行查找。</li>
</ul>
<h3 id="实现构造方法的注意事项"><a href="#实现构造方法的注意事项" class="headerlink" title="实现构造方法的注意事项"></a>实现构造方法的注意事项</h3><ul>
<li>用尽可能少的动作把对象的状态设置好；</li>
<li>如果可以避免，不要调用任何方法；</li>
<li>在构造方法中唯一能安全调用的是在超类中具有 final 属性的方法（private 也适用），这些方法不能被覆盖，所以不会出现潜在问题。</li>
</ul>
<h3 id="异常的基本概念"><a href="#异常的基本概念" class="headerlink" title="异常的基本概念"></a>异常的基本概念</h3><ul>
<li><p>异常也称为例外，是特殊的运行错误对象。</p>
</li>
<li><p>Java中声明了很多异常类，每个异常类都代表了一种运行错误，类中包含了：</p>
<ul>
<li>该运行错误的信息</li>
<li>处理错误的方法</li>
</ul>
</li>
<li><p>Java异常处理机制的优点</p>
<ul>
<li>将错误处理代码从常规代码中分离出来；</li>
<li>按错误的类型和差别分组；</li>
<li>对无法预测的错误的捕获和处理；</li>
<li>克服了传统方法的错误信息有限的问题；</li>
<li>把错误传播给调用堆栈。</li>
</ul>
</li>
<li><p>错误的分类</p>
<ul>
<li><p>错误</p>
<ul>
<li>致命性的，程序无法处理；</li>
<li>Error类是所有错误类的父类。</li>
</ul>
</li>
<li><p>异常</p>
<ul>
<li>非致命性的，可编制程序捕获和处理；</li>
<li>Exception类是所有异常类的父类。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>异常的分类</p>
<ul>
<li><p>非检查型异常</p>
<ul>
<li>不期望程序捕获的异常，在方法中不需要声明，编译器也不进行检查。</li>
<li>继承自RuntimeException。</li>
<li>不要求捕获和声明的原因：引发这类异常的操作在程序中会经常出现，如果对每一个操作都编写异常代码来处理，将极大增加程序的复杂程度。</li>
</ul>
</li>
<li><p>检查型异常</p>
<ul>
<li>其他类型的异常。</li>
<li>是程序必须要处理的。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a>异常的处理</h3><p>如果一个程序中有多个catch语句，则程序会找到合适的异常类型处理后就不再执行后面的catch语句。</p>
<h3 id="输入输出流"><a href="#输入输出流" class="headerlink" title="输入输出流"></a>输入输出流</h3><ul>
<li><p>面向字符的流：专门用于字符数据。</p>
<ul>
<li><p>源或目标通常是文本文件；</p>
</li>
<li><p>实现内部格式和文本文件中的外部格式之间转换。</p>
<ul>
<li>内部格式：16-bit char 数据类型。</li>
<li>外部格式：UTF、ASCII码和非ASCII码字符。</li>
</ul>
</li>
<li><p>面向字符的抽象流类：Reader 和 Writer。</p>
<ul>
<li>节点流：从数据源读入数据或往目的地写出数据；</li>
<li>处理流：对数据执行某种处理。</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li>面向字节的流：用于一般目的。<ul>
<li>数据源或目标中含有非字符数据，必须用字节流来输入/输出。</li>
<li>通常被用来读写诸如图片、声音之类的二进制数据。</li>
<li>面向字节的抽象流类：InputStream 和 OutputStream。</li>
</ul>
</li>
</ul>
<h3 id="写文本文件"><a href="#写文本文件" class="headerlink" title="写文本文件"></a>写文本文件</h3><ul>
<li>BufferedWriter 类（处理流）</li>
</ul>
<p>FileWriter 和 BufferedWriter 类都用于输出字符流，但 BufferedWriter 多提供了一个 newLine() 方法用于换行。由于不同系统对文字的换行方式不同，newLine() 可以输出在当前计算机上正确的换行符。</p>
<h3 id="读文本文件"><a href="#读文本文件" class="headerlink" title="读文本文件"></a>读文本文件</h3><p>读文件时，如果最后没有关闭输入流不会引起程序错误。</p>
<h3 id="写二进制文件"><a href="#写二进制文件" class="headerlink" title="写二进制文件"></a>写二进制文件</h3><ul>
<li><p>OutputStream 抽象类</p>
<ul>
<li><p>派生类 FileOutputStream</p>
<ul>
<li>用于一般目的输出（非字符输出）；</li>
<li>用于成组字节输出。</li>
</ul>
</li>
<li><p>派生类 DataOutputStream （处理流）</p>
<ul>
<li>具有写各种基本数据类型的方法；</li>
<li>将数据写到另一个输出流；</li>
<li>在所有计算机平台上使用同样的数据格式；</li>
<li>其中的 size 方法，可作为计数器，统计写入的字节数。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="读二进制文件"><a href="#读二进制文件" class="headerlink" title="读二进制文件"></a>读二进制文件</h3><p>如果不确定要读的文件有多少字节，可以利用捕获异常（EOFException）来控制读取结束。</p>
<h3 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h3><ul>
<li>创建、删除文件；</li>
<li>重命名文件；</li>
<li>判断文件的读写权限以及文件是否存在；</li>
<li>设置和查询文件最近修改时间等；</li>
<li>构造文件流时可以使用 File 类对象作为参数。</li>
</ul>
<h3 id="处理压缩文件"><a href="#处理压缩文件" class="headerlink" title="处理压缩文件"></a>处理压缩文件</h3><ul>
<li>压缩流类<ul>
<li>GZIPOutputStream 和 ZipOutputStream 可分别把数据压缩成 GZIP 格式和 Zip 格式。</li>
<li>GZIPInputStream 和 ZipInputStream 可分别 GZIP 格式和 Zip 格式的数据解压成原状。</li>
</ul>
</li>
</ul>
<h3 id="对象序列化"><a href="#对象序列化" class="headerlink" title="对象序列化"></a>对象序列化</h3><ul>
<li><p>实现对象的读写</p>
<ul>
<li>通过 ObjectOutputStream 将对象写入磁盘文件；</li>
<li>通过 ObjectInputStream 将对象读入程序。</li>
</ul>
</li>
<li><p>不保存对象的 transient 和 static 类型的变量。使用 transient 关键字可以阻止对象的某些成员被自动序列化。</p>
</li>
<li><p>要想实现对象序列化，其所属的类必须实现 Serializable 接口。</p>
</li>
<li><p>如果想要将序列化的数据加密，可以使用 Externalizable 接口。</p>
</li>
</ul>
<h3 id="随机文件读写"><a href="#随机文件读写" class="headerlink" title="随机文件读写"></a>随机文件读写</h3><ul>
<li>RandomAccessFile 类<ul>
<li>可以跳转到文件的任意位置读写数据；</li>
<li>可在随机文件中插入数据，而不破坏文件的其他数据；</li>
<li>实现了 DataInput 和DataOutput 接口，可使用普通的读写方法。</li>
<li>在等长记录格式文件的随机读取中有很大优势，但仅限于操作文件，不能访问其他IO设备如网络、内存映像等。</li>
</ul>
</li>
</ul>
<h3 id="JAVA-中的-Int-左右位移操作"><a href="#JAVA-中的-Int-左右位移操作" class="headerlink" title="JAVA 中的 Int 左右位移操作"></a>JAVA 中的 Int 左右位移操作</h3><blockquote>
<p><a href="https://www.cnblogs.com/king0207/p/14604899.html?from=from_parent_mindnote">Java int -1无符号右移</a></p>
</blockquote>
<h3 id="JAVA-的包装类"><a href="#JAVA-的包装类" class="headerlink" title="JAVA 的包装类"></a>JAVA 的包装类</h3><blockquote>
<p><a href="https://www.cnblogs.com/lyq-biu/p/10778109.html">JAVA包装类</a></p>
</blockquote>
<h3 id="基于动态数组的类型（Vector-和-ArrayList）"><a href="#基于动态数组的类型（Vector-和-ArrayList）" class="headerlink" title="基于动态数组的类型（Vector 和 ArrayList）"></a>基于动态数组的类型（Vector 和 ArrayList）</h3><ul>
<li>能够存储相同类型（或具有相同的父类或接口）的对象。</li>
<li>不能存储基本类型（primitive）的数据，要将基本数据类型包裹在包装类中。</li>
<li>其容量能根据空间需要自动扩充。</li>
<li>增加元素方法的效率较高，除非空间已满（此时需要先扩充容量）。</li>
<li>Vector 是集合框架中的遗留类，旧线程安全集合，已不鼓励使用。ArrayList 是非同步的，效率较高。</li>
<li>Java 提供了线程安全集合：Java.util.concurrent 包，任何集合类通过使用同步包装器可以变成线程安全的。<blockquote>
<p><a href="https://blog.csdn.net/u012816626/article/details/111090575">简单理解Collections.synchronizedList</a></p>
</blockquote>
</li>
</ul>
<h3 id="遍历-Collection"><a href="#遍历-Collection" class="headerlink" title="遍历 Collection"></a>遍历 Collection</h3><ul>
<li><p>通过 Enumeration 或 Iterator 接口遍历</p>
<ul>
<li>Enumeration 接口不能用于 ArrayList 对象，而 Iterator 既可以用于 ArrayList 对象也可以用于 Vector 对象。</li>
<li>Iterator 接口<ul>
<li>是对 Enumeration 接口的改进，因此在遍历集合元素时，优先选择 Iterator 接口。</li>
<li>具有如下三个实例方法：<ol>
<li>hasNext()，判断是否还有元素。</li>
<li>next()，取下一个元素。</li>
<li>remove()，从集合中去除最后调用 next() 返回的元素。</li>
</ol>
</li>
</ul>
</li>
</ul>
</li>
<li><p>用增强 for 循环遍历</p>
</li>
<li><p>通过聚集操作遍历</p>
<ul>
<li>聚集操作与 lambda 表达式一起使用。</li>
</ul>
</li>
</ul>
<h3 id="Map-接口及其实现"><a href="#Map-接口及其实现" class="headerlink" title="Map 接口及其实现"></a>Map 接口及其实现</h3><ul>
<li><p>哈希表存储对象的方式</p>
<ul>
<li>对象的位置和对象的关键属性 k 之间有一个特定的对应关系 f ，称之为哈希函数，它是每一个对象与一个唯一的存储位置相对应。在查找时，只需根据关键属性 k ，计算 f(k) 的值，即可知其存储位置。</li>
</ul>
</li>
<li><p>HashMap 默认容量 16，默认装填因子 0.75。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Java Basics</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode刷题记录 —— 动态规划</title>
    <url>/2021/06/21/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-%E2%80%94%E2%80%94-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    <content><![CDATA[<h5 id="动态规划解题套路"><a href="#动态规划解题套路" class="headerlink" title="动态规划解题套路"></a>动态规划解题套路</h5><p>动态规划问题的一般形式就是<strong>求最值</strong>，例如求最长递增子序列、最小编辑距离等。</p>
<p>由于要求最值，肯定需要将所有可能的答案一一穷举出来，因此求解动态规划的核心问题是<strong>穷举</strong>。</p>
<p>动态规划的三要素：</p>
<ul>
<li>重叠子问题：动态规划问题一般都存在重叠子问题，如果暴力穷举，效率很低，因此需要【备忘录】或【DP table】来优化穷举过程；</li>
<li>最优子结构：动态规划问题一定符合最优子结构，即子问题间互相独立，互不干扰；</li>
<li>状态转移方程：只有列出正确的状态转移方程，动态规划问题才能被正确求解。想要写出正确的状态转移方程，需要思考以下几点：<ol>
<li>这个问题的base case（最简单情况）是什么？</li>
<li>这个问题有什么<strong>状态</strong>？</li>
<li>对于每个<strong>状态</strong>，可以做出什么<strong>选择</strong>使得<strong>状态</strong>发生改变？</li>
<li>如何定义<code>dp</code>数组/函数的含义来表现<strong>状态</strong>和<strong>选择</strong>？</li>
</ol>
</li>
</ul>
<p>动态规划解法代码框架基本可以总结为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 初始化base case</span></span><br><span class="line">dp[<span class="number">0</span>][<span class="number">0</span>][...] = base</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进行状态转移</span></span><br><span class="line"><span class="keyword">for</span> 状态<span class="number">1</span> <span class="keyword">in</span> 状态<span class="number">1</span>的所有取值:</span><br><span class="line">	<span class="keyword">for</span> 状态<span class="number">2</span> <span class="keyword">in</span> 状态<span class="number">2</span>的所有取值:</span><br><span class="line">		<span class="keyword">for</span> ...</span><br><span class="line">			dp[状态<span class="number">1</span>][状态<span class="number">2</span>][...] = 求最值(选择<span class="number">1</span>, 选择<span class="number">2</span>, ...)</span><br></pre></td></tr></table></figure>



<hr>
<h5 id="2021-6-22-例题-322-零钱兑换-难度：Medium"><a href="#2021-6-22-例题-322-零钱兑换-难度：Medium" class="headerlink" title="2021.6.22    例题    322    零钱兑换    难度：Medium"></a>2021.6.22    例题    322    零钱兑换    难度：Medium</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    自顶向下备忘录法</span></span><br><span class="line"><span class="comment">    备忘录数组需要定义一个特殊值，方便判断是否计算过</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    状态：目标金额 amount</span></span><br><span class="line"><span class="comment">    选择：coins 数组中列出的所有金币面额</span></span><br><span class="line"><span class="comment">    函数的定义：凑出总金额amount，至少需要 coinChange(coins, amount) 枚硬币</span></span><br><span class="line"><span class="comment">    base case：amount == 0 时，需要 0 枚硬币；amount &lt; 0 时，不可能凑出，返回 -1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] memo;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        memo = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        Arrays.fill(memo, -<span class="number">666</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> dp(coins, amount);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        <span class="keyword">if</span> (amount == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (amount &lt; <span class="number">0</span>) <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 查备忘录，防止重复计算</span></span><br><span class="line">        <span class="keyword">if</span> (memo[amount] != -<span class="number">666</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> memo[amount];</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> res = Integer.MAX_VALUE;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> coin : coins) &#123;</span><br><span class="line">            <span class="comment">// 求解子问题</span></span><br><span class="line">            <span class="keyword">int</span> subProblem = dp(coins, amount - coin);</span><br><span class="line">            <span class="comment">// 子问题无解，则跳过当前循环</span></span><br><span class="line">            <span class="keyword">if</span> (subProblem == -<span class="number">1</span>)   <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">// 在子问题中选择最优解，然后加一</span></span><br><span class="line">            res = Math.min(res, subProblem + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将计算结果存入备忘录</span></span><br><span class="line">        memo[amount] = res == Integer.MAX_VALUE ? -<span class="number">1</span> : res;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> memo[amount];</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    自底向上迭代法</span></span><br><span class="line"><span class="comment">    需要定义dp数组，用来存储计算过的值</span></span><br><span class="line"><span class="comment">    dp数组含义：凑出目标金额 amount，至少需要dp[amount]枚硬币。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    状态：目标金额 amount</span></span><br><span class="line"><span class="comment">    选择：coins 数组中列出的所有金币面额</span></span><br><span class="line"><span class="comment">    base case：amount == 0 时，需要 0 枚硬币；amount &lt; 0 时，跳过循环</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">coinChange</span><span class="params">(<span class="keyword">int</span>[] coins, <span class="keyword">int</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] dp = <span class="keyword">new</span> <span class="keyword">int</span>[amount + <span class="number">1</span>];</span><br><span class="line">        <span class="comment">// 初始化dp数组的值</span></span><br><span class="line">        Arrays.fill(dp, amount + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// base case</span></span><br><span class="line">        dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 外层for循环遍历所有状态的所有取值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dp.length; i++) &#123;</span><br><span class="line">            <span class="comment">// 内层for循环求所有选择的最小值</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> coin : coins) &#123;</span><br><span class="line">                <span class="comment">// base case，跳过</span></span><br><span class="line">                <span class="keyword">if</span>(i - coin &lt; <span class="number">0</span>)    <span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 取最小值</span></span><br><span class="line">                dp[i] = Math.min(dp[i], dp[i - coin] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 如果dp[amount]维持初始值，代表凑不出，返回 -1</span></span><br><span class="line">        <span class="keyword">return</span> dp[amount] == amount + <span class="number">1</span> ? -<span class="number">1</span> : dp[amount];</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>



<p>时间复杂度：O(kn)，k代表金币面额的种类，即选择的种类；n代表总金额的值，即所有状态的数量；</p>
<p>空间复杂度：O(n)，memo数组和dp数组都分别占用O(n)空间，递归法中递归调用栈最多也占用O(n)空间。</p>
<hr>
]]></content>
      <categories>
        <category>Dynamic Programming</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript基础</title>
    <url>/2021/06/23/JavaScript%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="Development-Environment"><a href="#Development-Environment" class="headerlink" title="Development Environment"></a>Development Environment</h3><p>Visual Studio Code</p>
<p>​    Extension : Live Server</p>
<h3 id="JavaScript-in-Browsers"><a href="#JavaScript-in-Browsers" class="headerlink" title="JavaScript in Browsers"></a>JavaScript in Browsers</h3><p>HTML中有两个位置可以添加JavaScript脚本：<code>&lt;head&gt;</code>标签内和<code>&lt;body&gt;</code>标签内。</p>
<p>一般建议在<code>&lt;body&gt;</code>标签内的最末尾添加，因为代码是自上而下运行，如果添加在靠前的位置，浏览器将忙于渲染代码而不能很好地渲染页面内容；再者，<code>&lt;script&gt;</code>中的代码需要操作页面中的元素，写在最后可以便利地操作所有元素。</p>
<h3 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h3><p>在ES6之前，一般使用<code>var</code>来声明变量；而在ES6之后，最好使用<code>let</code>来声明变量。</p>
<h3 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h3><p>使用<code>const</code>关键字来定义常量，如果试图修改一个常量，控制台将报错。</p>
<h3 id="Value-Types"><a href="#Value-Types" class="headerlink" title="Value Types"></a>Value Types</h3><ul>
<li>String</li>
<li>Number</li>
<li>Boolean</li>
<li>undefined</li>
<li>null</li>
<li>Symbol（ES6）</li>
</ul>
<h3 id="Dynamic-Typing"><a href="#Dynamic-Typing" class="headerlink" title="Dynamic Typing"></a>Dynamic Typing</h3><p>在静态语言中，变量的类型一旦被定义就不能改变了；而在JavaScript这种动态语言中，变量的类型可以在运行时改变。</p>
<h3 id="Reference-Types"><a href="#Reference-Types" class="headerlink" title="Reference Types"></a>Reference Types</h3><ul>
<li><h4 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h4><p>两种访问对象属性的方法：</p>
<ol>
<li>使用点操作符：<code>person.name = &quot;张三&quot;</code>；</li>
<li>使用中括号操作符：<code>person[&quot;name&quot;] = &quot;张三&quot;</code>；</li>
</ol>
<p>一般情况下使用点操作符更便捷；但是在直到运行时都不知道要访问哪个属性的情况下，即取决于用户的选择，这时就可以使用中括号操作符，将选择的结果传入并访问。</p>
<h5 id="Factory-Functions"><a href="#Factory-Functions" class="headerlink" title="Factory Functions"></a>Factory Functions</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        radius,</span><br><span class="line">        <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;draw&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCircle = createCircle(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h5 id="Constructor-Functions"><a href="#Constructor-Functions" class="headerlink" title="Constructor Functions"></a>Constructor Functions</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    <span class="built_in">this</span>.draw = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;draw&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myCircle = <span class="keyword">new</span> Circle(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li><h4 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h4><p>数组的长度，以及数组里每个元素的类型是动态的、可变的。</p>
<p>使用索引访问数组。</p>
<p><strong>注意</strong>：声明数组为<code>constant</code>之后，只是意味着不能再将数组声明为新的数组，但是修改数组的内容是没问题的。这是因为数组是引用类型，声明为常量相当于将它所指向的地址声明为了常量，因此不可以修改地址，而可以修改所指向的值。</p>
<h5 id="Adding-Elements"><a href="#Adding-Elements" class="headerlink" title="Adding Elements"></a>Adding Elements</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// End; output: [3, 4, 5, 6]</span></span><br><span class="line">numbers.push(<span class="number">5</span>, <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Beginning; output: [1, 2, 3, 4, 5, 6]</span></span><br><span class="line">numbers.unshift(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// Middle; output: [1, 2, &quot;a&quot;, &quot;b&quot;, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">// splice() 可以向指定位置添加或删除元素</span></span><br><span class="line">numbers.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="Finding-Elements"><a href="#Finding-Elements" class="headerlink" title="Finding Elements"></a>Finding Elements</h5><p>当数组中的元素全部为值类型时，可以使用 <code>numbers.indexOf(searchElement, fromIndex?)</code> 来查找某个元素的索引，如果没有找到，就会返回 <code>-1</code> ；</p>
<p>还可以使用 <code>numbers.lastIndexOf(searchElement, fromIndex?)</code> 来查找最后一个匹配的元素索引；</p>
<p>如果想要判断数组中是否存在某元素，可以使用 <code>numbers.includes(searchElement, fromIndex?)</code> ，如果给定值存在则会返回 <code>true</code> 。</p>
<p>当数组中的元素是引用类型时，<code>includes()</code> 方法是没有用的。要判断某个元素是否满足条件（或是否存在），需要使用 <code>find(predicate)</code> 方法。</p>
<p><strong>注意</strong>：<code>find(predicate)</code> 方法需要传入的是一个谓词函数（predicate），这个函数需要一个形参，实际运行时就是数组的每个元素，在函数体中需要返回一个布尔值。<code>find()</code> 方法最终返回的是第一个匹配的元素，如果遍历了数组没有找到匹配值，结果就是 <code>undefined</code> 。</p>
<p>还有一个类似的方法 <code>findIndex(predicate)</code> ，但它返回的是索引而不是元素本身。</p>
<h5 id="Arrow-Functions"><a href="#Arrow-Functions" class="headerlink" title="Arrow Functions"></a>Arrow Functions</h5><p>当我们需要输入一个函数作为另一个函数的参数时，就可以使用箭头函数语法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 没有参数</span></span><br><span class="line">() =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(param1, param2) =&gt; &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 如果函数体只有一行返回语句，可以去掉 return 关键字</span></span><br><span class="line">param1 =&gt; expression</span><br></pre></td></tr></table></figure>



<h5 id="Removing-Elements"><a href="#Removing-Elements" class="headerlink" title="Removing Elements"></a>Removing Elements</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除并返回最后一个元素</span></span><br><span class="line"><span class="keyword">const</span> last = numbers.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 删除并返回第一个元素</span></span><br><span class="line"><span class="keyword">const</span> first = numbers.shift();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 向指定位置删除元素并返回被删除的元素数组</span></span><br><span class="line">numbers.splice(<span class="number">2</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h5 id="Emptying-an-Array"><a href="#Emptying-an-Array" class="headerlink" title="Emptying an Array"></a>Emptying an Array</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 1 在只有一个引用的前提下很常用</span></span><br><span class="line">numbers = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 2 Recommended</span></span><br><span class="line">numbers.length = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 3</span></span><br><span class="line">numbers.splice(<span class="number">0</span>, numbers.length);</span><br></pre></td></tr></table></figure>



<h5 id="Combining-Arrays"><a href="#Combining-Arrays" class="headerlink" title="Combining Arrays"></a>Combining Arrays</h5><p>使用以下两个方法时，如果数组中的元素是值类型，就会复制它们的值到新的数组；如果是引用类型，只会复制它们的地址。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> first = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> second = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 组合数组</span></span><br><span class="line"><span class="keyword">const</span> combined = first.concat(second);</span><br><span class="line"><span class="comment">// 切割数组：从索引 2 开始，索引 4 结束，左闭右开；output：[3, 4]</span></span><br><span class="line"><span class="keyword">const</span> slice = combined.slice(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// 切割数组：从索引 2 开始的所有元素；output：[3, 4, 5, 6]</span></span><br><span class="line">slice = combined.slice(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 复制数组</span></span><br><span class="line"><span class="keyword">const</span> copy = combined.slice();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>在ES6中，可以使用拆分操作符来组合数组以及复制数组：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> combined = [...first, ...second];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> copy = [...combined];</span><br></pre></td></tr></table></figure>



<h5 id="Iterating-an-Array"><a href="#Iterating-an-Array" class="headerlink" title="Iterating an Array"></a>Iterating an Array</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// for...of</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> number <span class="keyword">of</span> numbers) </span><br><span class="line">    <span class="built_in">console</span>.log(number);</span><br><span class="line"></span><br><span class="line"><span class="comment">// foreach</span></span><br><span class="line">numbers.forEach(<span class="function">(<span class="params">number, index</span>) =&gt;</span> <span class="built_in">console</span>.log(index, number));</span><br></pre></td></tr></table></figure>



<h5 id="Joining-Arrays"><a href="#Joining-Arrays" class="headerlink" title="Joining Arrays"></a>Joining Arrays</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将数组中的元素连接成一个字符串，连接符可空；output：&quot;1,2,3,4&quot;</span></span><br><span class="line"><span class="keyword">const</span> joined = numbers.join(<span class="string">&quot;,&quot;</span>);</span><br><span class="line"><span class="comment">// 去掉字符串中的连接符并输出为数组；</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;This is my first message&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> parts = message.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line"><span class="comment">// 将数组用&quot;-&quot;连接成字符串</span></span><br><span class="line"><span class="keyword">const</span> combined = parts.join(<span class="string">&quot;-&quot;</span>);</span><br></pre></td></tr></table></figure>



<h5 id="Sorting-Arrays"><a href="#Sorting-Arrays" class="headerlink" title="Sorting Arrays"></a>Sorting Arrays</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>];</span><br><span class="line"><span class="comment">// 将数组中的元素转换为字符串，然后再对字符串顺序排序</span></span><br><span class="line">numbers.sort();</span><br><span class="line"><span class="comment">//倒序</span></span><br><span class="line">numbers.reverse();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> courses = [</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&quot;Node.js&quot;</span> &#125;,</span><br><span class="line">    &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&quot;javaScript&quot;</span>&#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 按name顺序排序</span></span><br><span class="line">courses.sort(<span class="function">(<span class="params">item1, item2</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 将name都转换为大写或小写</span></span><br><span class="line">    <span class="keyword">const</span> name1 = item1.name.toUpperCase();</span><br><span class="line">    <span class="keyword">const</span> name2 = item2.name.toUpperCase();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(name1 &lt; name2)	<span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(name1 &gt; name2)	<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h5 id="Testing-the-Elements-of-an-Array"><a href="#Testing-the-Elements-of-an-Array" class="headerlink" title="Testing the Elements of an Array"></a>Testing the Elements of an Array</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 检查每一个元素是否都符合条件</span></span><br><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="comment">// allPositive = false</span></span><br><span class="line"><span class="keyword">const</span> allPositive = numbers.every(<span class="function"><span class="params">value</span> =&gt;</span> value &gt;= <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 检查数组中是否至少有一个元素符合条件</span></span><br><span class="line"><span class="comment">// atLeastOnePositive = true</span></span><br><span class="line"><span class="keyword">const</span> atLeastOnePositive = numbers.some(<span class="function"><span class="params">value</span> =&gt;</span> value &gt;= <span class="number">0</span>);</span><br></pre></td></tr></table></figure>



<h5 id="Filtering-an-Array"><a href="#Filtering-an-Array" class="headerlink" title="Filtering an Array"></a>Filtering an Array</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将所有满足条件的元素筛选出来</span></span><br><span class="line"><span class="comment">// filtered = [1, 2, 3]</span></span><br><span class="line"><span class="keyword">const</span> filtered = numbers.filter(<span class="function"><span class="params">val</span> =&gt;</span> val &gt;= <span class="number">0</span>);</span><br></pre></td></tr></table></figure>



<h5 id="Mapping-an-Array"><a href="#Mapping-an-Array" class="headerlink" title="Mapping an Array"></a>Mapping an Array</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将元素映射为html标签（字符串）</span></span><br><span class="line"><span class="comment">// items = [&quot;&lt;li&gt;1&lt;/li&gt;&quot;, &quot;&lt;li&gt;-1&lt;/li&gt;&quot;, ...]</span></span><br><span class="line"><span class="keyword">const</span> items = numbers.map(<span class="function"><span class="params">val</span> =&gt;</span> <span class="string">`&lt;li&gt;<span class="subst">$&#123;val&#125;</span>&lt;/li&gt;`</span>);</span><br><span class="line"><span class="comment">// 转换为字符串</span></span><br><span class="line"><span class="keyword">const</span> html = <span class="string">`&lt;ul&gt;<span class="subst">$&#123;items.join(<span class="string">&quot;&quot;</span>)&#125;</span>&lt;/ul&gt;`</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将元素映射为对象；如果返回的是对象，需要将它包在小括号里</span></span><br><span class="line">items = numbers.map(<span class="function"><span class="params">val</span> =&gt;</span> (&#123; <span class="attr">value</span>: val &#125;));</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h5 id="Reducing-an-Array"><a href="#Reducing-an-Array" class="headerlink" title="Reducing an Array"></a>Reducing an Array</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">1</span>, -<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对数组元素求和</span></span><br><span class="line"><span class="keyword">const</span> sum = numbers.reduce(</span><br><span class="line">    (accumulator, currentVal) =&gt; accumulator + currentVal</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li><h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><p>定义函数时的参数是形式参数，调用函数时传入的参数是实际参数。</p>
<p>函数是一组语句，用来执行一个任务或计算一些值。</p>
<h5 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h5><p>变量提升就是将函数的声明提前到代码顶端的过程，这是 JavaScript 在执行代码时自动完成的。因为有这个过程，才可以将函数的调用语句放到函数的声明之前。</p>
<h5 id="The-Rest-Operator"><a href="#The-Rest-Operator" class="headerlink" title="The Rest Operator"></a>The Rest Operator</h5><p>如果想在函数中使用多个参数，可以使用剩余操作符（…），和拆分操作符写法一样。</p>
<p>剩余操作符会将输入给函数的所有实参转到一个数组中。</p>
<p><strong>注意</strong>：剩余参数必须是参数列表中的最后一项，不可以在剩余参数后添加其他参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 计算购物车中的商品总额</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">discount, ...prices</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> total = prices.reduce(<span class="function">(<span class="params">acc, cur</span>) =&gt;</span> acc + cur);</span><br><span class="line">    <span class="keyword">return</span> total * (<span class="number">1</span> - discount);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Default-Parameters"><a href="#Default-Parameters" class="headerlink" title="Default Parameters"></a>Default Parameters</h5><p>当给某个函数的参数设置的默认值时，确保它是参数列表中的最后一个，或者它后面的参数也都设置了默认值。</p>
<h5 id="Getter-and-Setter"><a href="#Getter-and-Setter" class="headerlink" title="Getter and Setter"></a>Getter and Setter</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    firstName: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">    lastName: <span class="string">&quot;Morrison&quot;</span>,</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title">fullName</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> parts = newName.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.firstName = parts[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.lastName = parts[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接修改对象的属性</span></span><br><span class="line">person.fullName = <span class="string">&quot;Gabriel Reyes&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 用访问属性的方式直接访问全名</span></span><br><span class="line"><span class="built_in">console</span>.log(person.fullName);</span><br></pre></td></tr></table></figure>



<h5 id="Try-and-Catch"><a href="#Try-and-Catch" class="headerlink" title="Try and Catch"></a>Try and Catch</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">    firstName: <span class="string">&quot;Jack&quot;</span>,</span><br><span class="line">    lastName: <span class="string">&quot;Morrison&quot;</span>,</span><br><span class="line">    <span class="comment">// getter</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title">fullName</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;<span class="built_in">this</span>.firstName&#125;</span> <span class="subst">$&#123;<span class="built_in">this</span>.lastName&#125;</span>`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// setter</span></span><br><span class="line">    <span class="keyword">set</span> <span class="title">fullName</span>(<span class="params">newName</span>) &#123;</span><br><span class="line">        <span class="comment">// 如果输入的全名不满足要求，则抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> newName !== <span class="string">&quot;string&quot;</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;The new name is not a string.&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">const</span> parts = newName.split(<span class="string">&quot; &quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (parts.length !== <span class="number">2</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Please Enter a first name and last name.&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">this</span>.firstName = parts[<span class="number">0</span>];</span><br><span class="line">        <span class="built_in">this</span>.lastName = parts[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将抛出异常</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    person.fullName = <span class="literal">null</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">    alert(e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="Var"><a href="#Var" class="headerlink" title="Var"></a>Var</h5><p><code>var</code> 关键字的问题在于，用 <code>var</code> 声明了变量之后，变量的作用域不再是它被定义的代码块中，而变为它所属的函数的作用域。</p>
<p>因此 ES6 之后更推荐使用 <code>let</code> 和 <code>const</code> 来声明作用域为块的变量和常量。</p>
<p>另外，在定义全局变量时，如果使用<code>var</code> 关键字，这个变量将被添加到 <code>window</code> 对象中，但由于 <code>window</code> 对象是核心对象，它只有一个内存实例。如果要使用一个第三方库，这个库中也有一个变量和该变量名称相同，那个变量就会覆盖定义好的全局变量。所以应该避免添加成员到 <code>window</code> 对象。</p>
<h5 id="This"><a href="#This" class="headerlink" title="This"></a>This</h5><p><code>this</code> 关键字引用了执行当前函数的对象实例。</p>
<p>如果函数是对象的一部分，就称这个函数为方法。如果在方法中使用 <code>this</code> 关键字，<code>this</code> 就指这个对象本身。</p>
<p>如果函数是普通函数，即不是一个对象的一部分，<code>this</code> 就指全局对象，也就是浏览器中的 <code>window</code> 对象，或者 Node 中的 <code>global</code> 对象。</p>
<p>但是如果使用 <code>new</code> 操作符来调用一个构造函数的话，<code>this</code> 将会绑定到一个新的空对象上。</p>
<p>一种特殊情况：当在一个对象中使用回调函数时，<code>this</code> 将代表全局对象，因为回调函数是一个普通函数，不是这个对象中的方法。</p>
<h6 id="Changing-“this”"><a href="#Changing-“this”" class="headerlink" title="Changing “this”"></a>Changing “this”</h6><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Solution 1, not recommended</span></span><br><span class="line"><span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 2</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">play</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 这里输出的是 window 对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 指向一个新对象，并传入参数</span></span><br><span class="line">play.call(&#123; <span class="attr">object</span>: <span class="number">1</span> &#125;, <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="comment">// 同上，不过传入参数的格式不同</span></span><br><span class="line">play.apply(&#123; <span class="attr">object</span>: <span class="number">2</span> &#125;, [<span class="number">1</span>, <span class="number">2</span>]);</span><br><span class="line"><span class="comment">// 这个函数不会调用 play() 函数，它会返回一个新函数，将新函数的 this 绑定到输入的对象上</span></span><br><span class="line">play.bind(&#123; <span class="attr">object</span>: <span class="number">3</span> &#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Solution 3, 箭头函数</span></span><br><span class="line"><span class="keyword">const</span> video = &#123;</span><br><span class="line">    title: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">    tags: [<span class="string">&quot;a&quot;</span>, <span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>],</span><br><span class="line">    <span class="function"><span class="title">showTags</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.tags.forEach(<span class="function"><span class="params">tag</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// 这时的 this 就是指向当前对象的了</span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.title, tag);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ES6 之后就有了箭头函数，箭头函数的好处之一就是它继承了 <code>this</code> 的值。因此为了解决使用回调函数的问题，应该使用箭头函数。</p>
</li>
</ul>
<p>​    </p>
<h3 id="Equality-Operators"><a href="#Equality-Operators" class="headerlink" title="Equality Operators"></a>Equality Operators</h3><p><code>===</code> ：严格相等比较，要确保符号两边的值类型和值都完全一样；</p>
<p><code>==</code>：抽象相等比较，不关心符号两边是否同类型，如果类型不一样，就会将符号右边的转为左边的类型，只会检测值是否相等。</p>
<h3 id="For…in-amp-For…of"><a href="#For…in-amp-For…of" class="headerlink" title="For…in &amp; For…of"></a>For…in &amp; For…of</h3><p>常用for…in循环来遍历一个对象中的属性，被遍历的元素是对象属性中的键，需要访问对应的值只需要使用中括号操作符；</p>
<p>用for…of循环来遍历一个数组中的元素，被遍历的元素就是元素本身而非索引。</p>
<p>注意：对象（Object）是不可枚举的类型，因此无法使用for…of循环来遍历。如果非要使用for…of，可以使用<code>Object.keys(Object)</code>方法来返回对象的键数组，也可以使用<code>Object.entries(Object)</code>来返回键值对数组，再使用for…of进行遍历。</p>
<h3 id="Cloning-an-Object"><a href="#Cloning-an-Object" class="headerlink" title="Cloning an Object"></a>Cloning an Object</h3><ul>
<li><p>方法一</p>
<p>使用for…in循环遍历需要复制的对象，一边遍历一边将属性赋值给新的对象。</p>
</li>
<li><p>方法二</p>
<p>使用<code>Object.assign(&#123;&#125;, sourceObject)</code>方法将一个或多个源对象的成员复制到目标对象中。</p>
</li>
<li><p>方法三</p>
<p>使用拆分操作符将对象拆解<code>&#123; ...sourceObject &#125;</code>，即读取所有的对象成员，然后将它们全部复制到新的对象中。</p>
</li>
</ul>
<h3 id="Template-Literals"><a href="#Template-Literals" class="headerlink" title="Template Literals"></a>Template Literals</h3><p>如果需要输出一段话，包含换行符和一些特殊符号，就需要用到转义符，会使代码变得非常杂乱。可以使用ES6的模板语法：两个反单引号。这时一大段字符串就可以像文本一样自由书写了，完全不需要添加任何加号或转义符。</p>
<p>另一个模板语法的好处是可以使用占位符，从而避免不美观的转义符以及加号连接字符串。在模板语法中用美元符号和大括号来指明一个占位符：<code>$&#123; expression &#125;</code>；</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Java Data Structure</title>
    <url>/2021/07/26/Java-Data-Structure/</url>
    <content><![CDATA[<h3 id="Sparse-Array-稀疏数组"><a href="#Sparse-Array-稀疏数组" class="headerlink" title="Sparse Array    稀疏数组"></a>Sparse Array    稀疏数组</h3><h4 id="稀疏数组的应用场景"><a href="#稀疏数组的应用场景" class="headerlink" title="稀疏数组的应用场景"></a>稀疏数组的应用场景</h4><p>当使用二维数组记录一个棋盘时，假如当前棋盘上的棋子很少，会导致很多值是默认值 0 ，因此记录了很多没有意义的数据。此时就可以使用稀疏数组来对二维数组进行压缩。</p>
<p>稀疏数组的处理方法是：</p>
<ol>
<li>记录数组有几行几列，有多少个不同的值；</li>
<li>把具有不同值的元素的行列及值记录在一个小规模的数组中，从而缩小程序的规模。</li>
</ol>
<h4 id="二维数组转稀疏数组的思路"><a href="#二维数组转稀疏数组的思路" class="headerlink" title="二维数组转稀疏数组的思路"></a>二维数组转稀疏数组的思路</h4><ol>
<li>遍历原始的二维数组，得到有效数据的个数 <code>sum</code> ；</li>
<li>根据 sum 就可以创建稀疏数组 <code>sparseArr int[sum + 1][3]</code> ；</li>
<li>将二维数组的有效数据存入稀疏数组。</li>
</ol>
<h4 id="稀疏数组转二维数组"><a href="#稀疏数组转二维数组" class="headerlink" title="稀疏数组转二维数组"></a>稀疏数组转二维数组</h4><ol>
<li>先读取稀疏数组第一行获取二维数组的行数和列数以及数据个数，创建原始的二维数组；</li>
<li>再读取稀疏数组的后几行数据，并赋给原始的二维数组即可。</li>
</ol>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.star.sparsearray;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SparseArray</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[][] chessArray = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        chessArray[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        chessArray[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;原始二维数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//转为稀疏数组，先得到非0数据的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : chessArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">                <span class="keyword">if</span> (data != <span class="number">0</span>)</span><br><span class="line">                    sum++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建稀疏数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] sparseArray = <span class="keyword">new</span> <span class="keyword">int</span>[sum + <span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">0</span>] = chessArray[<span class="number">0</span>].length;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">1</span>] = chessArray.length;</span><br><span class="line">        sparseArray[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chessArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; chessArray[<span class="number">0</span>].length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (chessArray[i][j] != <span class="number">0</span>) &#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    sparseArray[count][<span class="number">0</span>] = i;</span><br><span class="line">                    sparseArray[count][<span class="number">1</span>] = j;</span><br><span class="line">                    sparseArray[count][<span class="number">2</span>] = chessArray[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;转换得到的稀疏数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : sparseArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将稀疏数组复原成二维数组</span></span><br><span class="line">        <span class="keyword">int</span> rows = sparseArray[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">int</span> cols = sparseArray[<span class="number">0</span>][<span class="number">1</span>];</span><br><span class="line">        <span class="comment">//int noneZero = sparseArray[0][2];</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span>[][] newChessArray = <span class="keyword">new</span> <span class="keyword">int</span>[rows][cols];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sparseArray.length; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> row = sparseArray[i][<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">int</span> col = sparseArray[i][<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">int</span> data = sparseArray[i][<span class="number">2</span>];</span><br><span class="line">            newChessArray[row][col] = data;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.println(<span class="string">&quot;复原后的二维数组&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>[] row : newChessArray) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> data : row) &#123;</span><br><span class="line">                System.out.printf(<span class="string">&quot;%d\t&quot;</span>, data);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Queue-队列"><a href="#Queue-队列" class="headerlink" title="Queue    队列"></a>Queue    队列</h3><p>队列是一个有序列表，遵循先入先出的原则，可以用数组或链表来实现。</p>
<h4 id="数组模拟队列"><a href="#数组模拟队列" class="headerlink" title="数组模拟队列"></a>数组模拟队列</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.star.queue;</span><br><span class="line"></span><br><span class="line"><span class="comment">//用数组实现队列</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">//指向头的指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">//指向队尾的指针</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize;</span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[maxSize];</span><br><span class="line">        front = -<span class="number">1</span>;     <span class="comment">//队列为空时，指向队列头的前一个位置</span></span><br><span class="line">        rear = -<span class="number">1</span>;      <span class="comment">//指向队尾的数据的位置</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先让rear后移</span></span><br><span class="line">        rear++;</span><br><span class="line">        array[rear] = n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先将front后移，返回当前指向的数据</span></span><br><span class="line">        front++;</span><br><span class="line">        <span class="keyword">return</span> array[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front + <span class="number">1</span>; i &lt;= rear; i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t&quot;</span>, array[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示头部数据，不取出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[front + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> rear == maxSize - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这种方法的问题是数组只能使用一次，因为当两个指针都移动到容量尾端时，没有办法再向数组中添加数据。因此，需要对数组进行优化，将队列用取模的方式优化成环形队列。</p>
<h4 id="数组模拟环形队列"><a href="#数组模拟环形队列" class="headerlink" title="数组模拟环形队列"></a>数组模拟环形队列</h4><h5 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h5><ol>
<li>对 <code>front</code> 变量的含义做调整：由指向第一个元素的前一个位置变为指向第一个元素的位置，初始值为 0 ；</li>
<li>对 <code>rear</code> 变量的含义做调整：由指向最后一个元素的位置变为指向最后一个元素的后一个位置，初始值为 0 ，因为希望空出一个空间作为约定；</li>
<li>当队列满时，条件是 <code>(rear + 1) % maxSize == front</code> ，此时的 <code>maxSize</code> 为实例化时的实参 + 1；</li>
<li>当队列空时，条件是 <code>rear == front</code> ；</li>
<li>队列中当前有效的数据的个数是 <code>(rear + maxSize - front) % maxSize</code> 。</li>
</ol>
<h5 id="代码优化"><a href="#代码优化" class="headerlink" title="代码优化"></a>代码优化</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.star.queue;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CircularArrayQueue</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxSize;</span><br><span class="line">    <span class="comment">//指向第一个元素的位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> front;</span><br><span class="line">    <span class="comment">//指向最后一个元素的后一个位置</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rear;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] array;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建队列的构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">CircularArrayQueue</span><span class="params">(<span class="keyword">int</span> maxSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.maxSize = maxSize + <span class="number">1</span>;     <span class="comment">//预留一个位置，如果不预留就不需要加 1</span></span><br><span class="line">        array = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="keyword">this</span>.maxSize];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isFull())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列已满&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先将数据入队</span></span><br><span class="line">        array[rear] = n;</span><br><span class="line">        <span class="comment">//将 rear 后移</span></span><br><span class="line">        rear = (rear + <span class="number">1</span>) % maxSize;</span><br><span class="line">        printQueue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//先将数据保存到临时变量，改变了 front 的值后再弹出</span></span><br><span class="line">        <span class="keyword">var</span> temp = array[front];</span><br><span class="line">        <span class="comment">//将 front 后移</span></span><br><span class="line">        front = (front + <span class="number">1</span>) % maxSize;</span><br><span class="line">        <span class="keyword">return</span> temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示队列的所有数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = front; i &lt; front + size(); i++) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t&quot;</span>, array[i % maxSize]);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//求当前队列中有效数据的个数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + maxSize - front) % maxSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示头部数据，不取出</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">peek</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;队列为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array[front];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isFull</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (rear + <span class="number">1</span>) % maxSize == front;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> front == rear;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>数组如果不预留最后一位的话，当数据出队 <code>front</code> 指针向前移动，并继续将数据入队时，会出现队列已满的错误，因为只有当 <code>(rear + 1) % maxSize != front</code> 时才表示队列还有位置。</p>
<h3 id="Linked-List-链表"><a href="#Linked-List-链表" class="headerlink" title="Linked List    链表"></a>Linked List    链表</h3><p>链表的每个节点包含 <code>data</code> 域，用来存放数据，还有一个 <code>next</code> 域，指向下一个节点的地址。链表的各个节点在内存中不一定是连续存储的。</p>
<p>链表分为带头节点的链表和不带头节点的链表，根据实际的需求来确定。</p>
<h4 id="单向链表的应用实例"><a href="#单向链表的应用实例" class="headerlink" title="单向链表的应用实例"></a>单向链表的应用实例</h4><p>使用带头节点的单链表来完成水浒英雄排行榜管理。</p>
<ol>
<li>完成对人物的增删改查操作；</li>
<li>第一种方法：在添加人物时，直接添加到链表末尾，不考虑顺序；</li>
<li>第二种方法：在添加人物时，根据排名插入到指定位置（如果排名重复，则添加失败）；</li>
</ol>
<h5 id="方法一思路分析"><a href="#方法一思路分析" class="headerlink" title="方法一思路分析"></a>方法一思路分析</h5><ol>
<li>先创建一个 <code>head</code> 节点，不存放数据，只是表示链表的头部， <code>next</code> 指针指向第一个节点的位置；</li>
<li>每添加一个节点，就直接加到链表的末尾；</li>
<li>遍历时，通过一个辅助指针帮助遍历整个链表。</li>
</ol>
<h5 id="方法一代码实现"><a href="#方法一代码实现" class="headerlink" title="方法一代码实现"></a>方法一代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.star.linkedlist;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleLinkedList</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> list = <span class="keyword">new</span> LinkedList();</span><br><span class="line">        list.add(<span class="keyword">new</span> HeroNode(<span class="number">1</span>, <span class="string">&quot;宋江&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> HeroNode(<span class="number">4</span>, <span class="string">&quot;林冲&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> HeroNode(<span class="number">2</span>, <span class="string">&quot;卢俊义&quot;</span>));</span><br><span class="line">        list.add(<span class="keyword">new</span> HeroNode(<span class="number">3</span>, <span class="string">&quot;吴用&quot;</span>));</span><br><span class="line"></span><br><span class="line">        list.printList();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HeroNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> rank;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> HeroNode next;   <span class="comment">//下一节点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HeroNode</span><span class="params">(<span class="keyword">int</span> rank, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rank = rank;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写 ToString 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;rank=&quot;</span> + rank +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化一个头节点</span></span><br><span class="line">    <span class="keyword">private</span> HeroNode head = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点到单向链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为 head 节点不能动，因此需要辅助指针</span></span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="comment">//遍历链表，找到最后一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出循环表示当前节点是最后一个节点</span></span><br><span class="line">        temp.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        HeroNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="方法二思路分析"><a href="#方法二思路分析" class="headerlink" title="方法二思路分析"></a>方法二思路分析</h5><ol>
<li>根据排名首先找到需要新添加的节点对应的位置，通过辅助指针遍历链表来确定；</li>
<li>新的节点的 <code>next</code> 域就应该等于辅助指针的 <code>next</code> 域；</li>
<li>将辅助指针的 <code>next</code> 域指向新的节点的位置。</li>
</ol>
<h5 id="方法二代码实现"><a href="#方法二代码实现" class="headerlink" title="方法二代码实现"></a>方法二代码实现</h5><p>只需要添加一个 <code>addByRank()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByRank</span><span class="params">(HeroNode node)</span> </span>&#123;</span><br><span class="line">    HeroNode temp = head;</span><br><span class="line">    <span class="comment">//需要新添加的节点排名是否已存在</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//如果下一个节点的排名大于新的节点的排名，说明当前位置就是插入点</span></span><br><span class="line">        <span class="keyword">if</span> (temp.next.rank &gt; node.rank) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp.next.rank == node.rank) &#123;</span><br><span class="line">            <span class="comment">//下一节点的排名与新的节点排名相等，说明已存在</span></span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//指针后移</span></span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历结束</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;记录已存在&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将节点插入链表</span></span><br><span class="line">    node.next = temp.next;</span><br><span class="line">    temp.next = node;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="节点的修改"><a href="#节点的修改" class="headerlink" title="节点的修改"></a>节点的修改</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//根据新节点的排名来修改对应节点</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(HeroNode newNode)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//判断链表是否为空</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HeroNode temp = head;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;   <span class="comment">//是否找到节点</span></span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (temp.rank == newNode.rank) &#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果找到</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        temp.name = newNode.name;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有找到该节点&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="节点的删除"><a href="#节点的删除" class="headerlink" title="节点的删除"></a>节点的删除</h5><ol>
<li>先找到待删除节点的前一个节点的位置 <code>prev</code> ；</li>
<li>使 <code>prev.next = prev.next.next</code> ；</li>
<li>被删除的节点没有被引用，将被垃圾回收机制回收。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按排名删除</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">    HeroNode prev = head;</span><br><span class="line">    <span class="comment">//是否找到待删除节点</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">while</span> (prev.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prev.next.rank == rank) &#123;</span><br><span class="line">            flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        prev = prev.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//遍历结束，如果找到该节点</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        prev.next = prev.next.next;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">&quot;没有找到待删除节点&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="单链表常见面试题"><a href="#单链表常见面试题" class="headerlink" title="单链表常见面试题"></a>单链表常见面试题</h4><h5 id="例1-求单链表种有效节点的个数"><a href="#例1-求单链表种有效节点的个数" class="headerlink" title="例1  求单链表种有效节点的个数"></a>例1  求单链表种有效节点的个数</h5><p>如果带头节点的链表，不统计头节点。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取某个链表的有效节点个数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 链表的头节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 有效的节点个数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">(HeroNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    HeroNode temp = head.next;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">        length++;</span><br><span class="line">        temp = temp.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="例2-查找单链表中的倒数第-k-个节点【新浪面试题】"><a href="#例2-查找单链表中的倒数第-k-个节点【新浪面试题】" class="headerlink" title="例2  查找单链表中的倒数第 k 个节点【新浪面试题】"></a>例2  查找单链表中的倒数第 k 个节点【新浪面试题】</h5><p>思路：</p>
<ol>
<li>编写一个方法，接收 <code>head</code> 节点和 <code>index</code> 节点， <code>index</code> 即表示倒数第 k 个节点；</li>
<li>先得到链表中的节点个数；</li>
<li>得到节点个数 <code>length</code> 后，再遍历到第 <code>length - index</code> 个即为倒数第 k 个节点。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查找单链表中的倒数第 k 个节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 链表的头节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> index 倒数第 index 个节点的位置</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 如果节点存在，返回倒数第 index 个节点；否则返回 null</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> HeroNode <span class="title">findNode</span><span class="params">(HeroNode head, <span class="keyword">int</span> index)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//得到链表节点个数</span></span><br><span class="line">    <span class="keyword">int</span> length = getLength(head);</span><br><span class="line">    <span class="comment">//先对 index 进行校验</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt;= <span class="number">0</span> || index &gt; length) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HeroNode cur = head.next;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - index; i++) &#123;</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="例3-单链表的反转【腾讯面试题】"><a href="#例3-单链表的反转【腾讯面试题】" class="headerlink" title="例3  单链表的反转【腾讯面试题】"></a>例3  单链表的反转【腾讯面试题】</h5><p>思路：</p>
<ol>
<li>先定义一个新的头节点，作为反转后的链表的头节点；</li>
<li>遍历原链表，每遍历一个节点，就将其取出并放在新的链表的前端；</li>
<li>将原链表的头节点的下一节点指向新链表的头节点的下一节点（使链表能用原来的头节点访问）。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 将单链表反转</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 头节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reverseList</span><span class="params">(HeroNode head)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//如果当前链表为空，或只有一个节点则无需反转</span></span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span> || head.next.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="comment">//辅助指针</span></span><br><span class="line">    HeroNode cur = head.next;</span><br><span class="line">    <span class="comment">//指向当前节点的下一个节点</span></span><br><span class="line">    HeroNode next = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//新的头节点</span></span><br><span class="line">    HeroNode newHead = <span class="keyword">new</span> HeroNode(<span class="number">0</span>,<span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        next = cur.next;</span><br><span class="line">        <span class="comment">//将节点放到新链表最前端</span></span><br><span class="line">        cur.next = newHead.next;</span><br><span class="line">        newHead.next = cur;</span><br><span class="line">        <span class="comment">//节点后移</span></span><br><span class="line">        cur = next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//将原链表的头节点下一节点指向新链表的第一个节点</span></span><br><span class="line">    head.next = newHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="例4-从尾到头打印单链表【百度面试题】"><a href="#例4-从尾到头打印单链表【百度面试题】" class="headerlink" title="例4  从尾到头打印单链表【百度面试题】"></a>例4  从尾到头打印单链表【百度面试题】</h5><p>思路：</p>
<ol>
<li>方式一：先将链表反转，然后遍历。这样的问题是会破坏原链表的结构，<strong>不建议</strong>。</li>
<li>方式二：利用栈将各个节点压入，然后利用先入后出的特点实现逆序打印。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用栈实现逆序打印</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head 头节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">reversePrint</span><span class="params">(HeroNode head)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (head.next == <span class="keyword">null</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    Stack&lt;HeroNode&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    HeroNode cur = head.next;</span><br><span class="line">    <span class="comment">//将链表所有节点压入栈</span></span><br><span class="line">    <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">        stack.push(cur);</span><br><span class="line">        cur = cur.next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//边弹出边打印</span></span><br><span class="line">    <span class="keyword">while</span> (stack.size() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(stack.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="例5-合并两个有序单链表，合并之后的链表依然有序"><a href="#例5-合并两个有序单链表，合并之后的链表依然有序" class="headerlink" title="例5  合并两个有序单链表，合并之后的链表依然有序"></a>例5  合并两个有序单链表，合并之后的链表依然有序</h5><p>思路：</p>
<ol>
<li>新建一个头节点作为合并链表的头节点；</li>
<li>分别遍历两个单链表，同时比较当前两个节点的大小，将更小的那个加入新的链表；</li>
<li>当其中一个链表提前遍历完时，直接将另一个链表的后续节点加入新链表。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据排名合并两个有序单链表</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head1  第一个链表的头节点</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> head2  第二个链表的头节点</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mergeList</span><span class="params">(HeroNode head1, HeroNode head2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//假如不能使用之前写好的 add 方法</span></span><br><span class="line">    HeroNode newHead = <span class="keyword">new</span> HeroNode(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="comment">//新的链表的指针</span></span><br><span class="line">    HeroNode ptr = newHead;</span><br><span class="line">    <span class="comment">//第一个链表的辅助指针</span></span><br><span class="line">    HeroNode cur1 = head1.next;</span><br><span class="line">    HeroNode next1 = <span class="keyword">null</span>;</span><br><span class="line">    <span class="comment">//第二个链表的辅助指针</span></span><br><span class="line">    HeroNode cur2 = head2.next;</span><br><span class="line">    HeroNode next2 = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (cur1 != <span class="keyword">null</span> &amp;&amp; cur2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (cur1.rank &lt; cur2.rank) &#123;</span><br><span class="line">            <span class="comment">//暂存下一个节点</span></span><br><span class="line">            next1 = cur1.next;</span><br><span class="line">            <span class="comment">//使新链表当前节点的下一个节点指向新的节点</span></span><br><span class="line">            ptr.next = cur1;</span><br><span class="line">            <span class="comment">//新链表指针后移</span></span><br><span class="line">            ptr = ptr.next;</span><br><span class="line">            <span class="comment">//第一个链表指针后移</span></span><br><span class="line">            cur1 = next1;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cur1.rank &gt; cur2.rank) &#123;</span><br><span class="line">            next2 = cur2.next;</span><br><span class="line">            ptr.next = cur2;</span><br><span class="line">            ptr = ptr.next;</span><br><span class="line">            cur2 = next2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果有一个链表已经遍历完，另一个没有遍历完</span></span><br><span class="line">    <span class="keyword">if</span> (cur1 == <span class="keyword">null</span> &amp;&amp; cur2 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="comment">//直接将第二个链表剩余的节点加入</span></span><br><span class="line">        ptr.next = cur2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (cur2 == <span class="keyword">null</span> &amp;&amp; cur1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">        ptr.next = cur1;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//假如要求要根据第一个链表的头节点打印</span></span><br><span class="line">    head1.next = newHead.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="双向链表的应用实例"><a href="#双向链表的应用实例" class="headerlink" title="双向链表的应用实例"></a>双向链表的应用实例</h4><p>单向链表只能一个方向查找，不能自我删除，需要依靠辅助指针；而双向链表可以向前或向后查找，并且可以自我删除。</p>
<p>双链表遍历的方式和单链表一样，只是可以向前或向后查找；</p>
<p>添加元素时是默认添加到双链表的最后，先找到双链表最后的节点，使最后节点的 <code>next</code> 指针指向新节点，使新节点的 <code>prev</code> 指针指向当前最后的节点；</p>
<p>修改的思路和单链表一样；</p>
<p>删除元素时，可以直接找到待删除的元素，实现自我删除。</p>
<h5 id="双向链表代码实现"><a href="#双向链表代码实现" class="headerlink" title="双向链表代码实现"></a>双向链表代码实现</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DoubleHeroNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> rank;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> DoubleHeroNode next;   <span class="comment">//下一节点</span></span><br><span class="line">    <span class="keyword">public</span> DoubleHeroNode prev;   <span class="comment">//前一节点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DoubleHeroNode</span><span class="params">(<span class="keyword">int</span> rank, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.rank = rank;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写 ToString 方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;HeroNode&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;rank=&quot;</span> + rank +</span><br><span class="line">                <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedListDouble</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化一个头节点</span></span><br><span class="line">    <span class="keyword">private</span> DoubleHeroNode head = <span class="keyword">new</span> DoubleHeroNode(<span class="number">0</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DoubleHeroNode <span class="title">getHead</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加节点到双向链表末尾</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(DoubleHeroNode node)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//因为 head 节点不能动，因此需要辅助指针</span></span><br><span class="line">        DoubleHeroNode temp = head;</span><br><span class="line">        <span class="comment">//遍历链表，找到最后一个节点</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//退出循环表示当前节点是最后一个节点</span></span><br><span class="line">        <span class="comment">//最后节点 next 指针指向新节点</span></span><br><span class="line">        temp.next = node;</span><br><span class="line">        <span class="comment">//新节点 prev 指针指向最后节点</span></span><br><span class="line">        node.prev = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按照排名添加</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addByRank</span><span class="params">(DoubleHeroNode node)</span> </span>&#123;</span><br><span class="line">        DoubleHeroNode temp = head;</span><br><span class="line">        <span class="comment">//是否有重复记录</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="comment">//遍历链表</span></span><br><span class="line">        <span class="keyword">while</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">//如果当前节点的下一节点排名大于待添加节点排名，就插入当前节点位置</span></span><br><span class="line">            <span class="keyword">if</span> (temp.next.rank &gt; node.rank) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (temp.next.rank == node.rank) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;记录已存在，无法重复插入&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//插入节点</span></span><br><span class="line">        node.prev = temp;</span><br><span class="line">        node.next = temp.next;</span><br><span class="line">        <span class="comment">//当前节点的下一节点不为空时才给下一个节点重置 prev 指针</span></span><br><span class="line">        <span class="keyword">if</span> (temp.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp.next.prev = node;</span><br><span class="line">        &#125;</span><br><span class="line">        temp.next = node;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据新节点的排名来修改对应节点，和单链表步骤一样</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(DoubleHeroNode newNode)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DoubleHeroNode temp = head;</span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;   <span class="comment">//是否找到节点</span></span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (temp.rank == newNode.rank) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果找到</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            temp.name = newNode.name;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;没有找到该节点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按排名删除，直接找到待删除节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(<span class="keyword">int</span> rank)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> NullPointerException(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DoubleHeroNode cur = head.next;</span><br><span class="line">        <span class="comment">//是否找到待删除节点</span></span><br><span class="line">        <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">while</span> (cur != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (cur.rank == rank) &#123;</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cur = cur.next;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//遍历结束，如果找到该节点</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            cur.prev.next = cur.next;</span><br><span class="line">            <span class="keyword">if</span> (cur.next != <span class="keyword">null</span>)</span><br><span class="line">                cur.next.prev = cur.prev;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;没有找到待删除节点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//打印链表</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//判断链表是否为空</span></span><br><span class="line">        <span class="keyword">if</span> (head.next == <span class="keyword">null</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        DoubleHeroNode temp = head;</span><br><span class="line">        <span class="keyword">while</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">            temp = temp.next;</span><br><span class="line">            <span class="keyword">if</span> (temp != <span class="keyword">null</span>) &#123;</span><br><span class="line">                System.out.println(temp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="单向环形链表应用场景"><a href="#单向环形链表应用场景" class="headerlink" title="单向环形链表应用场景"></a>单向环形链表应用场景</h4><p>Joseph 问题：设编号为 1…n 的 n 个人围坐一圈，约定编号为 k (1 &lt;= k &lt;= n) 的人从 1 开始报数，数到 m 的人出列，他的下一位又从 1 开始报数，数到 m 的人又出列，以此类推，直到所有人都出列为止，由此产生一个出队编号的序列。</p>
<p>思路：</p>
<p>先创建一个不带头节点的有 n 个节点的单向循环链表，然后从 k 节点起从 1 开始计数，计到 m 时，对应节点从链表中删除，然后再从被删除节点的下一个节点开始重新从 1 计数，直到最后一个节点从链表中删除。</p>
<h5 id="代码实现-1"><a href="#代码实现-1" class="headerlink" title="代码实现"></a>代码实现</h5><p>构建一个单向环形链表的思路：</p>
<ol>
<li>先创建第一个节点，并设置标识 first ，然后让它的 next 指针指向自己，形成环形；</li>
<li>每创建一个新节点，就把该节点的 next 指针指向第一个节点。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单向环形链表</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CircularLinkedList</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化第一个节点</span></span><br><span class="line">    <span class="keyword">private</span> ListNode first = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加节点，构成环形链表</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> count 总的人数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addNode</span><span class="params">(<span class="keyword">int</span> count)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (count &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;人数不能小于1&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//辅助指针</span></span><br><span class="line">        ListNode cur = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//从 1 开始创建 count 个节点</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i++) &#123;</span><br><span class="line">            <span class="comment">//按照编号创建节点</span></span><br><span class="line">            <span class="keyword">var</span> node = <span class="keyword">new</span> ListNode(i);</span><br><span class="line">            <span class="comment">//如果是第一个节点，还需要赋给 first 指针</span></span><br><span class="line">            <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">                first = node;</span><br><span class="line">                <span class="comment">//使指针指向自己构成环形</span></span><br><span class="line">                first.setNext(first);</span><br><span class="line">                <span class="comment">//设置 cur 指针的初始位置</span></span><br><span class="line">                cur = first;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//如果不是第一个节点</span></span><br><span class="line">            cur.setNext(node);</span><br><span class="line">            node.setNext(first);</span><br><span class="line">            <span class="comment">//移动辅助指针</span></span><br><span class="line">            cur = node;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (first == <span class="keyword">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">&quot;链表为空&quot;</span>);</span><br><span class="line">        <span class="comment">//辅助指针</span></span><br><span class="line">        <span class="keyword">var</span> cur = first;</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            System.out.printf(<span class="string">&quot;%d\t&quot;</span>, cur.getNum());</span><br><span class="line">            <span class="comment">//如果当前节点的下一个节点是 first ，则表示遍历完毕</span></span><br><span class="line">            <span class="keyword">if</span> (cur.getNext() == first)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="comment">//移动指针</span></span><br><span class="line">            cur = cur.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//节点</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ListNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> num;    <span class="comment">//编号</span></span><br><span class="line">    <span class="keyword">private</span> ListNode next;  <span class="comment">//指向下一个节点</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ListNode</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNum</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.num = num;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ListNode <span class="title">getNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNext</span><span class="params">(ListNode next)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.next = next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>出队的思路：</p>
<ol>
<li>需要一个辅助指针，事先指向环形链表的最后一个节点；</li>
<li>将 <code>first</code> 指针根据 k 值移动到设置的起始位置；</li>
<li>报数时，让辅助指针和 <code>first</code> 指针同时移动 m - 1 次；</li>
<li>这时可以将 <code>first</code> 指针指向的节点出队，先将 <code>first</code> 指针移动到下一个节点处，再让辅助指针指向节点的 <code>next</code> 指针指向 <code>first</code> 指针所处位置即可。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据用户输入，生成出队顺序</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startNum 表示从第几个节点开始</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> count 移动多少次</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nums 共有多少人</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">popNodes</span><span class="params">(<span class="keyword">int</span> startNum, <span class="keyword">int</span> count, <span class="keyword">int</span> nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (first == <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//校验参数是否符合条件</span></span><br><span class="line">    <span class="keyword">if</span> (startNum &lt; <span class="number">1</span> || startNum &gt; nums) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;参数有误，请重新输入&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//辅助指针，先找到最后一个节点</span></span><br><span class="line">    ListNode helper = first;</span><br><span class="line">    <span class="keyword">while</span> (helper.getNext() != first) &#123;</span><br><span class="line">        helper = helper.getNext();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//报数前指针先移动到起始位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; startNum - <span class="number">1</span>; i++) &#123;</span><br><span class="line">        first = first.getNext();</span><br><span class="line">        helper = helper.getNext();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始出队，如果 helper == first 说明当前队中只剩一人</span></span><br><span class="line">    <span class="keyword">while</span> (helper != first) &#123;</span><br><span class="line">        <span class="comment">//两个指针同时移动 count - 1 次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; count - <span class="number">1</span>; j++) &#123;</span><br><span class="line">            first = first.getNext();</span><br><span class="line">            helper = helper.getNext();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//移动完毕，此时 first 指针指向的节点即为要出队的节点</span></span><br><span class="line">        System.out.printf(<span class="string">&quot;编号%d出队\n&quot;</span>, first.getNum());</span><br><span class="line">        first = first.getNext();</span><br><span class="line">        helper.setNext(first);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//循环完毕，只剩下最后一个节点</span></span><br><span class="line">    System.out.printf(<span class="string">&quot;最后出队的是编号%d\n&quot;</span>, first.getNum());</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack    栈"></a>Stack    栈</h3>]]></content>
      <categories>
        <category>Data Structure</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript OOP</title>
    <url>/2021/07/05/JavaScript-OOP/</url>
    <content><![CDATA[<h3 id="4-Pillars-of-OOP"><a href="#4-Pillars-of-OOP" class="headerlink" title="4 Pillars of OOP"></a>4 Pillars of OOP</h3><ol>
<li>Encapsulation 封装：重新组合相关的变量和函数，可以减少复杂性，增加代码的复用性；</li>
<li>Abstraction 抽象：隐藏细节和复杂性，只显示必要的部分，这种技术降低了复杂性，也隔离了代码更改带来的影响；</li>
<li>Inheritance 继承：可以消除冗余的代码；</li>
<li>Polymorphism 多态：可以避免写出复杂丑陋的选择性（switch/case）代码</li>
</ol>
<p>OOP 将一组相关的变量和函数组合成一个单元，这个单元被称为<strong>对象</strong>（Object），对象中的变量称为<strong>属性</strong>（Property），函数称为<strong>方法</strong>（Method）。</p>
<h3 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h3><h4 id="Object-Literals"><a href="#Object-Literals" class="headerlink" title="Object Literals"></a>Object Literals</h4><p>对象创建语法是一种简单的定义对象的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> circle = &#123;</span><br><span class="line">    radius: <span class="number">1</span>,</span><br><span class="line">    location: &#123;</span><br><span class="line">        x: <span class="number">1</span>,</span><br><span class="line">        y: <span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">    draw: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Drawing a circle.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">circle.draw();</span><br></pre></td></tr></table></figure>



<h4 id="Factories"><a href="#Factories" class="headerlink" title="Factories"></a>Factories</h4><p>对象创建语法不是一种复制对象的好方法，特别是对象含有至少一种方法的时候。如果对象中有多个方法，那么这个对象就具有行为性。解决方法是用工厂函数（Factory）或构造函数（Constructor）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createCircle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="comment">// 在 ES6 中，如果键和值名字是一样的，可以去除冗余的值，直接写键的名字</span></span><br><span class="line">        radius,</span><br><span class="line">        draw: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">&quot;Drawing a circle.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = createCircle(<span class="number">1</span>);</span><br><span class="line">circle.draw();</span><br></pre></td></tr></table></figure>



<h4 id="Constructors"><a href="#Constructors" class="headerlink" title="Constructors"></a>Constructors</h4><p>当使用 new 操作符调用一个函数时，3 件事发生了：</p>
<ol>
<li>首先 new 操作符创建了一个空对象；</li>
<li>然后它使 this 指向这个空对象；</li>
<li>最后它从调用的函数返回这个对象。</li>
</ol>
<p>所以构造函数不需要和工厂函数一样有一个返回对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在 new 一个 Circle 对象之前，this 默认指向全局对象，即 window 对象</span></span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    <span class="built_in">this</span>.draw = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Drawing by constructor function.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> another = <span class="keyword">new</span> Circle(<span class="number">2</span>);</span><br><span class="line">another.draw();</span><br></pre></td></tr></table></figure>



<h4 id="Constructor-Property"><a href="#Constructor-Property" class="headerlink" title="Constructor Property"></a>Constructor Property</h4><p>每个 JavaScript 中的对象都有一个叫构造函数的属性，它是一个用于创建这个对象的构造方法的引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&gt; circle.constructor</span><br><span class="line"><span class="comment">// 这是 JavaScript 的内置构造函数</span></span><br><span class="line">&lt; ƒ <span class="function"><span class="title">Object</span>(<span class="params"></span>)</span> &#123; [native code] &#125;</span><br><span class="line"></span><br><span class="line">&gt; another.constructor</span><br><span class="line">&lt; ƒ <span class="function"><span class="title">Circle</span>(<span class="params">radius</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 在 new 一个 Circle 对象之前，this 默认指向全局对象，即 window 对象</span></span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    <span class="built_in">this</span>.draw = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Drawing by constructor function.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Adding-or-Removing-Properties"><a href="#Adding-or-Removing-Properties" class="headerlink" title="Adding or Removing Properties"></a>Adding or Removing Properties</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 动态地添加或删除新的属性</span></span><br><span class="line">another.animation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Running the animation.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> another.animation;</span><br></pre></td></tr></table></figure>



<h4 id="Enumerating-Properties"><a href="#Enumerating-Properties" class="headerlink" title="Enumerating Properties"></a>Enumerating Properties</h4><p>有时需要遍历或枚举对象的属性，可以使用 <code>for-in</code> 循环；想要得到所有的键，可以使用 Object 对象的 <code>keys()</code> 方法；如果要检查对象是否包含某个属性或方法，可以使用 <code>in</code> 操作符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> another) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> another[key] !== <span class="string">&quot;function&quot;</span>)</span><br><span class="line">        <span class="built_in">console</span>.log(key, another[key]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">Object</span>.keys(another);</span><br><span class="line"><span class="built_in">console</span>.log(keys); </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="string">&quot;radius&quot;</span> <span class="keyword">in</span> circle)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;The circle has a radius.&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="Private-Properties-and-Methods"><a href="#Private-Properties-and-Methods" class="headerlink" title="Private Properties and Methods"></a>Private Properties and Methods</h4><p>为了实现抽象，隐藏对象中的某些成员，在定义这些成员的时候，不要用 this 将它们声明为属性，而是使用 let 操作符声明为内部变量。</p>
<p>闭包：闭包定义了某些变量可以被其内部函数访问。作用域是临时的，而闭包是常驻的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 在 new 一个 Circle 对象之前，this 默认指向全局对象，即 window 对象</span></span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> defaultLocation = &#123;</span><br><span class="line">        x: <span class="number">0</span>,</span><br><span class="line">        y: <span class="number">0</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> computeOptimumLocation = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;This is a hidden method.&quot;</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(defaultLocation);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.draw = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        computeOptimumLocation();</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&quot;Drawing by constructor function.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Getters-and-Setters"><a href="#Getters-and-Setters" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h4><p>可以在函数中使用 Object 对象的 <code>defineProperty()</code> 方法来定义 <code>getter</code> 和 <code>setter</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Object</span>.defineProperty(<span class="built_in">this</span>, <span class="string">&quot;defaultLocation&quot;</span>, &#123;</span><br><span class="line">    get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> defaultLocation;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: <span class="function"><span class="keyword">function</span>(<span class="params">val</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!val.x || !val.y)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;Invalid location.&quot;</span>)</span><br><span class="line">        </span><br><span class="line">        defaultLocation = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>



<h3 id="Prototypes"><a href="#Prototypes" class="headerlink" title="Prototypes"></a>Prototypes</h3><h4 id="Prototype-Inheritance"><a href="#Prototype-Inheritance" class="headerlink" title="Prototype Inheritance"></a>Prototype Inheritance</h4><p>JavaScript 中只有对象没有类，所以才会出现原型继承。</p>
<p>原型可以理解为一个对象的父母，在 JS 中的每一个对象，除了根对象，都有原型。</p>
<p>当访问一个对象的成员时，引擎会沿着原型链路一直往上找，直到找到为止。</p>
<p>原型就是一个普通的对象，每个对象都有原型或父母，除了根对象。</p>
<h4 id="Multi-level-Inheritance"><a href="#Multi-level-Inheritance" class="headerlink" title="Multi-level Inheritance"></a>Multi-level Inheritance</h4><p>如果对象由给定的构造函数构造，都会拥有同一个原型。例如所有用 <code>Circle()</code> 构造函数构造的 <code>circle</code> 对象，都继承自 <code>circleBase</code> 对象，而 <code>circleBase</code> 对象则继承自根对象 <code>objectBase</code> 。</p>
<h4 id="Property-Attributes"><a href="#Property-Attributes" class="headerlink" title="Property Attributes"></a>Property Attributes</h4><p>在 JS 中，所有属性都是有自己的特征（Attributes）的。有时某些特征阻止一个属性被枚举，例如 <code>toString()</code> </p>
<p>方法中 <code>enumerable = false</code> 。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">    name: <span class="string">&quot;Star&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">    <span class="comment">// 此时，person 对象就是不可写，不可枚举，不可删除的了</span></span><br><span class="line">    writable: <span class="literal">false</span>,</span><br><span class="line">    enumerable: <span class="literal">false</span>,</span><br><span class="line">    configurable: <span class="literal">false</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<h4 id="Prototype-vs-Instance-Members"><a href="#Prototype-vs-Instance-Members" class="headerlink" title="Prototype vs Instance Members"></a>Prototype vs Instance Members</h4><p>当需要创建大量同种对象时，如果对象中有很多方法，会浪费大量的内存空间，因为这些方法也创建了很多副本。解决方法就是将方法移出这个对象，放到这个对象的原型中去，这样这些方法就只有一个实例了。而因为原型继承，仍然可以使用这个对象访问相应的方法。</p>
<p>因此，在 JS 中有两种成员，实例成员和原型成员。可以将每个对象私有的属性作为实例成员，而共有的属性作为原型成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Instance members</span></span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prototype members</span></span><br><span class="line">Circle.prototype.draw = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Draw method in prototype.&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c1 = <span class="keyword">new</span> Circle(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">const</span> c2 = <span class="keyword">new</span> Circle(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 重写原型中的 toString 方法</span></span><br><span class="line">Circle.prototype.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Circle with radius &quot;</span> + <span class="built_in">this</span>.radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Iterating-Properties"><a href="#Iterating-Properties" class="headerlink" title="Iterating Properties"></a>Iterating Properties</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只返回实例对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.keys(c1));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回所有对象，包括实例的和原型的</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> key <span class="keyword">in</span> c1)  <span class="built_in">console</span>.log(key);</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="Avoid-Extending-Built-in-Objects"><a href="#Avoid-Extending-Built-in-Objects" class="headerlink" title="Avoid Extending Built-in Objects"></a>Avoid Extending Built-in Objects</h4><p>不应该修改 JS 的内建函数。因为有可能以后用到一个库，库中也有一个相同名字的方法，但是实现完全不同，这就可能浪费大量时间来修改代码；也可能库中有的方法依赖于内建函数中已有的方法，如果修改了内建函数，会带来麻烦。</p>
<h3 id="Prototypes-Inheritance"><a href="#Prototypes-Inheritance" class="headerlink" title="Prototypes Inheritance"></a>Prototypes Inheritance</h3><h4 id="Creating-Prototypical-Inheritance"><a href="#Creating-Prototypical-Inheritance" class="headerlink" title="Creating Prototypical Inheritance"></a>Creating Prototypical Inheritance</h4><p>在 JS 中，使用函数 <code>Object.create()</code> 可以从指定的原型创建对象，实现原型继承。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">Shape.prototype.duplicate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Duplicate.&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 使 Circle 的原型继承自 Shape 的原型</span></span><br><span class="line">Circle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</span><br><span class="line"></span><br><span class="line">Circle.prototype.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Draw.&quot;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> shape = <span class="keyword">new</span> Shape();</span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h4 id="Resetting-the-Constructor"><a href="#Resetting-the-Constructor" class="headerlink" title="Resetting the Constructor"></a>Resetting the Constructor</h4><p>当重设了原型对象后，应该同时重设构造器属性。否则使用 <code>new Circle.prototype.constructor</code> 创建出来的对象会变成 Shape 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Circle.prototype = <span class="built_in">Object</span>.create(Shape.prototype);</span><br><span class="line">Circle.prototype.constructor = Circle;</span><br></pre></td></tr></table></figure>



<h4 id="Calling-the-Super-Constructor"><a href="#Calling-the-Super-Constructor" class="headerlink" title="Calling the Super Constructor"></a>Calling the Super Constructor</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Shape</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.color = color;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius, color</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// Super 构造器，使 Shape 对象中的 this 指向当前对象</span></span><br><span class="line">  Shape.call(<span class="built_in">this</span>, color);</span><br><span class="line">  <span class="built_in">this</span>.radius = radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Intermediate-Function-Inheritance"><a href="#Intermediate-Function-Inheritance" class="headerlink" title="Intermediate Function Inheritance"></a>Intermediate Function Inheritance</h4><p>重构用来原型继承的代码，把它变成一个可以复用的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span>(<span class="params">Parent, Child</span>) </span>&#123;</span><br><span class="line">  Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype);</span><br><span class="line">  Child.prototype.constructor = Child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Method-Overriding"><a href="#Method-Overriding" class="headerlink" title="Method Overriding"></a>Method Overriding</h4><p>有时使用继承，在对象的父类中定义的方法可能在对象子类实例当中工作或实现不理想。假如希望对象子类中有个特殊的实现，就可以使用方法重写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Circle.prototype.duplicate = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  Shape.prototype.duplicate();</span><br><span class="line">  <span class="comment">// 如果需要使用 this</span></span><br><span class="line">  Shape.prototype.duplicate.call(<span class="built_in">this</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&quot;Duplicate Circle.&quot;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="When-to-Use-Inheritance"><a href="#When-to-Use-Inheritance" class="headerlink" title="When to Use Inheritance"></a>When to Use Inheritance</h4><p>由于继承会使代码变得复杂且脆弱，除非有理由，否则不要轻易使用继承。</p>
<p>应避免创建层级式继承关系。如果要用继承特性，最好维持在一级。</p>
<p>好的组合胜过继承，使用组合就能避免过于复杂的继承结构。在 JS 中，使用 MIxins 来达到组合的目的。</p>
<h4 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h4><p>ES6 中，可以使用 <code>Object.assign()</code> 方法将一个对象的所有成员拷贝到另一个对象。这样就能把不同的特性组合到一个对象中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixin</span>(<span class="params">target, ...sources</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 这里的 ... 操作符是分解操作符，将传入的数组类型参数分解</span></span><br><span class="line">  <span class="built_in">Object</span>.assign(target, ...sources);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> canEat = &#123;</span><br><span class="line">  eat: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Eating...&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> canWalk = &#123;</span><br><span class="line">  walk: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Walking...&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> canSwim = &#123;</span><br><span class="line">  swim: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Swimming...&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Fish</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">mixin(Person.prototype, canEat, canWalk);</span><br><span class="line">mixin(Fish.prototype, canEat, canSwim);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="keyword">const</span> fish = <span class="keyword">new</span> Fish();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(person, fish);</span><br></pre></td></tr></table></figure>



<h3 id="ES6-Classes"><a href="#ES6-Classes" class="headerlink" title="ES6 Classes"></a>ES6 Classes</h3><p>ES6 之后，有一种创建对象和继承关系的新方法，就是用类 Classes 。但这种类和其他语言中的类不同，它们只是为了完成原型继承而套的外皮。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">    <span class="built_in">this</span>.move = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;move function as property.&quot;</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;draw function in prototype.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Circle(<span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h4 id="Hoisting"><a href="#Hoisting" class="headerlink" title="Hoisting"></a>Hoisting</h4><p>在 JS 中，有两种定义函数的方法：使用函数声明或使用函数表达式。</p>
<p>函数声明和表达式有一个很关键的区别，函数声明是<strong>变量提升</strong>（Hoisting）的，也就是会自动被置于代码的最顶端，因此可以在函数声明之前调用它。而函数表达式不会被置顶，因此无法在函数表达式定义之前调用它。</p>
<p>不同于函数，<strong>类声明和类表达式都不会置顶</strong>。并且更推荐使用类声明而不是类表达式，因为类声明方式更加简单清晰。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Class declaration</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Square</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Class expression</span></span><br><span class="line"><span class="keyword">const</span> square = <span class="class"><span class="keyword">class</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<h4 id="Static-Methods"><a href="#Static-Methods" class="headerlink" title="Static Methods"></a>Static Methods</h4><p>静态方法并不会服务于某个特定的实例对象，它只工作于类本身。因此为了使用静态方法，不需要去创建一个类对象实例。</p>
<p>静态方法常用来创建不属于具体实例的工具函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;draw function in prototype.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 通过 JSON 数据来创建新的 Circle 对象</span></span><br><span class="line">  <span class="keyword">static</span> <span class="function"><span class="title">parse</span>(<span class="params">str</span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> radius = <span class="built_in">JSON</span>.parse(str).radius;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Circle(radius);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = Circle.parse(<span class="string">`&#123; &quot;radius&quot;: 1 &#125;`</span>);</span><br></pre></td></tr></table></figure>



<h4 id="The-“this”-Keyword"><a href="#The-“this”-Keyword" class="headerlink" title="The “this” Keyword"></a>The “this” Keyword</h4><p>在 JS 中，有一种严格模式，开启这个模式之后，将会做更多更严格的错误检查，同时也改变了 <code>this</code> 关键字的运作模式。</p>
<p>当对象作为函数定义时：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&quot;use strict&quot;</span>;	<span class="comment">// 开启严格模式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Circle</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  <span class="built_in">this</span>.draw = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> c = <span class="keyword">new</span> Circle(<span class="number">1</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Method call</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">c.draw();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 draw 方法的引用</span></span><br><span class="line"><span class="keyword">const</span> draw = c.draw;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Function call</span></span><br><span class="line"><span class="comment"> * 不开启严格模式的情况下，指向的是 window 对象</span></span><br><span class="line"><span class="comment"> * 开启严格模式后将得到 undefined</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">draw();</span><br></pre></td></tr></table></figure>

<p>当在严格模式下，以函数调用的形式调用一个方法，<code>this</code> 将不再指向全局对象 <code>window</code> ，而是被设为 <code>undefined</code> 。这样做是为了防止意外地修改某些全局对象的属性。</p>
<p>在 ES6 的类定义下，类体会以严格模式解析执行，因此不管是否开启了严格模式，都能够在以函数形式调用一个方法时避免修改全局对象。</p>
<h4 id="Private-Properties-Using-Symbols"><a href="#Private-Properties-Using-Symbols" class="headerlink" title="Private Properties Using Symbols"></a>Private Properties Using Symbols</h4><p>ES6 中可以使用 Symbols 来实现属性和方法的私有化。</p>
<p>Symbol 是 ES6 中新的值类型。每个 <code>Symbol</code> 都是一个独立的个体，每次调用 <code>Symbol()</code> 函数，都会得到一个新的独立单位。因此使用它可以隐藏某些属性，来实现属性的私有化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _radius = <span class="built_in">Symbol</span>();</span><br><span class="line"><span class="keyword">const</span> _draw = <span class="built_in">Symbol</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>[_radius] = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  [_draw]() &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>



<h4 id="Private-Properties-Using-WeakMaps"><a href="#Private-Properties-Using-WeakMaps" class="headerlink" title="Private Properties Using WeakMaps"></a>Private Properties Using WeakMaps</h4><p>ES6 的新特性弱映射 WeakMaps 也可以实现对象成员的私有化。</p>
<p>弱映射实际上就是字典，字典中的键是对象，值可以随意。被称为弱映射的原因是它的键很”弱“，如果键没有引用了，它将会被垃圾回收机制删掉。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _radius = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"><span class="keyword">const</span> _move = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius</span>)</span> &#123;</span><br><span class="line">    _radius.set(<span class="built_in">this</span>, radius);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 此处如果使用的是 function 而不是箭头函数，move 方法中的 this 将会指向全局变量；</span></span><br><span class="line"><span class="comment">     * 使用箭头函数则会将 this 设置为包含它的对象，即 Circle 对象</span></span><br><span class="line"><span class="comment">     * */</span></span><br><span class="line">    _move.set(<span class="built_in">this</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&quot;Move.&quot;</span>, <span class="built_in">this</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果想在类中访问弱映射的 radius 属性的值</span></span><br><span class="line">  <span class="function"><span class="title">getRadius</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(_radius.get(<span class="built_in">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 如果想在类中调用弱映射的 move 方法</span></span><br><span class="line">  <span class="function"><span class="title">getMove</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    _move.get(<span class="built_in">this</span>)();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;success.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>



<h4 id="Getters-and-Setters-1"><a href="#Getters-and-Setters-1" class="headerlink" title="Getters and Setters"></a>Getters and Setters</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> _radius = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius</span>)</span> &#123;</span><br><span class="line">    _radius.set(<span class="built_in">this</span>, radius);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以像访问属性一样访问</span></span><br><span class="line">  <span class="keyword">get</span> <span class="title">radius</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> _radius.get(<span class="built_in">this</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">set</span> <span class="title">radius</span>(<span class="params">val</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (val &lt;= <span class="number">0</span>) <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;The radius is less than 0.&quot;</span>);</span><br><span class="line">    _radius.set(<span class="built_in">this</span>, val);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>



<h4 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h4><p>在 ES6 中，可以直接使用 <code>extends</code> 关键字来实现继承，不需要再重设构造器。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">color</span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.color = color;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;move&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">color, radius</span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 需要先调用父类实例</span></span><br><span class="line">    <span class="built_in">super</span>(color);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">this</span>.radius = radius;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;draw&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(<span class="string">&quot;red&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>



<h4 id="Method-Overriding-1"><a href="#Method-Overriding-1" class="headerlink" title="Method Overriding"></a>Method Overriding</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;move&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span> <span class="title">Shape</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">move</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="comment">// 如果需要用到父类中的 move 方法</span></span><br><span class="line">    <span class="built_in">super</span>.move();</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;circle move&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> Circle();</span><br></pre></td></tr></table></figure>



<h3 id="ES6-Tooling"><a href="#ES6-Tooling" class="headerlink" title="ES6 Tooling"></a>ES6 Tooling</h3><h4 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h4><p>将代码分为很多独立小文件，这些小文件就是模块。</p>
<p>首先，这能增加程序的可维护性；其次，可以在更多的程序中重用已经写好的模块；第三，使程序更抽象，也就是说可以隐藏模块中的细节，只向外提供必要的接口。</p>
<p>上述的使用弱映射实现对象成员私有化的例子中，是把类对象的定义和类的实例化放在同一个文件中完成的，因此仍然可以在创建 <code>Circle</code> 对象后通过弱映射属性访问到属性的值；实际上需要将类对象的定义放到另一个独立文件中，也就是模块，这样就只公开了 <code>Circle</code> 对象，而无法访问到私有成员了。</p>
<h4 id="CommonJS-Modules"><a href="#CommonJS-Modules" class="headerlink" title="CommonJS Modules"></a>CommonJS Modules</h4><p>CommonJs 是 Node 环境下的模块框架。</p>
<p>在模块化之前，要记住一个首要原则：<strong>高度关联的东西应该放在一起</strong>，这就是编程中说的<strong>内聚</strong>（Cohesion）。</p>
<p>默认情况下模块中所有东西都是私有的，无法从外部访问，除非公开它们。</p>
<p>CommonJS 定义了 require 函数和 module 函数，用来引入和公开模块。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// circle.js</span></span><br><span class="line"><span class="keyword">const</span> _radius = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="title">constructor</span>(<span class="params">radius</span>)</span> &#123;</span><br><span class="line">    _radius.set(<span class="built_in">this</span>, radius);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="title">draw</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;Circle with radius &quot;</span> + _radius.get(<span class="built_in">this</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = Circle;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="comment">// 引入模块</span></span><br><span class="line"><span class="keyword">const</span> Circle = <span class="built_in">require</span>(<span class="string">&quot;./circle.js&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> circle = <span class="keyword">new</span> Circle(<span class="number">2</span>);</span><br><span class="line">circle.draw();</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h4 id="ES6-Modules"><a href="#ES6-Modules" class="headerlink" title="ES6 Modules"></a>ES6 Modules</h4><p>ES6 中，只需要在类前添加 <code>export</code> 关键字，这个类就向外部公开了。</p>
<p>在另一个模块中，使用 <code>import</code> 关键字就可以引入公开的模块。</p>
<p>还需要在 html 文件中在执行代码的标签中添加 <code>type=&quot;module&quot;</code> 才可以正常运行。</p>
<h4 id="ES6-Tooling-1"><a href="#ES6-Tooling-1" class="headerlink" title="ES6 Tooling"></a>ES6 Tooling</h4><p>在现代 JS 编程中，有两类工具，分别是转译器和打包器。</p>
<p>转译器是两个词的组合，转换和编译，即将 JS 代码翻译成浏览器都能读懂的代码。Babel 就是现在 JS 代码编程中非常流行的转译器。</p>
<p>打包器就是将很多 js 文件合并成一个 js 文件。现在最受欢迎的打包器是 WebPack 。这样有助于优化客户请求文件的过程。</p>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>Linux目录结构</title>
    <url>/2021/05/04/Linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p><code>/bin</code>【常用】：是Binary的缩写，这个目录存放最常使用的命令；</p>
<p><code>/sbin</code>：s是Super User的缩写，存放的是系统管理员使用的系统管理程序；</p>
<p><code>/home</code>【常用】：存放普通用户的主目录，在Linux中每个用户都有一个自己的目录，一般目录是以该用户的账号命名；</p>
<p><code>/root</code>【常用】：系统管理员，也称作超级权限者的用户主目录；</p>
<p><code>/lib</code>：系统开机所需最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有应用程序都要用到这些共享库；</p>
<p><code>/lost+found</code>：一般情况下是空的，当系统非法关机后，会存放一些文件。</p>
<p><code>/etc</code>【常用】：所有系统管理所需的配置文件和子目录；</p>
<p><code>/usr</code>【常用】：非常重要，用户的很多应用程序和文件都放在这个目录下，相当于Windows中的Program Files目录；</p>
<p><code>/boot</code>【常用】：存放的是启动Linux时使用的一些核心文件；</p>
<p><code>/proc</code>【不能动】：是一个虚拟的目录，是系统内存的映射，访问这个目录来获取系统信息；</p>
<p><code>/srv</code>【不能动】：Service缩写，存放一些服务启动后需要提取的数据；</p>
<p><code>/sys</code>【不能动】：是Linux2.6内核的一个很大变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs；</p>
<p><code>/tmp</code>：存放临时文件；</p>
<p><code>/dev</code>：类似于Windows的设备管理器，把所有硬件用文件的形式存储；</p>
<p><code>/media</code>【常用】：Linux系统会自动识别一些设备，如U盘、光驱等，识别后会把设备挂载到这个目录下；</p>
<p><code>/mnt</code>【常用】：为了让用户临时挂载别的文件系统，可以将外部的存储挂载在这里；</p>
<p><code>/opt</code>：给主机额外安装软件，即安装包，所存放的目录，默认为空；</p>
<p><code>/user/local</code>【常用】：给主机额外安装软件所安装的目录，一般是通过编译源码方式安装的程序；</p>
<p><code>/var</code>【常用】：存放不断扩充的东西，习惯将经常被修改的文件放在这个目录下，包括各种日志文件；</p>
<p><code>/selinux</code>：SELinux是一种安全子系统，能控制程序只能访问特定文件，有三种工作模式，可以自行设置。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
  </entry>
  <entry>
    <title>Merge Sort</title>
    <url>/2021/03/26/Merge-Sort/</url>
    <content><![CDATA[<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><blockquote>
<p>分治算法思想：将原问题分解为几个规模较小的，与原问题类似的子问题，递归地求解子问题后，再合并这些子问题的解来建立原问题的解。</p>
</blockquote>
<p>归并排序完全遵循分治算法思想。</p>
<p>主要分为三个步骤：</p>
<ul>
<li><strong>分解</strong>：将待排序的N个元素分解为两个长度为N/2的子序列；</li>
<li><strong>解决</strong>：使用归并排序<strong>递归</strong>地排序两个子序列（套娃）；</li>
<li><strong>合并</strong>：合并两个已排序子序列从而得到已排序的数组。</li>
</ul>
<p>对于合并过程，需要逐一地比较两个子序列中元素的大小，使左子序列指针和右子序列指针分别指向序列首元素，若左边的值更小，则将该值赋给原数组相应位置，并使左指针右移；右边同理。</p>
<p>比较时可能出现左（右）子序列已遍历完而右（左）子序列未遍历完的情况，这表明右（左）子序列剩下的元素大于左（右）子序列所有元素，因此将剩下的元素直接赋到原数组对应位置即可。</p>
<p>时间复杂度：<code>O(NlogN)</code>    分解<code>logN</code> * 合并<code>N</code></p>
<p>空间复杂度：<code>O(N)</code></p>
<p>具体实现：<a href="https://gitee.com/starkn1ght/algorithms/blob/master/Sort/Sort/MergeSort.cs">C#</a></p>
]]></content>
      <categories>
        <category>Sorting and Trees</category>
      </categories>
  </entry>
  <entry>
    <title>MultiThreading</title>
    <url>/2021/03/27/MultiThreading/</url>
    <content><![CDATA[<h2 id="线程开启方式"><a href="#线程开启方式" class="headerlink" title="线程开启方式"></a>线程开启方式</h2><p>一般会为比较耗时的操作开启一个新线程，例如获取网络连接、下载文件、传输文件等。</p>
<h3 id="通过异步委托"><a href="#通过异步委托" class="headerlink" title="通过异步委托"></a>通过异步委托</h3><h4 id="需要被异步执行的耗时方法"><a href="#需要被异步执行的耗时方法" class="headerlink" title="需要被异步执行的耗时方法"></a>需要被异步执行的耗时方法</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="built_in">int</span> <span class="title">Test</span>(<span class="params"><span class="built_in">string</span> str</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="程序主体"><a href="#程序主体" class="headerlink" title="程序主体"></a>程序主体</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            <span class="comment">//使用委托引用一个耗时方法</span></span><br><span class="line">            Func&lt;<span class="built_in">string</span>, <span class="built_in">int</span>&gt; newThread = Test;</span><br><span class="line">            <span class="comment">//开启一个新线程执行委托所引用的方法</span></span><br><span class="line">            IAsyncResult ar = newThread.BeginInvoke(<span class="string">&quot;The new thread is running.&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//主线程的其他方法</span></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;The main thread is running.&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断新线程是否执行完毕</span></span><br><span class="line">            <span class="keyword">while</span>(!ar.IsCompleted)</span><br><span class="line">            &#123;</span><br><span class="line">                Console.Write(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">                Thread.Sleep(<span class="number">100</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行完毕后得到结果</span></span><br><span class="line">            <span class="keyword">var</span> res = newThread.EndInvoke(ar);</span><br><span class="line"></span><br><span class="line">            Console.WriteLine(<span class="string">&quot;The result is: &quot;</span> + res);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The main thread is running.</span><br><span class="line">.The new thread is running.</span><br><span class="line">..........The result is: 100</span><br></pre></td></tr></table></figure>

<h4 id="使用AsyncWaitHandle检测线程运行时间的方法"><a href="#使用AsyncWaitHandle检测线程运行时间的方法" class="headerlink" title="使用AsyncWaitHandle检测线程运行时间的方法"></a>使用AsyncWaitHandle检测线程运行时间的方法</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//等待1100ms后检查线程是否执行完毕</span></span><br><span class="line"><span class="built_in">bool</span> isEnd = ar.AsyncWaitHandle.WaitOne(<span class="number">1100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(isEnd)</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//执行完毕后得到结果</span></span><br><span class="line">	<span class="keyword">var</span> res = newThread.EndInvoke(ar);</span><br><span class="line"></span><br><span class="line">	Console.WriteLine(<span class="string">&quot;The result is: &quot;</span> + res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//如果超时，抛出异常</span></span><br><span class="line">	<span class="keyword">throw</span> <span class="keyword">new</span> TimeoutException(<span class="string">&quot;The new thread is timed out.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The main thread is running.</span><br><span class="line">The new thread is running.</span><br><span class="line">The result is: 100</span><br></pre></td></tr></table></figure>



<h3 id="通过Thread类"><a href="#通过Thread类" class="headerlink" title="通过Thread类"></a>通过Thread类</h3><h4 id="需要被执行的方法"><a href="#需要被执行的方法" class="headerlink" title="需要被执行的方法"></a>需要被执行的方法</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用Thread类开启线程必须用object作为形参，且不能有返回值</span></span><br><span class="line">        <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span> str</span>)</span></span><br><span class="line"><span class="function"></span>        &#123;</span><br><span class="line">            Console.WriteLine(str);</span><br><span class="line">            Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line">            </span><br><span class="line">            Console.WriteLine(<span class="string">$&quot;The thread <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span> is ended.&quot;</span>);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<h4 id="程序主体-1"><a href="#程序主体-1" class="headerlink" title="程序主体"></a>程序主体</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">Thread newThread = <span class="keyword">new</span> Thread(Test);</span><br><span class="line"></span><br><span class="line">newThread.Start(<span class="string">&quot;The new thread is running.&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//主线程其他方法</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;The main thread is running.&quot;</span>);</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="运行结果-2"><a href="#运行结果-2" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">The main thread is running.</span><br><span class="line">The new thread is running.</span><br><span class="line">The thread 3 is ended.</span><br></pre></td></tr></table></figure>



<h3 id="通过线程池"><a href="#通过线程池" class="headerlink" title="通过线程池"></a>通过线程池</h3><p>创建一个线程需要时间，线程池是为了完成不同的小任务而实现创建好的，只需要在应执行这些任务时发出请求即可。</p>
<p>通过<code>Thread</code>类创建出来的线程默认是前台线程（可修改为后台线程），而通过线程池创建出来的线程默认是后台线程（不可修改为前台线程）。不能给入池的线程设置优先级或名称。入池的线程只能用来执行一些耗时短的任务，耗时较长的线程应使用其他方法来创建。</p>
<blockquote>
<p>后台线程：当前台线程已经全部运行完毕，不管有没有执行完，后台线程会自动终止。</p>
</blockquote>
<h4 id="需要被执行的小任务"><a href="#需要被执行的小任务" class="headerlink" title="需要被执行的小任务"></a>需要被执行的小任务</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用线程池开启线程必须传入一个object形参</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Test</span>(<span class="params"><span class="built_in">object</span> str</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    Console.WriteLine(str + <span class="string">$&quot;ID: <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span>&quot;</span>);</span><br><span class="line">    Thread.Sleep(<span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line">    Console.WriteLine(<span class="string">$&quot;The thread <span class="subst">&#123;Thread.CurrentThread.ManagedThreadId&#125;</span> is ended.&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="程序主体-2"><a href="#程序主体-2" class="headerlink" title="程序主体"></a>程序主体</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line">       ...</span><br><span class="line">ThreadPool.QueueUserWorkItem(Test);</span><br><span class="line">       ThreadPool.QueueUserWorkItem(Test);</span><br><span class="line">       ThreadPool.QueueUserWorkItem(Test);</span><br><span class="line">       ThreadPool.QueueUserWorkItem(Test);</span><br><span class="line">       ThreadPool.QueueUserWorkItem(Test);</span><br><span class="line"></span><br><span class="line">       <span class="comment">//主线程其他方法</span></span><br><span class="line">       Console.WriteLine(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line"></span><br><span class="line">       Console.Read();</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="运行结果-3"><a href="#运行结果-3" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ID: 3</span><br><span class="line">ID: 6</span><br><span class="line">Main</span><br><span class="line">ID: 7</span><br><span class="line">ID: 8</span><br><span class="line">ID: 5</span><br><span class="line">The thread 3 is ended.</span><br><span class="line">The thread 6 is ended.</span><br><span class="line">The thread 8 is ended.</span><br><span class="line">The thread 7 is ended.</span><br><span class="line">The thread 5 is ended.</span><br></pre></td></tr></table></figure>



<h3 id="通过任务"><a href="#通过任务" class="headerlink" title="通过任务"></a>通过任务</h3><h4 id="程序主体-3"><a href="#程序主体-3" class="headerlink" title="程序主体"></a>程序主体</h4><figure class="highlight c#"><table><tr><td class="code"><pre><span class="line"><span class="comment">//其实是启动一个Action，因此不能有返回值也不能传入参数</span></span><br><span class="line">TaskFactory tf = <span class="keyword">new</span> TaskFactory();</span><br><span class="line">Task t = tf.StartNew(Test);</span><br><span class="line"></span><br><span class="line"><span class="comment">//主线程其他方法</span></span><br><span class="line">Console.WriteLine(<span class="string">&quot;Main&quot;</span>);</span><br><span class="line"></span><br><span class="line">Console.Read();</span><br></pre></td></tr></table></figure>

<h4 id="运行结果-4"><a href="#运行结果-4" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Main</span><br><span class="line">New thread ID: 3</span><br><span class="line">The thread 3 is ended.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Process and Thread</category>
      </categories>
  </entry>
  <entry>
    <title>Python爬虫基础</title>
    <url>/2021/06/07/Python%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="HTTP请求"><a href="#HTTP请求" class="headerlink" title="HTTP请求"></a>HTTP请求</h3><p>HTTP请求主要包含的内容有：</p>
<ul>
<li>请求方法（Request Method）；</li>
<li>请求网址（Request URL）；</li>
<li>请求头（Request Headers）；</li>
<li>请求体（Request Body）。</li>
</ul>
<h4 id="请求方法（Request-Method）"><a href="#请求方法（Request-Method）" class="headerlink" title="请求方法（Request Method）"></a>请求方法（Request Method）</h4><p>HTTP协议定义的与服务器交互的方法中最常用的就是GET和POST方法。</p>
<p>GET请求的参数信息会直接包含在URL中，如<code>https://www.baidu.com/s?wd=scrapy</code>中问号后面的参数就是以键值对形式表示的要搜索的内容。</p>
<p>POST请求主要用于表单的提交，如账号密码等重要信息，不会直接暴露在URL中，而是保存在请求体中从而避免了信息的泄露。</p>
<h4 id="请求头（Request-Headers）"><a href="#请求头（Request-Headers）" class="headerlink" title="请求头（Request Headers）"></a>请求头（Request Headers）</h4><p>请求头中包含了许多有关客户端环境和请求正文的信息，比较重要的有Accept、Host、Cookie、User-Agent等。</p>
<ul>
<li>Accept：浏览器端可以接受的媒体类型；</li>
<li>Cookie：网站为了辨别用户身份、进行会话跟踪而存储在用户本地的数据（通常经过加密）；</li>
<li>Host：指定被请求资源的Internet主机和端口号，通常从URL中提取；</li>
<li>User-Agent：告诉服务器，客户端使用的操作系统、浏览器名称版本等信息，在爬虫中设置此项可伪装成浏览器。</li>
</ul>
<h4 id="请求体（Request-Body）"><a href="#请求体（Request-Body）" class="headerlink" title="请求体（Request Body）"></a>请求体（Request Body）</h4><p>请求体一般保存的是POST请求发送的表单数据，GET请求的请求体为空。</p>
<h3 id="HTTP响应"><a href="#HTTP响应" class="headerlink" title="HTTP响应"></a>HTTP响应</h3><p>一个完整的HTTP响应主要包含：</p>
<ul>
<li>响应状态码（Response Status Code）；</li>
<li>响应头（Response Headers）；</li>
<li>响应体（Response Body）。</li>
</ul>
<h4 id="响应状态码（Response-Status-Code）"><a href="#响应状态码（Response-Status-Code）" class="headerlink" title="响应状态码（Response Status Code）"></a>响应状态码（Response Status Code）</h4><p>响应状态码表示服务器对请求的响应结果，如200表示服务器响应成功，403表示禁止访问，404表示页面未找到，408表示请求超时。在爬虫中可以针对不同的响应做出不同的处理。</p>
<h4 id="响应体（Response-Body）"><a href="#响应体（Response-Body）" class="headerlink" title="响应体（Response Body）"></a>响应体（Response Body）</h4><p>响应体存放服务器发给浏览器的正文数据。比如请求百度首页时，响应体就是百度首页的HTML代码。在爬虫中，从响应体中获取HTML代码、JSON数据和图片等，然后提取相应的内容。</p>
<h3 id="HTML的结构"><a href="#HTML的结构" class="headerlink" title="HTML的结构"></a>HTML的结构</h3><p>HTML（HyperText Markup Language，超文本标记语言）用于创建网页。</p>
<p>可以将HTML文档看作一棵树，准确地说是HTML DOM树。DOM（Document ObjectModel，文档对象模型）是W3C（万维网联盟）的标准，它定义了访问HTML和XML文档的标准。DOM树是跨平台且不依赖语言的，可以支持几乎所有的浏览器。</p>
<p>通过HTML DOM树即可遍历任意节点。</p>
<h3 id="模块的导入方法"><a href="#模块的导入方法" class="headerlink" title="模块的导入方法"></a>模块的导入方法</h3><h4 id="import语句导入"><a href="#import语句导入" class="headerlink" title="import语句导入"></a>import语句导入</h4><p>import导入是导入模块的常规方法。</p>
<p>该方法会导入指定模块中的所有函数，适用于需要使用指定模块中大量函数的情况。</p>
<p>语法格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> 模块名</span><br></pre></td></tr></table></figure>



<h4 id="from语句导入"><a href="#from语句导入" class="headerlink" title="from语句导入"></a>from语句导入</h4><p>有的模块中函数特别多，如果都使用import导入的话会导致程序运行速度变慢，将程序打包后得到的文件体积也会较大。因此如果只需要使用指定模块的少数几个函数，就可以用from语句导入。</p>
<p>语法格式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> 模块名 <span class="keyword">import</span> 函数名</span><br></pre></td></tr></table></figure>

<p>另外，如果要导入的模块名或函数名很长，可以在导入时使用关键字<code>as</code>对它们进行简化。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlwings <span class="keyword">as</span> xw	//导入xlwings模块并简写为xw</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial <span class="keyword">as</span> fc	//导入math模块中的factorial()函数并简写为fc</span><br></pre></td></tr></table></figure>



<h3 id="Scrapy框架"><a href="#Scrapy框架" class="headerlink" title="Scrapy框架"></a>Scrapy框架</h3><h4 id="爬虫执行流程"><a href="#爬虫执行流程" class="headerlink" title="爬虫执行流程"></a>爬虫执行流程</h4><ol>
<li><p>发送请求</p>
<p>给爬虫设定一个URL，模拟浏览器使用HTTP协议向网站服务器发送访问请求。</p>
</li>
<li><p>获取HTML文档</p>
<p>服务器收到请求后将HTML文档发送给爬虫。</p>
</li>
<li><p>抽取数据</p>
<p>爬虫使用XPath或BeautifulSoup从HTML文档中抽取有用的数据。</p>
</li>
<li><p>保存数据</p>
<p>将抽取到的数据保存到文件（CSV、JSON、TXT等）中，或数据库（MySQL、MongoDB等）中，实现持久化存储。</p>
</li>
</ol>
<h4 id="Scrapy框架结构"><a href="#Scrapy框架结构" class="headerlink" title="Scrapy框架结构"></a>Scrapy框架结构</h4><p>Scrapy框架包含以下组件：</p>
<ul>
<li><p>引擎（Engine）</p>
<p>整个系统的中心，指挥其他组件协同工作。</p>
</li>
<li><p>调度器（Scheduler）</p>
<p>接收引擎发过来的请求，按照先后顺序依次压入队列中，同时去除重复的请求。</p>
</li>
<li><p>下载器（Downloader）</p>
<p>用于下载网页内容，并将内容返回给爬虫（Scrapy下载器建立在twisted这个高效的异步模型上）。</p>
</li>
<li><p>爬虫（Spiders）</p>
<p>最核心的组件。用于从特定的网页中提取需要的信息（也成为实体Item），用户也可从中提取出链接，继续抓取下一个页面。</p>
</li>
<li><p>项目管道（Item Pipelines）</p>
<p>负责处理爬虫从网页中抽取的实体，主要功能是持久化实体、验证实体有效性、清除不需要的信息等。</p>
</li>
<li><p>下载器中间件（Downloader Middlewares）</p>
<p>位于引擎和下载器之间，处理引擎和下载器之间的请求与响应。</p>
</li>
<li><p>爬虫中间件（Spider Middlewares）</p>
<p>位于爬虫和引擎之间，主要用于处理爬虫的响应输入和请求输出。</p>
</li>
</ul>
<blockquote>
<p>参考书籍：</p>
<p>[1]    王秀文,郭明鑫,王宇韬. 超简单：用Python让Excel飞起来. 机械工业出版社，2020.</p>
<p>[2]    张涛. 从零开始学Scrapy网络爬虫. 机械工业出版社，2019.</p>
</blockquote>
]]></content>
      <categories>
        <category>Python Spider</category>
      </categories>
  </entry>
  <entry>
    <title>LeetCode刷题记录 —— 树</title>
    <url>/2021/06/11/LeetCode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%95-%E2%80%94%E2%80%94-%E6%A0%91/</url>
    <content><![CDATA[<p>无语了，刷过的题忘得好快，包括解法全部忘光光。稍微记录一下。   </p>
<h5 id="2021-6-11"><a href="#2021-6-11" class="headerlink" title="2021.6.11"></a>2021.6.11</h5><hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  124    二叉树中的最大路径和    难度：Hard</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-maximum-path-sum/">124. 二叉树中的最大路径和</a>   </p>
<p><strong>思路：</strong></p>
<p>利用二叉树的后序遍历计算不同子树的路径和，即左节点的值加上右节点的值加上该节点的值。每次计算都比较一次最大值，最后得到的最大值即为最大路径和。   </p>
<p><strong>细节：</strong></p>
<ol>
<li>递归的基线条件：<code>root == None</code>，说明该节点不存在，返回0；</li>
<li>递归计算左右子节点的最大贡献值，只有在贡献值大于0时，才选取对应子节点，否则舍弃；</li>
<li>当前节点所在子树的最大路径和取决于当前节点的值+左子节点的值+右子节点的值；</li>
<li>由于是求路径和，自底向上看的话，一个节点只能选取左子节点或者右子节点，因此递归的返回值应为当前节点的值+max(左子节点的值，右子节点的值)；至于左子节点-&gt;当前节点-&gt;右子节点的情况已经通过第3点的算式计算了；</li>
<li>时间复杂度：O(n)，遍历了一遍二叉树；</li>
<li>空间复杂度：O(n)，取决于递归调用栈，一般来说是O(h)，但最坏情况下是O(n)。   </li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode124/LeetCode124.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode124/LeetCode124.py">Python</a>   </p>
</li>
</ul>
<hr>
<h5 id="2021-6-12"><a href="#2021-6-12" class="headerlink" title="2021.6.12"></a>2021.6.12</h5><hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  105    从前序与中序遍历序列构造二叉树    难度：Medium</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">105. 从前序与中序遍历序列构造二叉树</a></p>
<p><strong>思路：</strong></p>
<p>由于前序遍历的顺序是【根节点-&gt;左子树-&gt;右子树】，而中序遍历的顺序是【左子树-&gt;根节点-&gt;右子树】，所以根据二者的数组可以推得：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">preorder &#x3D; [root, [subtree_left], [subtree_right]]</span><br><span class="line">inorder &#x3D; [[subtree_left], root, [subtree_right]]</span><br></pre></td></tr></table></figure>

<p>根据前序遍历数组中根节点的值，可以在中序遍历数组中定位到根节点的索引，从而分别计算出左子树和右子树的节点数量。再分别对前序遍历数组的左子树和右子树递归地调用这个过程，即可遍历整个二叉树，从而构造出这个二叉树。</p>
<p><strong>细节：</strong></p>
<ol>
<li><p>由上述分析可知，递归过程中需要多次在中序遍历数组中查找子树根节点的位置，如果每次都通过遍历数组来查找，时间复杂度较高。因此考虑将数组存储到哈希表来帮助快速定位，键表示节点的值，值表示节点在数组中的索引。</p>
</li>
<li><p>递归过程需要四个指针：<code>preLeft</code>、<code>preRight</code>、<code>inLeft</code>、<code>inRight</code>；分别代表两个数组的左边界和右边界；</p>
</li>
<li><p>递归的基线条件：<code>(preLeft &gt; preRight || inLeft &gt; inRight)</code>；</p>
</li>
<li><p>左子树的节点数量：<code>subtree_left = inRoot - inLeft</code>；</p>
</li>
<li><p>根据前序遍历数组构造左右子树时，左子树的边界可概括为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;preorder中，根节点索引+1...根节点索引+1+左子树的节点数量-1</span><br><span class="line">[preLeft + 1...preLeft + subtree_left]</span><br><span class="line">&#x2F;&#x2F;inorder中，起始位置索引...根节点索引-1</span><br><span class="line">[inLeft...inRoot - 1]</span><br></pre></td></tr></table></figure>

<p>右子树的边界可概括为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;preorder中，根节点索引+1+左子树的节点数量...结束位置索引</span><br><span class="line">[preLeft + 1 + subtree_left...preRight]</span><br><span class="line">&#x2F;&#x2F;inorder中，根节点索引+1...结束位置索引</span><br><span class="line">[inRoot + 1...inRight]</span><br></pre></td></tr></table></figure></li>
<li><p>递归的返回值为每个子树的根节点；</p>
</li>
<li><p>时间复杂度：O(n)，遍历了一遍二叉树；</p>
</li>
<li><p>空间复杂度：O(n)，返回的答案需要O(n)空间，存储数组到哈希表需要O(n)空间，以及递归时栈空间O(h)，h是树的高度。</p>
</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode105/LeetCode105.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode105/LeetCode105.py">Python</a></p>
</li>
</ul>
<hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  99    恢复二叉搜索树    难度：Medium</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/recover-binary-search-tree/">99. 恢复二叉搜索树</a></p>
<p><strong>思路：</strong></p>
<p>只需要找到错误的两个节点，将它们交换即可。</p>
<p>根据搜索二叉树左子节点的值&lt;根节点的值&lt;右子节点的值的特性，中序遍历后得到的数组必然是递增的，因此出现第一个节点（x）的值大于下一个节点（x+1）的值时，x节点就是要找的第一个错误节点，出现第二个节点（y-1）大于下一个节点（y）时，y节点就是要找的第二个错误节点，交换它们的值就可以修复二叉搜索树。</p>
<p><strong>细节：</strong></p>
<ol>
<li>需要一个节点指针<code>preNode</code>记录前一个节点，初始值为最小整数；</li>
<li><code>firstNode</code>节点记录第一个错误节点，<code>secondNode</code>记录第二个错误节点，初始值都为null；</li>
<li>中序遍历递归的基线条件：<code>root == null</code>；</li>
<li>当<code>firstNode == null</code>时，如果出现当前节点的值小于上一个节点<code>preNode</code>的值，则将<code>preNode</code>指针赋给<code>firstNode</code>；</li>
<li>当<code>firstNode != null</code>时，如果出现当前节点的值小于上一个节点<code>preNode</code>的值，意味着当前节点就是第二个错误节点，将<code>root</code>指针赋给<code>secondNode</code>；</li>
<li>记得将当前节点指针<code>root</code>赋给<code>preNode</code>。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode99/LeetCode99.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode99/LeetCode99.py">Python</a></p>
</li>
</ul>
<hr>
<h5 id="2021-6-13"><a href="#2021-6-13" class="headerlink" title="2021.6.13"></a>2021.6.13</h5><hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  剑指 Offer 26    树的子结构    难度：Medium</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/shu-de-zi-jie-gou-lcof/">剑指 Offer 26. 树的子结构</a></p>
<p><strong>思路：</strong></p>
<p>判断一棵树B是否是另一棵树A的子结构，只需要在树A中搜索是否包含树B的根节点，然后对于这个根节点，判断该子树的左右子节点在树A和树B中是否一致即可。</p>
<p><strong>细节：</strong></p>
<ol>
<li>遍历树A搜索树B的根节点时，采用前序遍历方法逐个比较；</li>
<li>前序遍历的基线条件：树A当前根节点为空或者树B当前根节点为空，不符合条件，返回false；</li>
<li>需要辅助函数来判断树B的结构和树A的子结构是否一致，使用递归来判断，也算一个前序遍历；</li>
<li>辅助函数的递归基线条件：<code>B == null</code>，树B的当前子节点为空，说明已经将树B遍历完都没有返回false，因此树B是树A的子结构，返回true；<code>A == null || A.val != B.val</code>，树A当前子节点为空但树B子节点不为空，或者子节点的值不相同，因此它们结构不一致，返回false；</li>
<li>时间复杂度：O(mn)，其中m和n分别为树A和树B的节点数，先前序遍历树A占用O(m)，后使用辅助函数前序遍历树B占O(n)；</li>
<li>空间复杂度：O(m)，最坏情况下，即树A退化为链表，且遍历至树A的叶子节点，此时递归调用栈深度为m。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/%E5%89%91%E6%8C%87Offer26/%E5%89%91%E6%8C%87Offer26.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/%E5%89%91%E6%8C%87Offer26/%E5%89%91%E6%8C%87Offer26.py">Python</a></p>
</li>
</ul>
<hr>
<h5 id="2021-6-14"><a href="#2021-6-14" class="headerlink" title="2021.6.14"></a>2021.6.14</h5><hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  226    翻转二叉树    难度：Simple</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/invert-binary-tree/">226. 翻转二叉树</a></p>
<p><strong>思路：</strong></p>
<p>无语了，一个贼拉简单的题被我想复杂了。开始甚至都想到什么反向后序遍历了（其实也没用），结果只需要遍历并记录一下左右子树，然后交换二者位置即可。</p>
<p><strong>细节：</strong></p>
<ol>
<li>递归基线条件：<code>root == null</code>，返回空值；</li>
<li>递归调用左子节点保存到<code>TreeNode left</code>，右子节点保存到<code>TreeNode right</code>；</li>
<li>交换左右子节点位置：<code>root.left = left; root.right = right;</code>；</li>
<li>返回值为<code>root</code>；</li>
<li>时间复杂度：O(n)，需要遍历树的每一个节点；</li>
<li>空间复杂度：O(n)，最坏情况下，即树退化成链表，递归调用栈需要占用n的空间。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode226/LeetCode226.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode226/LeetCode226.py">Python</a></p>
</li>
</ul>
<hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  101    对称二叉树    难度：Simple</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/symmetric-tree/">101. 对称二叉树</a></p>
<p><strong>思路：</strong></p>
<p>可采用双指针同步移动来判断左右子树是否完全对称，指针p向左子树遍历时，指针q向右子树遍历，递归地判断二者指向的节点值是否相等。</p>
<p><strong>细节：</strong></p>
<ol>
<li>递归基线条件：<code>p == null &amp;&amp; q == null</code>，说明遍历到叶子节点为止，左右子树是完全对称的，因此返回true；接着<code>p == null || q == null</code>，说明其中一个指针不为空的情况下，另一个指针为空，说明左右子树不对称，返回false；</li>
<li>直接在返回语句中判断二者指向的节点的值是否相等，以及进行向下遍历的操作；</li>
<li>时间复杂度：O(n)，将树的节点都遍历了一遍；</li>
<li>空间复杂度：O(n)，最糟情况下递归调用栈需要占用n的空间。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode101/LeetCode101.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode101/LeetCode101.py">Python</a></p>
</li>
</ul>
<hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  剑指 Offer 32    从上到下打印二叉树    难度：Medium</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-lcof/">剑指 Offer 32 - I. 从上到下打印二叉树</a></p>
<p><strong>思路：</strong></p>
<p>一层层打印二叉树即为二叉树的层序遍历，又称为二叉树的广度优先搜索（BFS），BFS常用队列的先入先出特性来实现。</p>
<p>只要按照从左到右的顺序将每一层的节点压入队列，然后保存节点的值并查找下一层子节点即可。</p>
<p><strong>细节：</strong></p>
<ol>
<li>使用while循环，循环的退出条件为：队列为空。说明二叉树已经遍历完毕。</li>
<li>由于需要以数组的形式打印，而数组的长度是不确定的，因此先使用一个列表缓存各节点的值。将队列中的第一个节点弹出，并将该节点的值保存到列表中；</li>
<li>如果该节点的左右子节点不为空，则分别将它们压入队列中；</li>
<li>将得到的列表转换为数组并返回；</li>
<li><strong>注意</strong>：用Python解题时，队列使用collections中的双端队列deque()，其popleft()方法可达到O(1)时间复杂度；列表list的pop(0)方法时间复杂度为 O(N)；</li>
<li>时间复杂度：O(n)，树的所有节点都被遍历了一遍；</li>
<li>空间复杂度：O(n)，使用了列表来缓存数据，占用n的空间；最坏情况下，当树为平衡二叉树时，最多有2/n个节点在队列中，因此使用O(n)大小的额外空间。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/%E5%89%91%E6%8C%87Offer32/%E5%89%91%E6%8C%87Offer32.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/%E5%89%91%E6%8C%87Offer32/%E5%89%91%E6%8C%87Offer32.py">Python</a></p>
</li>
</ul>
<hr>
<h5 id="2021-6-16"><a href="#2021-6-16" class="headerlink" title="2021.6.16"></a>2021.6.16</h5><hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  102    二叉树的层序遍历    难度：Simple</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">102. 二叉树的层序遍历</a></p>
<p><strong>思路：</strong></p>
<p>由于每一层的节点需要单独加入列表中打印，因此需要在将节点添加到列表前获取当前层数的节点数量，即当前队列中的节点数。然后使用for循环将那一层的节点一次性添加。</p>
<p><strong>细节：</strong></p>
<ol>
<li>while循环退出条件：队列为空；</li>
<li>弹出节点前，获取当前队列的元素个数，元素个数即代表该层有几个节点，根据节点数for循环遍历，并添加下一层的节点到队列中；</li>
<li>将该层遍历后得到的列表添加到输出列表中；</li>
<li>时间复杂度：O(n)，遍历了一遍所有节点；</li>
<li>空间复杂度：O(n)，最坏情况下队列中的节点数为2/n，因此占用O(n)大小的额外空间。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode102/LeetCode102.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode102/LeetCode102.py">Python</a></p>
</li>
</ul>
<hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  剑指 Offer 32    从上到下打印二叉树 III    难度：Medium</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof/">剑指 Offer 32 - III. 从上到下打印二叉树 III</a></p>
<p><strong>思路：</strong></p>
<p>在层序遍历逐层打印的基础上，根据当前层数决定输出节点值到链表中时是从左往右还是从右往左。</p>
<p><strong>细节：</strong></p>
<ol>
<li>while循环退出条件：队列为空；</li>
<li>记录当前层数，若当前为奇数层，将节点值添加到链表尾部；若为偶数层，将节点值添加到链表首部；</li>
<li>时间复杂度：O(n)，遍历了一遍二叉树；</li>
<li>空间复杂度：O(n)，最坏情况下队列中有2/n个元素。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/%E5%89%91%E6%8C%87Offer32/%E5%89%91%E6%8C%87Offer32-3.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/%E5%89%91%E6%8C%87Offer32/%E5%89%91%E6%8C%87Offer32-3.py">Python</a></p>
</li>
</ul>
<hr>
<h5 id="2021-6-17"><a href="#2021-6-17" class="headerlink" title="2021.6.17"></a>2021.6.17</h5><hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  113    路径总和 II    难度：Medium</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/path-sum-ii/">113. 路径总和 II</a></p>
<p><strong>思路：</strong></p>
<p>由于是求从根节点开始到叶子节点的路径，因此使用深度优先搜索（DFS），个人感觉也能算回溯算法。在前序遍历位置将节点值入队列，后序遍历位置表示条件不满足，因此又将最后入队的节点值弹出队列。</p>
<p><strong>细节：</strong></p>
<ol>
<li>递归基线条件：当前节点为空；</li>
<li>前序遍历位置，当前节点值入队，将目标值减去当前节点值；</li>
<li>判断当前节点是否是叶子节点，即其左右子节点都为空，并判断当前目标值是否为0，若满足条件，则表示路径和即为目标值，队列中的节点值即为满足条件的路径。将当前队列添加到结果链表中；</li>
<li>不满足条件则继续遍历左右子节点；</li>
<li>后序遍历位置表示已经遍历完毕，且不满足条件，因此弹出最后一个入队的节点值，回溯到上一个节点继续遍历；</li>
<li>时间复杂度：O(nlogn)，需要遍历每一个节点（O(n)），并且递归的过程中，需要将一条路径包含的节点值打印（O(logn)），因此总的时间复杂度为O(nlogn)；</li>
<li>空间复杂度：O(n)，最坏情况下，递归调用栈占用O(n)的额外空间。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode113/LeetCode113.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode113/LeetCode113.py">Python</a></p>
</li>
</ul>
<hr>
<h5 id="2021-6-18"><a href="#2021-6-18" class="headerlink" title="2021.6.18"></a>2021.6.18</h5><hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  剑指 Offer 54    二叉搜索树的第k大节点    难度：Simple</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/er-cha-sou-suo-shu-de-di-kda-jie-dian-lcof/">剑指 Offer 54. 二叉搜索树的第k大节点</a></p>
<p><strong>思路：</strong></p>
<p>最开始是想到使用中序遍历将搜索二叉树的节点值都保存到数组列表里，然后根据k的值计算索引，从而在列表中查到需要的节点值。但是后来看解答发现可以使用倒序的中序遍历，即先遍历右子节点然后根节点然后左子节点，这样可以不需要将树全部遍历一遍，只要在第k大的值出现时退出递归即可。</p>
<p><strong>细节：</strong></p>
<ol>
<li>递归基线条件：当前节点为空；</li>
<li>使用倒序的中序遍历，先判断当前k值是否为0，为0则表示上一次遍历已经找到了第k大的值，因此退出递归；k值自减1；在k自减1之后判断k此时是否为0，为0则表示当前节点的值即为第k大的值，使用一个全局变量记录当前值；</li>
<li>注意k值也必须是全局变量；</li>
<li>时间复杂度：O(n)，由于是中序遍历，最坏情况下，树退化成链表，无论k值多大，递归深度都是n；</li>
<li>空间复杂度：O(n)，最坏情况同上；</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/%E5%89%91%E6%8C%87Offer54/%E5%89%91%E6%8C%87Offer54.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/%E5%89%91%E6%8C%87Offer54/%E5%89%91%E6%8C%87Offer54.py">Python</a></p>
</li>
</ul>
<hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  104    二叉树的最大深度    难度：Simple</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/maximum-depth-of-binary-tree/">104. 二叉树的最大深度</a></p>
<p><strong>思路：</strong></p>
<p>自己写的时候是用了个局部变量记录当前的深度，然后还判断了当前节点是否是叶子节点，最后还比较了当前叶子节点的深度值和全局的最大深度值，取较大的那个作为答案；没想到看大佬写的获取深度就俩行：<code>int left = traverse(root.left);    int right = traverse(root.right);</code>，分别获取左右子树的深度，看来还是我的递归理解不到位啊。</p>
<p><strong>细节：</strong></p>
<ol>
<li>递归基线条件：当前节点为空；</li>
<li>分别获取左右子树深度，返回值为当前节点的左右子树中更大的值，再加上1才表示当前节点的深度；</li>
<li>时间复杂度：O(n)，需要遍历所有节点；</li>
<li>空间复杂度：O(n)，最坏情况下递归栈深度占用O(n)额外空间。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode104/LeetCode104.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode104/LeetCode104.py">Python</a></p>
</li>
</ul>
<hr>
<h5 id="2021-6-19"><a href="#2021-6-19" class="headerlink" title="2021.6.19"></a>2021.6.19</h5><hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  110    平衡二叉树    难度：Simple</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/balanced-binary-tree/">110. 平衡二叉树</a></p>
<p><strong>思路：</strong></p>
<p>我自己的解法是先使用后序遍历自底向上地计算左右子树的深度，然后在过程中不断比较左右子树的深度差，如果深度差的绝对值大于1，则将答案（全局变量）记录为False，否则继续遍历，答案的初始值是True。然后官方的解法是省去了这个记录答案的变量，如果左右子树深度差绝对值大于1或者当前节点的左右子树深度有任一个是-1（说明已经深度差大于1），则返回-1；然后主方法的返回值直接判断递归方法返回值是否大于等于0即可。</p>
<p><strong>细节：</strong></p>
<ol>
<li>递归基线条件：当前节点为空；</li>
<li>如果左右子树深度差绝对值大于1，或者当前节点的左右子树深度有任一个是-1，返回-1；</li>
<li>递归的返回值为当前节点的深度：左右子树深度中较大的那个 + 1；</li>
<li>返回并判断递归结果是否大于等于0；</li>
<li>时间复杂度：O(n)，最坏情况下树退化成链表；</li>
<li>空间复杂度：O(n)，同上</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode110/LeetCode110.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode110/LeetCode110.py">Python</a></p>
</li>
</ul>
<hr>
<h5 id="2021-6-20"><a href="#2021-6-20" class="headerlink" title="2021.6.20"></a>2021.6.20</h5><hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  236    二叉树的最近公共祖先    难度：Simple</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></p>
<p><strong>思路：</strong></p>
<p>可以自底向上地，即后序遍历二叉树，搜索给定的两个节点。如果当前节点的左子树为空，说明左子树中不包含给定的两个节点，因此返回当前节点的右子树搜索结果；同理，若当前节点的右子树为空，返回左子树搜索结果；如果当前节点的左右子树都不为空，说明给定的俩节点分别位于当前节点的左右子树上，因此当前节点就是它俩的最近公共祖先。</p>
<p><strong>细节：</strong></p>
<ol>
<li>递归基线条件：当前节点为空，或当前节点为给定节点的其中一个，返回当前节点；</li>
<li>当前节点的左子树为空，返回右子树搜索结果；当前节点的右子树为空，返回左子树搜索结果；</li>
<li>二者都不为空，返回当前节点；</li>
<li>时间复杂度：O(n)，所有节点都会被遍历一次；</li>
<li>空间复杂度：O(n)，最坏情况下二叉树退化为链表，递归调用栈占用O(n)的空间。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode236/LeetCode236.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode236/LeetCode236.py">Python</a></p>
</li>
</ul>
<hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  235    二叉搜索树的最近公共祖先    难度：Simple</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/lowest-common-ancestor-of-a-binary-search-tree/">235. 二叉搜索树的最近公共祖先</a></p>
<p><strong>思路：</strong></p>
<p>原理和上一题差不多，不过可以利用二叉搜索树“左子树所有节点的值都小于根节点的值小于右子树所有节点的值”的特性，从根节点开始遍历，如果当前节点的值分别与给定节点的值相减后的乘积小于等于0，则说明两个给定节点分别位于当前节点的两侧，因此返回当前节点；否则比较当前节点和任一节点的值，判断两个给定节点位于左子树还是右子树，然后相应地进行遍历。</p>
<p><strong>细节：</strong></p>
<ol>
<li>递归基线条件：当前节点为空，或当前节点的值分别与给定节点的值相减后的乘积小于等于0；</li>
<li>如果当前节点的值大于给定节点的值，则往左子树遍历；否则往右子树遍历；</li>
<li>时间复杂度：O(n)，最坏情况下，二叉树退化成链表；</li>
<li>空间复杂度：O(n)，同上。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode235/LeetCode235.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode235/LeetCode235.py">Python</a></p>
</li>
</ul>
<hr>
<ul>
<li><p><input checked="" disabled="" type="checkbox">  297    二叉树的序列化与反序列化    难度：Hard</p>
<p><strong>题目描述：</strong></p>
<p><a href="https://leetcode-cn.com/problems/serialize-and-deserialize-binary-tree/">297. 二叉树的序列化与反序列化</a></p>
<p><strong>思路：</strong></p>
<p>个人感觉这题挺变态的，反正我自己是写不出来。过程其实还算好理解，就是很多细节容易把人逼疯。</p>
<p>方法有很多种，我尝试的是直接前序遍历二叉树，遇到空节点的时候标记为“#”，否则继续遍历并序列化节点；反序列化时需要先将字符串中的逗号去掉，然后转换成链表，从左到右遍历链表来重构二叉树。</p>
<p><strong>细节：</strong></p>
<ol>
<li>序列化过程中字符串的构建需要特别注意，左右子树的遍历结果以及特殊符号都要做加法；</li>
<li>反序列化时，字符串去逗号之后是变成一个字符串数组；转换成链表可以直接<code>List&lt;String&gt; tree = new LinkedList&lt;String&gt;(Arrays.asList(nodes));</code>；</li>
<li>链表的遍历要边访问边删除；</li>
<li>时间复杂度：O(n)，在两个函数中都是需要遍历一次二叉树；</li>
<li>空间复杂度：O(n)，递归调用栈最坏情况下占用O(n)空间。</li>
</ol>
<p><strong>题解：</strong></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode297/LeetCode297.java">Java</a></p>
<p><a href="https://gitee.com/starkn1ght/algorithms/blob/master/LeetCode297/LeetCode297.py">Python</a></p>
</li>
</ul>
<hr>
]]></content>
      <categories>
        <category>Tree</category>
      </categories>
  </entry>
  <entry>
    <title>Quick Sort</title>
    <url>/2021/03/29/Quick-Sort/</url>
    <content><![CDATA[<h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>和归并排序类似，快速排序也采用了分治法的思想。</p>
<ul>
<li>分解：对于一个给定的数组<code>nums</code>，每一轮都将数组拆分为两部分，使得基准元素左边的所有元素都小于等于基准元素，右边的所有元素都大于等于基准元素，直到不可拆分为止；</li>
<li>解决：通过递归调用快速排序，对拆分后的子数组进行排序；</li>
<li>合并：由于子数组都是原址排序的，因此不需要合并操作。</li>
</ul>
<p>时间复杂度：<code>O(NlogN)</code></p>
<p>空间复杂度：<code>O(1)</code></p>
<h3 id="基准元素的确定"><a href="#基准元素的确定" class="headerlink" title="基准元素的确定"></a>基准元素的确定</h3><p>确定基准元素的最简单方法是每次都取数组第一个元素作为基准值，但是这样可能出现的最坏情况将使时间复杂度变为<code>O(N^2)</code>。因此开始排序前可以先打乱数组顺序，尽量降低最坏情况出现的可能性。</p>
<h3 id="双端指针法"><a href="#双端指针法" class="headerlink" title="双端指针法"></a>双端指针法</h3><p>确定了基准元素之后（为了简便，直接取数组的第一个元素），需要对元素进行大小检查和交换。</p>
<p>分别定义一个左指针<code>left</code>指向基准元素，和一个右指针<code>right</code>指向数组的末尾。当<code>left</code>指向的元素值小于或等于基准元素时，<code>left</code>持续右移，当<code>left</code>指向的元素大于基准值时，<code>left</code>指针停止移动；</p>
<p>当<code>right</code>指向的元素大于基准值时，<code>right</code>持续左移，直到遇到小于等于基准值的元素，停止移动；</p>
<p>若当前<code>left</code>和<code>right</code>不相等，交换<code>left</code>和<code>right</code>指针指向的元素，进入下一次循环。</p>
<p>具体实现：<a href="https://gitee.com/starkn1ght/algorithms/blob/master/Sort/Sort/QuickSort.cs">C#</a></p>
<h3 id="单端指针法"><a href="#单端指针法" class="headerlink" title="单端指针法"></a>单端指针法</h3><p>首先需要声明一个<code>mark</code>指针，代表小于基准值的区域边界，确定了<code>mark</code>指针的最终位置后，只需要将基准元素和<code>mark</code>指针所指的元素交换位置即可。</p>
<p>先将<code>mark</code>指针指向基准值的初始位置，然后从基准元素下一位开始遍历数组，比较当前元素与基准值的大小，如果比基准值大，则什么都不做，继续下一次循环；如果比基准值小，则使<code>mark</code>指针右移一位，并将当前元素与<code>mark</code>指针所指的元素交换位置，这样可以确保比基准值小的元素一直在左边，而比基准值大的元素一直在右边。</p>
<p>直到遍历结束，<code>mark</code>指针的位置就是基准元素应该在的位置，交换<code>mark</code>指针指向的元素和基准元素即可。</p>
<p>和双端指针法相比，单端指针法的代码量大大减小了。</p>
<p>具体实现：<a href="https://gitee.com/starkn1ght/algorithms/blob/master/Sort/Sort/QuickSort.cs">C#</a></p>
]]></content>
      <categories>
        <category>Sorting and Trees</category>
      </categories>
  </entry>
  <entry>
    <title>【MiniProgram】扫文记录【DevLog01】</title>
    <url>/2021/05/24/%E3%80%90MiniProgram%E3%80%91%E6%89%AB%E6%96%87%E8%AE%B0%E5%BD%95%E3%80%90DevLog01%E3%80%91/</url>
    <content><![CDATA[<h3 id="Vant-Popup组件滚动穿透问题"><a href="#Vant-Popup组件滚动穿透问题" class="headerlink" title="Vant-Popup组件滚动穿透问题"></a>Vant-Popup组件滚动穿透问题</h3><p>Popup弹窗之后滚动页面时，底层的页面也会随着滚动。</p>
<p>尝试在底层页面的<code>&lt;view&gt;</code>中添加<code>style=&quot;&#123;&#123;show? 'height:100vh; overflow:hidden' : ''&#125;&#125;&quot;</code>，能解决滚动穿透问题，但是底层页面的列表将回滚到顶端。</p>
<p>使用<code>style=&quot;&#123;&#123;show? 'position:fixed;' : ''&#125;&#125;&quot;</code>会得到同样的结果。</p>
<p>若在弹窗的最外层<code>&lt;view&gt;</code>添加属性<code>catchtouchmove=“preventTouchMove”</code>，弹窗包含的<code>scroll-view</code>组件将无法滚动。</p>
<p><strong>此问题暂时没有找到有效的解决方式。</strong>暂时在底层的最外部<code>&lt;view&gt;</code>添加了<code>class=&quot;&#123;&#123;show? 'preventMove' : ''&#125;&#125;&quot;</code>，并在wxss文件中添加了如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.preventMove</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>点击弹窗以及滑动弹窗时，根页面不再随着滚动，然而弹窗关闭后，根页面将回滚到最顶端。</p>
<p><strong>新发现</strong>：解决了弹窗中滚动不流畅的问题之后，去掉上述代码，弹窗中的内容没有滑动到最顶端或最底端时，根页面不会再随着滚动，只有当弹窗中的内容到达最底端或最顶端，再往相同方向滑动，根页面才会随着滚动。</p>
<p>此问题勉强算是初步解决。</p>
<h4 id="2021-6-29-完美解决"><a href="#2021-6-29-完美解决" class="headerlink" title="2021.6.29    完美解决"></a>2021.6.29    完美解决</h4><p>今天突然发现了完美解决的方法，好感动。</p>
<p>经过了一系列无效的斗争之后，我发现只要在弹出层加上 <code>catchtouchmove=&quot;&#123;&#123;true&#125;&#125;&quot;</code> ，然后在 js 文件中整个空的 <code>true()</code> 函数就可以了。不可以把 <code>true</code> 换成其他名字，换了的话又是无效的，暂时不知道这个是什么原理。</p>
<h3 id="隐藏-优化scroll-view的滚动条"><a href="#隐藏-优化scroll-view的滚动条" class="headerlink" title="隐藏/优化scroll-view的滚动条"></a>隐藏/优化scroll-view的滚动条</h3><p>添加如下样式：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">scroll-view ::-webkit-scrollbar &#123;</span><br><span class="line">  width: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">color</span>: transparent;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>真机上运行后发现滚动条只是由粗变细，并没有消失，但样式确实有优化，不确定是否和机型有关。</p>
<h3 id="Vant-Popup弹窗中的scroll-view滚动不流畅的问题"><a href="#Vant-Popup弹窗中的scroll-view滚动不流畅的问题" class="headerlink" title="Vant-Popup弹窗中的scroll-view滚动不流畅的问题"></a>Vant-Popup弹窗中的scroll-view滚动不流畅的问题</h3><p>在控制scroll-view的类中添加如下代码即可解决：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">overflow</span>: auto;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">90%</span>;</span><br></pre></td></tr></table></figure>



<h3 id="从云数据库拉取的数据的换行无法显示问题"><a href="#从云数据库拉取的数据的换行无法显示问题" class="headerlink" title="从云数据库拉取的数据的换行无法显示问题"></a>从云数据库拉取的数据的换行无法显示问题</h3><p>直接在数据库后台手动添加的数据无法保留正确的换行格式，再者因为我懒（。）暂时不想使用表单上传数据，因此需要考虑直接导入JSON或CSV格式的文件。</p>
<h4 id="尝试JSON导入"><a href="#尝试JSON导入" class="headerlink" title="尝试JSON导入"></a>尝试JSON导入</h4><p>导入时发生错误：<code>invalid character &#39;\n&#39; in string literal</code>，换行符<code>\n</code>是违法的，因此需要进行转义等处理，我觉得太麻烦，所以就不用JSON了。</p>
<h4 id="尝试CSV导入"><a href="#尝试CSV导入" class="headerlink" title="尝试CSV导入"></a>尝试CSV导入</h4><p>导入数据库后数据乱码，使用NotePad将数据编码转为UTF-8即可解决。</p>
<p>由于CSV只支持String和Number类型，因此需要将原来的Tags数组改为四个String类型的数据，方便前端读取。</p>
<p>弱智是弱智了点哈，但至少简单粗暴。</p>
<h3 id="关于TabBar"><a href="#关于TabBar" class="headerlink" title="关于TabBar"></a>关于TabBar</h3><p>自定义Tabbar太麻烦，而且容易出问题。小程序自带的Tabbar功能又非常鸡肋，连高度、层级和背景透明度都改不了，着实很辣鸡。</p>
<p>顶部Tabbar看着还行，先凑合用吧。</p>
<h3 id="关于页面淡入效果"><a href="#关于页面淡入效果" class="headerlink" title="关于页面淡入效果"></a>关于页面淡入效果</h3><blockquote>
<p>参考：<a href="https://blog.csdn.net/weixin_42917830/article/details/81701125">微信小程序-实现元素渐入渐出动画效果-封装方法</a></p>
</blockquote>
<p>可在app.js中添加如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//渐入</span></span><br><span class="line">  slowlyShow: <span class="function"><span class="keyword">function</span> (<span class="params">that, param, opacity, duration</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> animation = wx.createAnimation(&#123;</span><br><span class="line">      duration: duration,</span><br><span class="line">      timingFunction: <span class="string">&#x27;ease&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    animation.opacity(opacity).step();</span><br><span class="line">    <span class="comment">//将param转换为key</span></span><br><span class="line">    <span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;&#x27;</span> + param + <span class="string">&#x27;&quot;:&quot;&quot;&#125;&#x27;</span>;</span><br><span class="line">    json = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">    json[param] = animation.export();</span><br><span class="line">    <span class="comment">//设置动画</span></span><br><span class="line">    that.setData(json);</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">//向上滑动动画</span></span><br><span class="line">  slideUpShow: <span class="function"><span class="keyword">function</span> (<span class="params">that, param, px, opacity, duration</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> animation = wx.createAnimation(&#123;</span><br><span class="line">      duration: duration,</span><br><span class="line">      timingFunction: <span class="string">&#x27;ease&#x27;</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    animation.translateY(px).opacity(opacity).step();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将param转换为key</span></span><br><span class="line">    <span class="keyword">var</span> json = <span class="string">&#x27;&#123;&quot;&#x27;</span> + param + <span class="string">&#x27;&quot;:&quot;&quot;&#125;&#x27;</span>;</span><br><span class="line">    json = <span class="built_in">JSON</span>.parse(json);</span><br><span class="line">    json[param] = animation.export();</span><br><span class="line">    <span class="comment">//设置动画</span></span><br><span class="line">    that.setData(json);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>然后在对应页面的.js文件的<code>onShow</code>方法中添加如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line"><span class="comment">//渐入</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  app.slowlyShow(that, <span class="string">&#x27;indexFadeIn&#x27;</span>, <span class="number">1</span>, <span class="number">800</span>)</span><br><span class="line">&#125;, <span class="number">800</span>);</span><br></pre></td></tr></table></figure>

<p>在<code>onHide</code>方法中添加如下代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重置透明度</span></span><br><span class="line"><span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">app.slowlyShow(that, <span class="string">&#x27;indexFadeIn&#x27;</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<p>添加滑动效果的方法与上述步骤一致。</p>
<p>真机测试的时候页面切换的一瞬间可能出现内容残留，不确定是不是和机型或者微信版本有关。</p>
]]></content>
      <categories>
        <category>MiniProgram DevLog</category>
      </categories>
  </entry>
  <entry>
    <title>【多串生贺】晚来的信</title>
    <url>/2021/04/05/%E3%80%90%E5%A4%9A%E4%B8%B2%E7%94%9F%E8%B4%BA%E3%80%91%E6%99%9A%E6%9D%A5%E7%9A%84%E4%BF%A1/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="73442a2dd8486afb832354c8a529e33ad2bb1654cbd1e69132a83c1fcca2aa4f">e60a61a1055049834be66d4bcabc5233a5e82c144b177b8165b5b8f00787765b47ac3cd361796a8a34005bf378db506fc36e61f9d9919c8b9d2b0a9b93d6dd0ccf8faa837d393679fd8ad9eb47e81cdeaf58829bb770dd8ff5b4d0e9d167c6a8f7d8e47a87ed0666b327e5828040c8c0f91faa3540a036288876436f984463f2cb5043ca47f5f831de35969b4e4ea357d4a9d0d0555706d1dd28f201156d381cf367f93bbe1f50091f50ec959b28a07402ea953f2047851d0a173542eb83faf5cd1550bd8afa8e24240583a3e06005e33aeb9bab8708d150c846909c50af6305b2388af89e10e65c79622e3ebe568f482f6c2bd9370284e2ecab2d944b566ce46dc5a8e156cf166245aeae14ec2c4cb266e03ee3c58e1ca71d85e65704edd4ed59fdf6a33a359ce3bf98b471facdd18c37acd64edb414dc2e6c504c67dece7f52ddd3452622d7ed0c25d83d54b65faff73f6195780c1d8da9ea48928f9792661c395d7a8fe793f01e6488fff2c66501fb25c0c551862492869fea7f397889cc786cedd0cbbc6edcb0372ed675b8123b1f8931079626a09d1ef62c5d477507dbd020ca89a0ff97a33775a0742dd9619c0673b45f64b66ab6eb5ff363b01a160bd92f80eef9836b6e931970172122548a547e2ed2c578f5cbf0f64e4d27d128bb63a187bd1fb7a4cb97423d2d6c6b7f382da75ef8092c2c5510addf52b21396bc17518fa9715e5a49534499c93c8709d9807649628ff63c5a89bb928ad535ca553800a49c6f6a3b1d2dd3319461f91d137c378d49baa0bdd8f25ab7ad3757ed1c1c37566c5bc77d9e3090c83f670631603e216487019db8160d0e462e2abb646e0dcfc5946a2011b3487eb1cbbf9ffea8abd9cdbd2afd9f9ecbb2339cb150208c35371f981c166be185494dc711f9635cf4115fc69dcae82797b0c72478c5c8d2a45fad265daeb1441196898c0f7243c40d067a30ef88596807743a1470445682bb3046e1839d9d30d7c469384dfdef0a30534bb406937a9501a47014b6bcff2753cb4a3419242d18020a2da290f3f0400b374de1827f33d41a36608fecb138f992bf5be73fbe87520e64f5180bf5aa70c839342ad3a861a13d2c1348ec16aaa7750c404661178fd06e5f6dbb03c4db9d1a41ba4a32f7d4da5df5aba2b5e0bc5ca2f902ffd8d6ccdc5b2d3be526d0e4bd3ad8fcb39843488cbb7ff45a9ea2087cfb4fc2b6db6fba8dce3ead20410b38907c229e544e7f0ffe1ae1c5d8122cbbb2db7b8699e9c05e29883f1121bc811b02857f2a5a419b3320dd3df574682960fb783fb38710a8634b364abd24f06d711b86164b874c314e524ec026a358107bbe16d12e4a9d9c4ae41b915b58afdcc69a6fce0f45ea5b104d586d621387cc43423d039e10f17c8619ae86c8fb8c578d2e04e9b36485b28ecc8d1202570932ac6ac5d5d99b63dba13d4914c2316d5df3688cf28ba4082f09d5667a0b6f3df3dcd3061b036f2513a81d938be749e5c1c9d3821914ba0f868e734e1f73273933555365c7b05d955f51ae3a9f75c7f5fa1235e3f5c32fb735e4771428d3c168e1fa7c773058246114817f32276b6c5340fe9782233573e30ae7268e3073d878310c42e3f80aa16f94f384bc53ffd19c925b953d2eae5e6a869640e280d7c2fd3117b82c16fca9a09ed185ef08167a5064e80e0e28512cee29bd2aa92587ac99c8919b413b5484418a100913e5fb5799ad6320e48a6c692320047377f7e93ed814486e3e1433248e404bcec5c61bfe14bb799302b66e1fbe2a28b441f4108bc70f2940a1beb9cbe3776c0f0341c9c3aa88897f8fe01363c7d595f9a4b3a6600cd8c552b1b214a4aa5954ad634d007fe56740a511586c27c9f9cd70fa9e1f21d97b13aecc571a2b98ab0a90c643e2e92bfb7979f90d1bf147a206f8871c354dac388f765d2c2865d98fc136d087af65c4ba23fc2dc700a89feab5de255e9a1d95559e5cbf34b42cb3a539327eb801863790cc607ad0f6f87e478bd9ae8e3396b61078ef8da9ade4f4b70845eaa6d8dd940b85672e66249b1928560765d19d20215dcddb4e66b56af9e8df58df6b958006bf4fbaff38c7b776538df8fac21088298643d2c95f1644817a756da9ae1249cd8b5a098e80fc080d9d22832bac027734cf7afa5630143a0f90049f73ec94117843292804899aa4b2969a10779a88b9b16405381834361a4930720c01b975edab3e91ccd3e696b96c3a6004a1e657c2d32a72a19115e3252b81bbb6654bdee4241fc767e74d12877a7ce3b56f017b1c0b441300e6eca05d58418c8c24e01274bde6b656c20c793a61607d8e9159daca82f58fb74dfce6412f2ec6484bddd54df335ffa3673960940deb005a1761bd4d937ad0e0bec2babe2f0e212f164cb72bbec3e23e929e4f4b988203cd58fa50ccadadd776dee6099cd7ad6efec12ebf93384f70d4e7347eb1e68fe3cb205e9fa9f3add251a4ed7461f3b77946034c14ca8a12075e469108981c84165a8f3873ff093ce2fa3bef64758874a70a534a135375cdb4444e8d0e3c54d60134162e4d4c82de2cb5212e2dc5d652f55a4cceb704d60c1948dc2b6730fa12a9d598f0db5bebe37006caf79108020a80655104d704004cf2cacaf151e18df6e46364bbf318eca6c1cc7d8c8753a7bdb70be8b0f29630e033d7ade91eadf39a807a64f5bbd606dd84c3b8f441f2770151023a565e87bf5cc34381e6d18afae5975080e5c1c6a14ccfc9c22c758b9c703951a6d37a24c957fb44ea21b46a0f419951292d7d02fd45100f1838d8f8786f6544e4e455cb11ac001b4a968d0f91fb27e9f91bf23eb060bc2eb29452e055312699c6db81383fc1ed93e45bd0a73d5915210e686860bc15d3fb0cd100c9128315a92bcfd8a08287e18c7d7d79e31d41a9647676d19c521966fb4bff5ac8469d8443c05f814b7cf709cd7d17f6c0a78b28694977d675ccbc9be262ea2afbfd4037abaea1df40a47b88e7685186ffb1f2f7757bb2d5e2818428d2907847e65497f2a39e7c04313c748a7a7408ad105a941f6469e6514d1b65599f8a2d796b9126e86a721d5f8952a0058492a2c7437052feee24425f6fd57031e912c3f4031df4d39cef588eb33df06d99504972012e60bd57c75e7e4a47a0c4b6a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>【MiniProgram】扫文记录【DevLog02】</title>
    <url>/2021/05/25/%E3%80%90MiniProgram%E3%80%91%E6%89%AB%E6%96%87%E8%AE%B0%E5%BD%95%E3%80%90DevLog02%E3%80%91/</url>
    <content><![CDATA[<h3 id="关于动效"><a href="#关于动效" class="headerlink" title="关于动效"></a>关于动效</h3><p>之前做的动画效果并没有完美达到预期，预期效果应该是列表的每一项接连出现的，然而尝试了很多种方法还是没整出来，我放弃了。没有基础还是太勉强了。</p>
<blockquote>
<p><a href="https://www.wxapp-union.com/portal.php?mod=view&aid=5201">微信小程序-渐入渐出动画效果实现</a></p>
</blockquote>
<p>这个大佬虽说有做到我预期的那种效果，但是我并没有搞明白他的<code>transData</code>变量指的是什么。如果说是一个组件列表的话，我尝试了各种方法根本没办法获取到前端的组件列表，如果是自定义组件那也应该差别不大才对。总之可能是有什么地方被我忽略了。</p>
<p>暂时先把这个功能放一放好了。</p>
<h5 id="2021-05-29-草（中日双语）！我成功了！！！"><a href="#2021-05-29-草（中日双语）！我成功了！！！" class="headerlink" title="2021/05/29    草（中日双语）！我成功了！！！"></a><strong>2021/05/29    草（中日双语）！我成功了！！！</strong></h5><p>这几天有事没事还是会思考到底怎样才能达到预期效果，然后今天又回忆了一下上面那个大佬的写法，心想该不会是要把动画直接捆绑到<code>recordList</code>数组上吧，然后在数据库加上了<code>animation</code>这个字段准备试一下。</p>
<p>因为在wxml文件里用的是<code>wx:for</code>循环数据列表，所以动画字段捆绑到数据列表的话就能直接给<code>view</code>标签的<code>animation</code>样式赋值<code>&#123;&#123;item.animation&#125;&#125;</code>了。至于js文件，刚开始还是照之前的在<code>onShow</code>方法中赋值，结果动画无效，检查了一下，由于<code>recordList</code>数据集合是通过云函数异步获取的，所以在<code>onShow</code>方法开始运行的时候，数据可能还没有请求完毕，导致<code>recordList</code>还是空的。于是就把赋值挪到了<code>wx.cloud.callFunction</code>里，这样可以保证动画是在数据获取完毕后设置的。但是<code>onShow</code>方法里照样需要设置动画，因为小程序加载完毕后通过TabBar切换页面只会调用<code>onShow</code>和<code>onHide</code>了。</p>
<p>真机运行的时候发现第一次切换到记录页面不会运行动画，猜测可能是<code>onShow</code>方法<code>wx.cloud.callFunction</code>方法运行完毕的顺序不可控，导致动画运行异常了。于是分别加了个定时器，再给<code>onShow</code>方法赋值操作的外层加了个判断：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加上判断之后，一般来说第一次切换到该页面，判断里的操作就不会运行了。</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">this</span>.data.recordList.length != <span class="number">0</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其余核心代码如下：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给每一项设置动画</span></span><br><span class="line">        <span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="built_in">this</span>.data.recordList.length; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">              [<span class="string">&#x27;recordList[&#x27;</span> + i + <span class="string">&#x27;].animation&#x27;</span>]: app.slideUpShow(that, <span class="string">&quot;listSlideUp&quot;</span> + i, <span class="number">0</span>, <span class="number">1</span>, <span class="number">800</span>, (i + <span class="number">1</span>) * <span class="number">200</span>)</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;, <span class="number">300</span>);</span><br></pre></td></tr></table></figure>

<p>当然app.js里的方法也有部分修改：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//修改后</span></span><br><span class="line"><span class="keyword">let</span> params = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">params = animation.export();</span><br><span class="line"><span class="keyword">return</span> params;</span><br><span class="line"></span><br><span class="line"><span class="comment">//修改前</span></span><br><span class="line"><span class="comment">// //将param转换为key</span></span><br><span class="line"><span class="comment">// var json = &#x27;&#123;&quot;&#x27; + param + &#x27;&quot;:&quot;&quot;&#125;&#x27;;</span></span><br><span class="line"><span class="comment">// json = JSON.parse(json);</span></span><br><span class="line"><span class="comment">// json[param] = animation.export();</span></span><br><span class="line"><span class="comment">// //设置动画</span></span><br><span class="line"><span class="comment">// that.setData(json);</span></span><br></pre></td></tr></table></figure>

<p>最终效果还是比较丝滑的，没想到能被我给试出来，满意了。</p>
<p>不过我现在在思考这种方法会不会被之后的功能影响，比如说上拉加载更多项、搜索之类的。虽然我也不一定会加这些功能就是了。</p>
<h5 id="2021-06-04-有一个新发现"><a href="#2021-06-04-有一个新发现" class="headerlink" title="2021/06/04    有一个新发现"></a><strong>2021/06/04    有一个新发现</strong></h5><p>今天又想了想，按照我之前的做法，需要在云数据库里添加一个<code>animation</code>空字段，总觉得这一步是不对劲的。</p>
<p>于是猜测是不是<code>setData</code>会帮我直接给后端的数据集合添加一个<code>animation</code>字段，尝试了一下删除数据库里的字段，发现动画依然有效，看来这个猜测被证实了。<code>setData</code>牛逼！</p>
<h3 id="关于云数据库的-id字段"><a href="#关于云数据库的-id字段" class="headerlink" title="关于云数据库的_id字段"></a>关于云数据库的<code>_id</code>字段</h3><p>之前一直以为<code>_id</code>这个字段只可以让数据库自动生成，害得我还额外加了一个<code>index</code>，没想到今天偶然发现原来是可以自定义<code>_id</code>的。</p>
<p>然后如果是自定义<code>_id</code>，使用csv文件导入数据的时候勾选upsert方式也就可以生效了。</p>
<p>这样的话我之前那个每次更新数据都需要清除数据表重新导入数据的猜想就被推翻了，太棒了！！瞬间省了好多事。</p>
<h3 id="上拉加载更多"><a href="#上拉加载更多" class="headerlink" title="上拉加载更多"></a>上拉加载更多</h3><p>实现这个功能主要是得注意控制<strong>加载更多</strong>和<strong>已加载全部</strong>这两个参数，总之就是这俩不能同时出现，以及出现一段时间后必须消失。</p>
<p>虽然看起来有点意思，但是我在后台发现数据库的请求次数飙升……这大概是只有免费用户能体会到的烦恼吧。</p>
<h4 id="2021-6-29"><a href="#2021-6-29" class="headerlink" title="2021.6.29"></a>2021.6.29</h4><p>注意到一个细节：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> that = <span class="built_in">this</span>;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">let</span> total = <span class="built_in">this</span>.data.recordList.length;</span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">let</span> i = total - num; i &lt; total; i++) &#123;</span><br><span class="line">            <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">              [<span class="string">&#x27;recordList[&#x27;</span> + i + <span class="string">&#x27;].animation&#x27;</span>]: app.slideUpShow(that, <span class="string">&quot;listSlideUp&quot;</span> + i, <span class="number">0</span>, <span class="number">1</span>, <span class="number">400</span>, (i - total + num + <span class="number">1</span>) * <span class="number">200</span>)</span><br><span class="line">           &#125;);</span><br><span class="line">         &#125;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<p>设置动画的时候，因为添加了触底加载后 <code>i</code> 的值是一直在改变的，所以需要根据当前加载的数据的索引来设置动画。如果不改的话，页面数据渲染会变得非常慢。</p>
<p>真机测试的时候如果不加外层的延时，动画就不显示，暂时不知道为啥。</p>
<h3 id="弹窗内容的位置问题"><a href="#弹窗内容的位置问题" class="headerlink" title="弹窗内容的位置问题"></a>弹窗内容的位置问题</h3><p>每次点开一项记录之后，弹窗的内容位置可能是不定的，个人猜测是 scroll-view 组件没有重置位置导致的。</p>
<p>果然，在组件上添加 <code>scroll-top=&quot;&#123;&#123;backToTop&#125;&#125;&quot;</code> 之后再在弹窗关闭的时候赋值 0 就可以了！</p>
]]></content>
      <categories>
        <category>MiniProgram DevLog</category>
      </categories>
  </entry>
  <entry>
    <title>一个失眠夜</title>
    <url>/2021/04/05/%E4%B8%80%E4%B8%AA%E5%A4%B1%E7%9C%A0%E5%A4%9C/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="28eec50f57289547bfb1fe3786add3f872569d7856a7273dd2c209b9bf93ec21">e60a61a1055049834be66d4bcabc52337624fc5041a8e9cabda9f7f7d6627f393f1e3b80df0fbe737ec8f10844213d2bafb5f7468d7c10014f407a3d46cbceed22e0c856ec783aefe3e4139510585e9b68b135ba6d0be487a0d9368f48a59bbbf272d89ac8c3a6cbe28faf29725b26f57b78c350cb5cd3679edef575a0a31baea94c75a2e18a770c418a17c5f49417d1da2059e302aea52a349cceabffe091614de45e9f856fc9556ac2138706266b13c38dc6dbca66719bf85957b84df8fc19d2026e9fa6d09c95b187894fec0da132295ed9b16d7938437ba857806858bc3eb14736b79ab3e653e30224927120987ebbf2a722322e0d0457bce1e3123e14eeed9a0607f622316f952b6397574148378359c882e11110b44cd00f9b94284666e689b013442fbe4a140d833298f93929d28e0c4f7f5a1f4958a6cdf86791ded30806e9bc7b04dc8a92dbcf299fafadefa22419802da878f9ec146cec08a35fa99aa063ecea0ead9d1347d2034f3711f960d5000b76f45f3204b306d896cf0c077633012846d8221f92cfd191ae79b60be1210e0837c8c0a111fb99f027a1f565b7d134c1cb9cc2ed46f9672b3a8ac8c932758ee8a3bd6cb420d1f68813921b7cb5266f5f90696b883ff4a907edec70e1517a30ea79bcf72bf8a3809ba83cafb2350e9cedad6c0ba3f348cac0f0c86d6e2278be5b7f3458bb240f7b899df8301b9c0649260a52ab9f5fcc2b5a0e73863ae9387f005dda00f64134b348eb28f6ee891e7281b6189e432b7e584a3bef2f4e5cd6ad1bbbd44aa8da96c36679383c8bd3039d0ab0c2fbc63e702eed5d6a72c310c13ba90b83b050974989a942abac1ba5bb6d5b794a6856093ae409ef680f7337ea51cbf5fed0c9a1d70832ab2299995eb3b85312c9e75c159caa090faa35bcd5841a3d7c3cdf88a1fcbbbc07772276dfe3430b607f809bc3d88e71b21f6d6f0a256ad3869010c4cc421e96df34811b324d06508f67ec582a29ea30809a9a2f168251a3ec3e07ee52bf678c6a1279d2301a9fa30109e55585aa3db7ca316dfe4ad3da666d1b4da0f0870782dfbd42f7f2441639aff23ddd783f8c90c6f28db8f8b58a281a2d85942fe9a73a76df22a5255cab9093665bf222f0dcd460ac78f49a6a2b76d39064d1717185cf232e42d26925490a3b037d11752c98e7abc6931f8ba29d398fb131f1ce227bcbfde2a907aafcfe2ed27ff9565b01c07bd49fdfba7292c039bb14368a20b5fe5e3b25967d0e435404d1671617c6a32156201190970d7ad1312b7b463f734e66b70730e7375df4ef203b6d3affd315fa978ea5c92aa863ced9233f4211a6401b2ac83c9bb6a7a3c62643d28b81237fd902ac3a4fd5742fedb53fb0303b86a420db109a3d0bdeb873c3fbe40a578c5f1bea4d4429746f772de7f6260460953254723ab33579fecf51f40364496b8fb763725a0dfb6d1699d874e3aa645e66711cac945162ad173066277f61010b78eeccfadf0d564c312f65e9644f5734579a72c295949f6c15041a76fca437e5eaf95c5a993343573e82e449b00cb635a3d7171203b991542ae3713a7dbfd6c70e64bfb46a34337876f137f532a74fec619d8361193327f870b0b2145ed3b86f9397d23dbf639e984d534cbbb18a0afe71271cba1698a8fe23fe166dba6f5c5d22ca5376646d4695bf8750b2dceafe1a3bc5d1fa5b566a29ac4fb47f6882da1303e73ab164be8141443986e4a8ec7223e0d559a024bec2cd8c68ebd16eedbc6dab13fb2bff18b2b2d7e0b291f3aa4277b76c9861bcb4644b5b8cf80544df94371a82b241da59f453ba47885cecde754337b3bab34fdc48ae74c6da81c976003f99959a02933adefb4b02133791615813a1c51b940908efc5fb175b1cd4ff6d1a3baf92526d624296dac9fe2f7af372b4add8adca1c209dfcd4e65a38623425c7c39f096b2de61ffa75fa60be395d7cb7ac5a6a0802d5c9cb66e94f07ff726f027ad762886403523b5b0356d34da26c8dd5ac5534cf128885e7934d5aaf272c546b8d2767bb3af89c5539f886cf93f075507f62e6931953131b5d2f045df04508d3156d5b3d1250fd9700072498af3650a0fbcb725d9c6e961fb4a3956355e06264b3d7895ca036379b3a5e579d7be90f4ea755254cb2b94ebb5cbbe7da69e2f0042e1e0ad174ffe37b419b9b815b453ff87e11c8528ae89cb3000d83f221399100479e14e30cb5e3a8917e7dc24774a56a09baddf5d88010700ac0b7505b1fd85fbfece50cdec6d85fa7afa811bd3e1ed033374d9ed5f3310dd9bba08d9a7b410afd7235c2e79937225487e1759c8ee200d95eb137c38d660c9525f7230e92802fda10855479fa7f9dafa028072f1f93d6700bd83554dd90d714809a3baaa82734e46ea4d3ef441c19ee2b68dc3904adf3590d81b147b1b9cc9a14504dec2e80b6dca4fec752101adc39fd1619ed88b9f2b16401d700479c6eebd1b147ab51e0119e5b2c73e83d5b362e39a4a72586cdcd95c0c4f073de7436de1976f261739b6a4a02e8bc5c8c08592508e8f1d15af4d0acd30b0308eb1df7c3dc28c3415bde71dafbb47872b35c0e8050edd398278bd64f2ba554e4d2abe631c63b6d962ad0da19cfd03244549d72960330d25879ffa826c733eff4832dd84556cbc60e0b4054d7bc837c997d9e48d1ba89d4873a62e2187c2d3b23eb2bc05a2dab14dbaba7fb6ba6908e716e71454af3bc38ad72eb915a54d57a8562c3900d14bd1182e51166b219164e631500c34ff4374f749c3ad6a087883c3ed910b01319e061529cfe8d25611633b840a995b2713924180c064e2a66e641601ff74ffec4937a021a800bd27d12c1191d825a1877b04c299406dd6c6958b75fe9d4c74e254f1d0fd69ff9e4456d4b7716a398bad5d93b4c50e492a95c1f0b779d5b7e3aa3b99d963f85361e568622535cbec2002ca3a36a5b5322008d9aaa0a2dc163dab51d2effa6cc455abbcb1d422fe12ef5fae0e28ed992ca95db0e191f514cf6c72275ddecff3df96fe3eec175c66e2f97b5e77c7d900b06a5230eadf76f21b343422860a964f9108f32ebf5e07d06c260298354ffb8ae2c01cee0dd758b46d1c94ce231e6c3b5f9f35e419bb47b23da5b27472318d29eeed0f088af1dcc10c93757bcb20bcc5fe3b9ef1574528904683c5a90e7f52c305691254904d1c19725e71425d568fc4fc901bca80bcaf31cc76a93c9557ac3b9a2a53334f24a1bbe9d145c8b0811baf29b140043bb8f5eb6c7c425659a7bc663cc1be94bcec41bb559512ae8b04a55b6d59b25703d21673f2d74dc459ab593b0d36c444b1fb6c20aea957c341a3df4e2eef3573331f9f59c11a9fc87746fe15749941636e751dbf99476c4ddcd521515f6563b19e0000eb0976cc059917237d35e1f131135477146a85eb20c0659b522ec26ca90db8a2873c77cbf389838ac1bc80a9ea91b36057fe61232c2ac8dd6ef0f7be6346b6f7401f4be60db0810525863b2185b041ca0fc477cc3b2ad985eb936875376f79b11e029242147f0a350bb43e153fa8a36fa216ebee4a151c83911f8d0697cf44ad8a9c0b13c949e5ceec06cb1517ceb3c932c913969b134597ca6688e3c534f74c06c567be6536119308e8776fc7b595afb3cd7899abccfe53ad04799932b8a2739f237fc085cbb71b98e389b162cec65eabe6d6bb622269fadd3cd6353d946beb27c8d912db097ffb08bb6e7143570402560568941982dbbb2237b47bfc76347866f7f6aef2a39df9ef84fb6ea1c5c7b09e7fc9fa11a317d81970c9a47edb8707c8c65e2044e6d6430614afe83c2a78091e32dd351289c034ae50c8161307788eed3679d721fb4c451a1b440799488a6fb6f68253e7615647c9656cd2f905672a7fca5971fad5c31e1cd47ce32b717d73887f46eb95b16042ee6da36c6efcb5dc0b5e57ae3ce4cb4eef473db8b2517d02a2daca242a94de22bfc7283c0f9e94fe434663bd57089660aa42bb053d7b7eafb761c7bda1541e3bc082e2423860fb9b99038928a74cf2491ec10b66d77ce4c17ed98400ec076f155b1d5117770db810980880f50ce4ababb6ed75a1d8b9696cc9eb841d7002294b0cbea783ca5cc85573dd852076818298a21e325b59ccd46b68cc30e3cc26528384af8a1e842aa4086dcf0515ac60d9baf17199088a3da1c008d23064f85396b9741a7265c818eea1cea66da6683cdcf97b370f70e61a919c018531a315c8cb23a54c078f2136bbede011551227bcefd963376c6c57f8a9fbac911e87c1109a5caae84dc7821c4672b012f50e80df1ffbc1c9a665ce87db3ca0ff855d5de667de36750c22be66094b5ba82c87842b3e3ebe43ace61585bfbd449513d1b208e1de105bc6dac885be38e6018d4043de06a9b2c93958d709adca0e90bdfb2a676643148f72cdf0144987c5db51e8dece8ba12998e0aecb528b4859626f559a695781102ed2d381211833e6e3515585bf52002c47c2b8d008d9bb0d56db0efa77a47c0a9dbcd9d879a61e1b608908ea77860d65246d76177b193ab84d6ed7884129094dbf588a3b2e0afa7ba9eb73a6a58b2f7da5cec890a85d8981fb758c6e4592bae60e1ac6f8fb09c9b7e881ca080f60b5237f712ce2322182bcc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>一些知识点</title>
    <url>/2021/04/14/%E4%B8%80%E4%BA%9B%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
    <content><![CDATA[<h2 id="专业知识"><a href="#专业知识" class="headerlink" title="专业知识"></a>专业知识</h2><h3 id="云计算的三种服务类型"><a href="#云计算的三种服务类型" class="headerlink" title="云计算的三种服务类型"></a>云计算的三种服务类型</h3><ul>
<li>基础设施即服务(IaaS)。IaaS 为用户提供在安全数据中心环境中访问原始计算资源（如处理能力、数据存储能力和网络）的权限。</li>
<li>平台即服务 (PaaS)。 PaaS 服务面向软件开发团队，提供计算和存储基础设施，也是开发平台层，包含 Web 服务器、数据库管理系统以及各种编程语言的软件开发套件 (SDK) 等组件。</li>
<li>软件即服务 (SaaS)。 SaaS 提供商提供专为各种业务需求定制的应用层服务，如客户关系管理 (CRM)、市场营销自动化或业务分析。</li>
</ul>
<h3 id="数据库关系模型中的三种完整性约束"><a href="#数据库关系模型中的三种完整性约束" class="headerlink" title="数据库关系模型中的三种完整性约束"></a>数据库关系模型中的三种完整性约束</h3><ul>
<li>实体完整性（Entity Integrity）。保证每个元组都是可识别的和唯一的，即关系数据库中所有的表都必须有主键，且不允许存在主键为空或者主键值重复的记录。</li>
<li>参照完整性（Referential Integrity）。一般用来描述多个实体或关系之间的关联，即定义外键与被参照的主键之间的引用规则。外键必须是参照关系中某个元组的主键或者值为空。</li>
<li>用户定义的完整性（User-defined Integrity）。实际上就是指明关系中属性的取值范围，防止属性的值和应用语义矛盾。关系模型应提供定义和检验这类完整性的机制，以便用统一的系统方法处理，而不是由应用程序承担这一功能。</li>
</ul>
<h3 id="域名系统DNS（Domain-Name-System）的主要作用"><a href="#域名系统DNS（Domain-Name-System）的主要作用" class="headerlink" title="域名系统DNS（Domain Name System）的主要作用"></a>域名系统DNS（Domain Name System）的主要作用</h3><p>使用分布在各地的域名服务器将域名转换为IP地址。</p>
<h3 id="域名解析的过程"><a href="#域名解析的过程" class="headerlink" title="域名解析的过程"></a>域名解析的过程</h3><p>由于递归查询对被查询的服务器负担太大，通常采用以下模式：从请求主机到本地域名服务器的查询是递归查询，而其余的查询是迭代查询。</p>
<p>为了提高DNS的查询效率，在域名服务器中广泛使用了<strong>高速缓存</strong>。高速缓存用来存放最近查询过的域名以及从何处获得域名映射信息的记录。由于域名到IP地址的映射关系不是永久不变，因此应为每项内容设置计数器并删除超过合理时间的项（例如每个项目只存放两天）。</p>
<p>DNS报文使用运输层的UDP协议进行封装，运输层端口号为<strong>53</strong>。</p>
<h3 id="因特网的接入方式"><a href="#因特网的接入方式" class="headerlink" title="因特网的接入方式"></a>因特网的接入方式</h3><ul>
<li>局域网接入。一般单位的局域网都已接入Internet,局域网用户即可通过局域网接入Internet。局域网接入传输容量较大，可提供高速、高效、安全、稳定的网络连接。</li>
<li>ISDN接入。通过综合业务数字网(ISDN,Integrated ServiceDigital Network)连接，信息传输能力强，传输速率较高(128kb/s)，传输质量可靠，上网时还可使用电话。</li>
<li>ADSL接入。非对称数字用户线路(ADSL,Asymmetric Digital Subscriber Line)是一种新兴的高速通信技术。上行(指从用户电脑端向网络传送信息)速率最高可达1Mb/s，下行(指浏览www网页、下载文件)速率最高可达8Mb/s。</li>
<li>Cable Modem接入。基于有线电视的线缆调制解调器(Cable Modem)接入方式可以达到下行8Mb/s、上行2Mb/s的高速率接入。</li>
</ul>
<h3 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h3><h4 id="邮件发送"><a href="#邮件发送" class="headerlink" title="邮件发送"></a>邮件发送</h4><p>简单邮件传送协议SMTP（Simple Mail Transfer Protocol）只能传送ASCII码文本数据，不能传送可执行文件或其他的二进制对象。即不能满足传送多媒体邮件的需要，以及其他非英语文字也无法用SMTP传输。</p>
<p>为解决SMTP传送非ASCII文本的问题，提出了多用途因特网邮件扩展MIME（Multipurpose Internet Mail Extensions）。即将非ASCII码文本用MIME编码转换为ASCII码，这样就可以使用SMTP协议传输了。</p>
<p>实际上，MIME不仅仅用于SMTP，也用于后来的同样面向ASCII字符的HTTP。</p>
<h4 id="邮件读取"><a href="#邮件读取" class="headerlink" title="邮件读取"></a>邮件读取</h4><p>常用的邮件读取协议：</p>
<ul>
<li>邮局协议POP（Post Office Protocol），POP3是第三个版本，是因特网正式标准；非常简单、功能有限的邮件读取协议。用户只能以下载并删除或下载并保留方式从邮件服务器下载邮件到用户计算机，不能在邮件服务器上管理自己的邮件（如创建文件夹进行分类管理等）。</li>
<li>因特网邮件访问协议IMAP（Internet Message Access Protocol），IMAP4是第四个版本，目前只是因特网建议标准。功能比POP3强大，用户可以在计算机上操控邮件服务器中的邮箱，因此IMAP是一个联机协议。</li>
</ul>
<h4 id="基于万维网的电子邮件"><a href="#基于万维网的电子邮件" class="headerlink" title="基于万维网的电子邮件"></a>基于万维网的电子邮件</h4><p>通过浏览器登录邮件服务器万维网网站就可以撰写、收发、阅读和管理电子邮件。这种模式和IMAP很类似，不同的是<strong>用户计算机无需安装专门的用户代理程序</strong>，只需要使用通用的万维网浏览器。</p>
<p>用户收发邮件时使用的都是HTTP协议，而不是SMTP和POP3协议。不同邮件服务器之间传输邮件仍需使用SMTP协议。</p>
<h3 id="网络安全的5个主要特征"><a href="#网络安全的5个主要特征" class="headerlink" title="网络安全的5个主要特征"></a>网络安全的5个主要特征</h3><ul>
<li><strong>保密性：</strong>信息不泄露给非授权用户、实体或过程，或供其利用的特性。</li>
<li><strong>完整性：</strong>数据未经授权不能进行改变的特性。即信息在存储或传输过程中保持不被修改、不被破坏和丢失的特性。</li>
<li><strong>可用性：</strong>可被授权实体访问并按需求使用的特性。即当需要时能否存取所需的信息。例如网络环境下拒绝服务、破坏网络和有关系统的正常运行等都属于对可用性的攻击。</li>
<li><strong>可控性：</strong>对信息的传播及内容具有控制能力。</li>
<li><strong>可审查性：</strong>出现的安全问题时提供依据与手段。</li>
</ul>
<h3 id="VPN的服务类型"><a href="#VPN的服务类型" class="headerlink" title="VPN的服务类型"></a>VPN的服务类型</h3><ul>
<li>Access VPN。Access VPN又称为拨号VPN(即VPDN)，是指企业员工或企业的小分支机构通过公网远程拨号的方式构筑的虚拟网。如果企业的内部人员移动或有远程办公需要，或者商家要提供B2C的安全访问服务，就可以考虑使用AccessVPN。</li>
<li>Intranet VPN。Intranet VPN即企业的总部与分支机构间通过VPN虚拟网进行网络连接。随着企业的跨地区、国际化经营，这是绝大多数大、中型企业所必需的。它的特点就是容易建立连接、连接速度快，最大特点就是它为各分支机构提供了整个网络的访问权限。</li>
<li>Extranet VPN。Extranet VPN即企业间发生收购、兼并或企业间建立战略联盟后，使不同企业网通过公网来构筑的虚拟网。如果是需要提供B2B电子商务之间的安全访问服务，则可以考虑选用Extranet VPN。</li>
</ul>
<h3 id="数据库关系模式三范式"><a href="#数据库关系模式三范式" class="headerlink" title="数据库关系模式三范式"></a>数据库关系模式三范式</h3><p>范式的作用是消除重复数据减少冗余数据，从而让数据库内的数据更好地组织，让磁盘空间得到更有效利用。</p>
<h4 id="第一范式"><a href="#第一范式" class="headerlink" title="第一范式"></a>第一范式</h4><p>第一范式是关系模式要遵循的基本范式。定义为：在关系模式R中，其所有属性均为简单属性，每个属性都是不可再分的。</p>
<p>这种模式本身依旧存在许多问题，例如数据冗余、插入删除更新的异常。根本原因是其中的属性值存在各种各样的函数依赖关系。</p>
<p>如果说对于属性组X，X–&gt;Y，并且X的子集X’也同样决定了Y，即X’–&gt;Y。我们将其称为Y对X的部分函数依赖，记作X-P-&gt;Y；</p>
<p>反之，如果不存在X的子集X’可以决定Y，并且X–&gt;Y，那么我们将其称之为完全函数依赖，记作：X-F-&gt;Y。</p>
<h4 id="第二范式"><a href="#第二范式" class="headerlink" title="第二范式"></a>第二范式</h4><p>定义：对于关系R属于第一范式，同时R的每个非主属性完全依赖于码。</p>
<p>这种模式依旧存在问题。对于非主属性Z而言 ，若存在属性组Y，使得X–&gt;Y，Y–&gt;Z。我们将其称之为Z对X的传递依赖。</p>
<h4 id="第三范式"><a href="#第三范式" class="headerlink" title="第三范式"></a>第三范式</h4><p>第三范式就是在第二范式的基础上去除非主属性间的传递依赖。第三范式在现实层面的应用中最为广泛。</p>
<h3 id="云安全"><a href="#云安全" class="headerlink" title="云安全"></a>云安全</h3><p>融合了并行处理、网格计算、未知病毒行为判断等新兴技术和概念。通过网状的大量客户端对网络中软件行为的异常监测，获取互联网中木马、恶意程序的最新信息，传送到Server端进行自动分析和处理，再把病毒和木马的解决方案分发到每一个客户端。</p>
<h3 id="文件传送协议FTP"><a href="#文件传送协议FTP" class="headerlink" title="文件传送协议FTP"></a>文件传送协议FTP</h3><p>FTP的常见用途：在计算机之间传输文件，尤其是用于批量传输文件。</p>
<p>另一个用途：让网站设计者将构成网站内容的大量文件批量上传到他们的Web服务器。</p>
<p>FTP客户和服务器之间要建立两个并行的TCP连接：</p>
<ul>
<li>一个是控制连接，在整个会话期间一直保持打开，用于传送FTP相关控制命令；</li>
<li>另一个是数据连接，用于文件传输，在每次文件传输时才建立，传输结束就关闭。</li>
</ul>
<h3 id="异步传输模式ATM"><a href="#异步传输模式ATM" class="headerlink" title="异步传输模式ATM"></a>异步传输模式ATM</h3><p>异步传输模式Asynchronous Transfer Mode是：</p>
<p>① 面向连接的快速分组交换技术（Connection-oriented, high-speed packet switching）；</p>
<p>② 基于固定长度信元的异步传输技术（53-byte celled streaming）。各种类型的信息流（包括语音、数据、视频等）均被适配成固定长度的（53字节）的”信元”（Cell）中进行传输。信元是同步定时发送的，但信元所包含的信息之间却是异步，即不保证原来的信息顺序到达目的地。</p>
<p>个人理解：ATM异步的含义指周期性地插入ATM信元，而信元中的信息的传输顺序/插入时间是不确定的。</p>
<h3 id="数据库事务"><a href="#数据库事务" class="headerlink" title="数据库事务"></a>数据库事务</h3><p>事务的四大特性：</p>
<ul>
<li>原子性（<strong>A</strong>tomicity）: 事务<strong>要么全部完成，要么全部取消</strong>。 如果事务崩溃，状态回到事务之前（事务回滚）。</li>
<li>隔离性（<strong>I</strong>solation）: 如果2个事务 T1 和 T2 同时运行，事务 T1 和 T2 最终的结果是相同的，不管 T1和T2谁先结束。</li>
<li>持久性（<strong>D</strong>urability）: 一旦事务提交，不管发生什么（崩溃或者出错），数据要保存在数据库中。</li>
<li>一致性（<strong>C</strong>onsistency）: 只有合法的数据（依照关系约束和函数约束）才能写入数据库。</li>
</ul>
<h3 id="活锁和死锁"><a href="#活锁和死锁" class="headerlink" title="活锁和死锁"></a>活锁和死锁</h3><p>活锁指的是任务或者执行者没有被阻塞，由于某些条件没有满足，导致一直重复尝试，失败，尝试，失败。 </p>
<p>活锁和死锁的区别在于，处于活锁的实体是在不断的改变状态，所谓的“活”， 而处于死锁的实体表现为等待；活锁有可能自行解开，死锁则不能。</p>
<p>活锁的例子：线程从队列中拿出一个任务来执行，如果任务执行失败，那么将任务重新加入队列，继续执行。假设任务总是执行失败，或者某种依赖的条件总是不满足，那么线程一直在繁忙却没有任何结果。</p>
]]></content>
  </entry>
  <entry>
    <title>大数据平台开发技术</title>
    <url>/2021/07/23/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%B9%B3%E5%8F%B0%E5%BC%80%E5%8F%91%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="分布式文件系统HDFS"><a href="#分布式文件系统HDFS" class="headerlink" title="分布式文件系统HDFS"></a>分布式文件系统HDFS</h2><h3 id="大数据的背景知识"><a href="#大数据的背景知识" class="headerlink" title="大数据的背景知识"></a>大数据的背景知识</h3><p>大数据（Big Data）指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合。是需要心处理模式才能具有更强决策力、洞察发现力和流程优化能力的<strong>海量</strong>、<strong>高增长率</strong>和<strong>多样化</strong>的信息资产。</p>
<p>大数据要解决的核心问题是数据的存储与计算。</p>
<h3 id="大数据与数据仓库"><a href="#大数据与数据仓库" class="headerlink" title="大数据与数据仓库"></a>大数据与数据仓库</h3><p>数据仓库（Data Warehouse）是为企业所有级别的决策指定过程，提供所有类型数据支持的战略集合。它是单个数据存储，出于分析性报告和决策支持目的而创建。</p>
<p>Hadoop 和 Spark 都可以看成是数据仓库的一种实现方式，在没有这两者时，也可以使用 MySQL 和 Oracle 来实现数据仓库。</p>
<h4 id="搭建一个数据仓库的过程"><a href="#搭建一个数据仓库的过程" class="headerlink" title="搭建一个数据仓库的过程"></a>搭建一个数据仓库的过程</h4><h5 id="使用关系型数据库"><a href="#使用关系型数据库" class="headerlink" title="使用关系型数据库"></a>使用关系型数据库</h5><p>当使用关系型数据库作为数据仓库时，首先对数据源，需要进行 ETL ，即抽取（Extract）、转换（Transform）和加载（Load），然后将数据存储到数据仓库中。这时的数据是原始数据，不可以直接提供给具体的业务用户。</p>
<p>对原始数据进行 SQL 相关分析和处理，将结果放到数据集市当中，再由数据集市提供处理好的数据给用户。这里的数据集市也是由关系型数据库搭建的，最大的特点是直接面向业务用户。</p>
<h5 id="使用-Hadoop-方式"><a href="#使用-Hadoop-方式" class="headerlink" title="使用 Hadoop 方式"></a>使用 Hadoop 方式</h5><p>Hadoop 的组件 Sqoop 和 Flume 也可以实现 ETL 的过程。Sqoop 主要针对关系型数据库，例如将 MySQL 的数据提取出来存到 HDFS 中。而 Flume 主要针对的是日志或网络上的数据。</p>
<p>除了可以将数据存储在 HDFS 中，还可以存在 HBase 当中。HBase 是基于 HDFS 之上的 NoSQL 数据库；除此之外还有 Hive 文件，Hive 也是基于 HDFS 之上的数据仓库，且支持 SQL 语句。不管是 HBase 还是 Hive ，数据最终还是存储在 HDFS 中的。</p>
<p>在 Hadoop 中，对数据的分析与处理可以使用 MapReduce 计算模型来实现，也可以使用 SQL 语句实现。</p>
<p>同样，在搭建数据集市时，也是使用 HDFS 等方式来搭建的。</p>
<p>搭建数据仓库的过程可概括为采集数据，存储数据，分析数据，保存结果，这个过程组成了一个工作流。</p>
]]></content>
      <categories>
        <category>Big Data</category>
      </categories>
  </entry>
  <entry>
    <title>一些自用网站/工具汇总</title>
    <url>/2022/02/08/%E4%B8%80%E4%BA%9B%E8%87%AA%E7%94%A8%E7%BD%91%E7%AB%99-%E5%B7%A5%E5%85%B7%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="458cc0974b878cec68b15e2f4691d364b8ea8e708668f72c9fbdbb2fa273fc1f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库基础</title>
    <url>/2021/07/09/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h3 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h3><p>数据库就是可以快速访问的一种格式化数据集合。</p>
<p>为了管理数据库，使用数据库管理系统（Database Management System）来管理。我们访问 DBMS 给它指令去创建或查询数据， DBMS 会执行指令并将结果返回。</p>
<p>数据库管理系统按特征分为两类：关系型数据库和非关系型数据库。</p>
<p>在关系型数据库中，数据保存在彼此关联的表格中，每个表格保存一定规范的对象信息。 SQL（Structured Query Language）是一种用来操作关系型数据库的语言。</p>
<p>在非关系型数据库中，没有表格和彼此的关系，非关系型数据库不支持 SQL 语言。数据是以键值对存储的，且结构不稳定，每一个元组都可以有不一样的字段。</p>
<h3 id="Retrieving-Data-From-a-Single-Table"><a href="#Retrieving-Data-From-a-Single-Table" class="headerlink" title="Retrieving Data From a Single Table"></a>Retrieving Data From a Single Table</h3><h4 id="The-SELECT-Statement"><a href="#The-SELECT-Statement" class="headerlink" title="The SELECT Statement"></a>The SELECT Statement</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE sql_store;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="comment">-- WHERE customer_id = 1</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> first_name <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>



<h4 id="The-SELECT-Clause"><a href="#The-SELECT-Clause" class="headerlink" title="The SELECT Clause"></a>The SELECT Clause</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 给计算后的数据设置别名</span></span><br><span class="line"><span class="keyword">SELECT</span> (points <span class="operator">+</span> <span class="number">10</span>) <span class="operator">*</span> <span class="number">0.01</span> <span class="keyword">AS</span> &quot;discount factor&quot;</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 从表中检索出不重复的结果</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> state</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br></pre></td></tr></table></figure>



<h4 id="The-WHERE-Clause"><a href="#The-WHERE-Clause" class="headerlink" title="The WHERE Clause"></a>The WHERE Clause</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="comment">-- AND 操作符优先级更高</span></span><br><span class="line"><span class="keyword">WHERE</span> birth_date <span class="operator">&gt;</span> &quot;1990-01-01&quot; <span class="keyword">OR</span> (points <span class="operator">&gt;</span> <span class="number">1000</span> <span class="keyword">AND</span> state <span class="operator">=</span> &quot;VA&quot;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="comment">-- 对括号中的内容取反</span></span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> (birth_date <span class="operator">&gt;</span> &quot;1990-01-01&quot; <span class="keyword">OR</span> points <span class="operator">&gt;</span> <span class="number">1000</span>)</span><br></pre></td></tr></table></figure>



<h4 id="The-IN-Operator"><a href="#The-IN-Operator" class="headerlink" title="The IN Operator"></a>The IN Operator</h4><p>使用 IN 操作符可以拿记录中的某个项与这个列表相比较。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> state <span class="keyword">IN</span> (&quot;VA&quot;, &quot;CO&quot;, &quot;FL&quot;)</span><br></pre></td></tr></table></figure>



<h4 id="The-BETWEEN-Operator"><a href="#The-BETWEEN-Operator" class="headerlink" title="The BETWEEN Operator"></a>The BETWEEN Operator</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="comment">-- 两边都是闭区间</span></span><br><span class="line"><span class="keyword">WHERE</span> points <span class="keyword">BETWEEN</span> <span class="number">1000</span> <span class="keyword">AND</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>



<h4 id="The-LIKE-Operator"><a href="#The-LIKE-Operator" class="headerlink" title="The LIKE Operator"></a>The LIKE Operator</h4><p>使用 LIKE 操作符可以选中匹配某种格式的字符串。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="comment">-- 在 b 前后可以有任意个字符</span></span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> &quot;%b%&quot;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="comment">-- 长度为 6 ，以 y 结尾</span></span><br><span class="line"><span class="keyword">WHERE</span> last_name <span class="keyword">LIKE</span> &quot;_____y&quot;</span><br></pre></td></tr></table></figure>



<h4 id="The-REGEXP-Operator"><a href="#The-REGEXP-Operator" class="headerlink" title="The REGEXP Operator"></a>The REGEXP Operator</h4><p>在正则表达式中，用幂符号表示以此开始，用美元符号表示以此结尾，用竖线表示多种检索的条件，用中括号可以判断前一个或后一个字符是否匹配括号内的其中一个。注意正则表达式中不能使用空格。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 必须以 field 开始</span></span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP &quot;^filed&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 必须以 field 结尾</span></span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP &quot;filed$&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 必须以 field 开头或包含 mac 或 rose</span></span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP &quot;^field|mac|rose&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 必须以 field 或 mac 或 rose 结尾</span></span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP &quot;field$|mac$|rose$&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 是否包含 ge ie me</span></span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP &quot;[gim]e&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- e 前一个字母是否在 a-h 的范围内</span></span><br><span class="line"><span class="keyword">WHERE</span> last_name REGEXP &quot;[a-h]e&quot;</span><br></pre></td></tr></table></figure>



<h4 id="The-IS-NULL-Operator"><a href="#The-IS-NULL-Operator" class="headerlink" title="The IS NULL Operator"></a>The IS NULL Operator</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="comment">-- 检索出电话缺失的用户</span></span><br><span class="line"><span class="keyword">WHERE</span> phone <span class="keyword">IS</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>



<h4 id="The-ORDER-BY-Clause"><a href="#The-ORDER-BY-Clause" class="headerlink" title="The ORDER BY Clause"></a>The ORDER BY Clause</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="comment">-- 先对 state 进行正序排序，然后对 first_name 进行倒序排序</span></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> state, first_name <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>



<h4 id="The-LIMIT-Clause"><a href="#The-LIMIT-Clause" class="headerlink" title="The LIMIT Clause"></a>The LIMIT Clause</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="comment">-- 6 是偏移量，表示跳过前 6 个结果，然后返回前 3 个</span></span><br><span class="line">LIMIT <span class="number">6</span>, <span class="number">3</span></span><br></pre></td></tr></table></figure>



<h3 id="Retrieving-Data-From-Multiple-Tables"><a href="#Retrieving-Data-From-Multiple-Tables" class="headerlink" title="Retrieving Data From Multiple Tables"></a>Retrieving Data From Multiple Tables</h3><h4 id="Inner-Joins"><a href="#Inner-Joins" class="headerlink" title="Inner Joins"></a>Inner Joins</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> o.customer_id, order_id, first_name, last_name</span><br><span class="line"><span class="comment">-- 设置别名</span></span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"><span class="comment">-- 根据 id 连接两个表</span></span><br><span class="line"><span class="keyword">JOIN</span> customers c</span><br><span class="line">	<span class="keyword">ON</span> o.customer_id <span class="operator">=</span> c.customer_id</span><br></pre></td></tr></table></figure>



<h4 id="Joining-Across-Databases"><a href="#Joining-Across-Databases" class="headerlink" title="Joining Across Databases"></a>Joining Across Databases</h4><p>当需要进行跨库连接表的时候，只需要在被连接的表前添加该表所在的库名即可。</p>
<h4 id="Self-Joins"><a href="#Self-Joins" class="headerlink" title="Self Joins"></a>Self Joins</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> e.employee_id, e.first_name, m.first_name <span class="keyword">AS</span> manager</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="comment">-- 自合并，找出管理者，这样可以快速创建管理架构</span></span><br><span class="line"><span class="keyword">JOIN</span> employees m</span><br><span class="line">	<span class="keyword">ON</span> e.reports_to <span class="operator">=</span> m.employee_id</span><br></pre></td></tr></table></figure>



<h4 id="Joining-Multiple-Tables"><a href="#Joining-Multiple-Tables" class="headerlink" title="Joining Multiple Tables"></a>Joining Multiple Tables</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	o.order_id, o.order_date,</span><br><span class="line">    c.first_name, c.last_name,</span><br><span class="line">    os.name <span class="keyword">AS</span> status</span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"><span class="comment">-- 多表连接返回订单状态</span></span><br><span class="line"><span class="keyword">JOIN</span> customers c</span><br><span class="line">	<span class="keyword">ON</span> o.customer_id <span class="operator">=</span> c.customer_id</span><br><span class="line"><span class="keyword">JOIN</span> order_statuses os</span><br><span class="line">	<span class="keyword">ON</span> os.order_status_id <span class="operator">=</span> o.status</span><br></pre></td></tr></table></figure>



<h4 id="Compound-Join-Conditions"><a href="#Compound-Join-Conditions" class="headerlink" title="Compound Join Conditions"></a>Compound Join Conditions</h4><p>有时不能只用一个字段就标识每条记录，例如一列中有好几个重复记录。所以这时可以用两个字段的组合来唯一标识记录。</p>
<p>当一个表使用的是复合主键，在合并表时，需要用到若干个条件。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> order_items oi</span><br><span class="line"><span class="keyword">JOIN</span> order_item_notes oin</span><br><span class="line">	<span class="keyword">ON</span> oi.order_id <span class="operator">=</span> oin.order_Id</span><br><span class="line">    <span class="keyword">AND</span> oi.product_id <span class="operator">=</span> oin.product_id</span><br></pre></td></tr></table></figure>



<h4 id="Implicit-Join-Syntax"><a href="#Implicit-Join-Syntax" class="headerlink" title="Implicit Join Syntax"></a>Implicit Join Syntax</h4><p>如果忘记写 WHERE 子句，会造成交叉合并。因此还是更推荐使用显示的合并语法。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 隐式合并语法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orders o, customers c</span><br><span class="line"><span class="keyword">WHERE</span> o.customer_id <span class="operator">=</span> c.customer_id</span><br></pre></td></tr></table></figure>



<h4 id="Outer-Joins"><a href="#Outer-Joins" class="headerlink" title="Outer Joins"></a>Outer Joins</h4><p>在 SQL 中有两种外连接，分别是左连接和右连接。如果使用左连接，左边表格的所有记录，不管是否符合条件都会返回；当使用右连接时，返回所有右边表格的记录。</p>
<p>如果只使用 JOIN 表明用的是内连接，如果使用 LEFT 或 RIGHT 的 JOIN 就表明使用的是外连接。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> p.product_id, p.name, oi.quantity</span><br><span class="line"><span class="keyword">FROM</span> products p</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> order_items oi</span><br><span class="line">	<span class="keyword">ON</span> p.product_id <span class="operator">=</span> oi.product_id</span><br></pre></td></tr></table></figure>



<h4 id="Outer-Joins-Between-Multiple-Tables"><a href="#Outer-Joins-Between-Multiple-Tables" class="headerlink" title="Outer Joins Between Multiple Tables"></a>Outer Joins Between Multiple Tables</h4><p>多表外连接时，最好总是使用左连接，避免使用右连接增加代码的复杂度。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	c.customer_id,</span><br><span class="line">	c.first_name,</span><br><span class="line">    o.order_id,</span><br><span class="line">    sh.name</span><br><span class="line"><span class="keyword">FROM</span> customers c</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> orders o</span><br><span class="line">	<span class="keyword">ON</span> c.customer_id <span class="operator">=</span> o.customer_id</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> shippers sh</span><br><span class="line">	<span class="keyword">ON</span> o.shipper_id <span class="operator">=</span> sh.shipper_id</span><br></pre></td></tr></table></figure>



<h4 id="Self-Outer-Joins"><a href="#Self-Outer-Joins" class="headerlink" title="Self Outer Joins"></a>Self Outer Joins</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	e.employee_id,</span><br><span class="line">    e.first_name,</span><br><span class="line">    m.first_name <span class="keyword">AS</span> manager</span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> employees m</span><br><span class="line">	<span class="keyword">ON</span> e.reports_to <span class="operator">=</span> m.employee_id</span><br></pre></td></tr></table></figure>



<h4 id="The-USING-Clause"><a href="#The-USING-Clause" class="headerlink" title="The USING Clause"></a>The USING Clause</h4><p>随着查询越来越复杂，连接的条件就会越来越难懂，使得代码难以阅读。然而在 SQL 中，如果两个合并表之间的列名是一样的，可以用 USING 子句代替 ON 子句，使语法变简单。</p>
<p>如果每个记录的主键是由若干字段组合而成，即复合主键，那么在将这个表与其他表连接时，就需要在合并条件中加入这若干个字段</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	o.order_id,</span><br><span class="line">    c.first_name,</span><br><span class="line">    sh.name</span><br><span class="line"><span class="keyword">FROM</span> orders o</span><br><span class="line"><span class="keyword">JOIN</span> customers c</span><br><span class="line">	<span class="comment">-- ON o.customer_id = c.customer_id</span></span><br><span class="line">    <span class="keyword">USING</span> (customer_id)</span><br><span class="line"><span class="keyword">LEFT</span> <span class="keyword">JOIN</span> shippers sh</span><br><span class="line">	<span class="keyword">USING</span> (shipper_id)</span><br><span class="line">	</span><br><span class="line"><span class="comment">-- 当使用复合主键时</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> order_items oi</span><br><span class="line"><span class="keyword">JOIN</span> order_item_notes oin</span><br><span class="line">	<span class="keyword">USING</span> (order_id, product_id)</span><br></pre></td></tr></table></figure>



<h4 id="Natural-Joins"><a href="#Natural-Joins" class="headerlink" title="Natural Joins"></a>Natural Joins</h4><p>自然连接不需要特别指定合并的字段，当列的名字一致时，数据库引擎会自动检索表和表的相同列并合并它们。但是这样写很危险，因为让数据库自己去猜测合并的条件，可能造成很多问题。</p>
<h4 id="Cross-Joins"><a href="#Cross-Joins" class="headerlink" title="Cross Joins"></a>Cross Joins</h4><p>交叉合并用来连接前后两个表的每一条记录。假设有一个尺寸的表，比如小码、中码、大码，以及一个颜色的表，如果想用所有尺寸来组合所有颜色，就可以使用交叉合并。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="comment">-- 隐式语法</span></span><br><span class="line"><span class="comment">-- FROM shippers, products</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 显式语法</span></span><br><span class="line"><span class="keyword">FROM</span> shippers</span><br><span class="line"><span class="keyword">CROSS</span> <span class="keyword">JOIN</span> products</span><br></pre></td></tr></table></figure>



<h4 id="Unions"><a href="#Unions" class="headerlink" title="Unions"></a>Unions</h4><p>使用 UNION 操作符可以将查询结果组合起来。需要注意的是每个查询结果返回的列数要相同，否则就会报错。</p>
<p>结果集中列的名字来自于第一个查询的结果。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- &lt;2000 Bronze</span></span><br><span class="line"><span class="comment">-- between 2000 and 3000 Silver</span></span><br><span class="line"><span class="comment">-- &gt;=3000 Gold</span></span><br><span class="line"><span class="comment">-- Order by first name</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	customer_id,</span><br><span class="line">    first_name,</span><br><span class="line">    points,</span><br><span class="line">    &quot;Bronze&quot; <span class="keyword">AS</span> type</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> points <span class="operator">&lt;</span> <span class="number">2000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	customer_id,</span><br><span class="line">    first_name,</span><br><span class="line">    points,</span><br><span class="line">    &quot;Silver&quot; <span class="keyword">AS</span> type</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> points <span class="keyword">BETWEEN</span> <span class="number">2000</span> <span class="keyword">AND</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	customer_id,</span><br><span class="line">    first_name,</span><br><span class="line">    points,</span><br><span class="line">    &quot;Gold&quot; <span class="keyword">AS</span> type</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> points <span class="operator">&gt;</span> <span class="number">3000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> first_name</span><br></pre></td></tr></table></figure>



<h3 id="Inserting-Updating-and-Deleting-Data"><a href="#Inserting-Updating-and-Deleting-Data" class="headerlink" title="Inserting, Updating, and Deleting Data"></a>Inserting, Updating, and Deleting Data</h3><h4 id="Column-Attributes"><a href="#Column-Attributes" class="headerlink" title="Column Attributes"></a>Column Attributes</h4><p>VARCHAR 和 CHAR 的区别：</p>
<p>如果 VARCHAR 限制长度是 50 ，当输入的数据长度为 5 时，就只会保存 5 个字符的长度，不会浪费空间；而如果是 CHAR 类型，当输入的数据长度为 5 时，MySQL 会自动为它填充 45 个空格，对空间造成极大浪费。所以作为最佳实践，大部分时间都用 VARCHAR 来存储字符或文字类型的数据。</p>
<h4 id="Inserting-a-Single-Row"><a href="#Inserting-a-Single-Row" class="headerlink" title="Inserting a Single Row"></a>Inserting a Single Row</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> customers (first_name, last_name, address, city, state)</span><br><span class="line"><span class="keyword">VALUES</span>(&quot;John&quot;, &quot;Smith&quot;, &quot;address&quot;, &quot;city&quot;, &quot;CA&quot;)</span><br></pre></td></tr></table></figure>



<h4 id="Inserting-Multiple-Rows"><a href="#Inserting-Multiple-Rows" class="headerlink" title="Inserting Multiple Rows"></a>Inserting Multiple Rows</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> shippers (name)</span><br><span class="line"><span class="keyword">VALUES</span> (&quot;shipper1&quot;), (&quot;shipper2&quot;), (&quot;shipper3&quot;)</span><br></pre></td></tr></table></figure>



<h4 id="Inserting-Hierarchical-Rows"><a href="#Inserting-Hierarchical-Rows" class="headerlink" title="Inserting Hierarchical Rows"></a>Inserting Hierarchical Rows</h4><p>当两个表之间存在耦合关系时，一个表中的一条记录在另一个表中可以对应一到多条记录。这时需要同时向多个表插入数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders (customer_id, order_date)</span><br><span class="line"><span class="keyword">VALUES</span> (<span class="number">1</span>, &quot;2021-07-14&quot;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> order_items</span><br><span class="line"><span class="keyword">VALUES</span> </span><br><span class="line">	(last_insert_id(), <span class="number">2</span>, <span class="number">1</span>, <span class="number">2.05</span>),</span><br><span class="line">	(last_insert_id(), <span class="number">5</span>, <span class="number">2</span>, <span class="number">3.98</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Creating-a-Copy-of-a-Table"><a href="#Creating-a-Copy-of-a-Table" class="headerlink" title="Creating a Copy of a Table"></a>Creating a Copy of a Table</h4><p>快速创建一个表的副本之后，副本不会自动设置主键以及自增等属性。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 快速创建副本</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> orders_archived <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> orders</span><br><span class="line"></span><br><span class="line"><span class="comment">-- SELECT 作为插入子句使用</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> orders_archived</span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"><span class="keyword">WHERE</span> order_date <span class="operator">&lt;</span> &quot;2019-01-01&quot;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建副本的同时合并表并筛选数据</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> invoices_archived <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	i.invoice_id,</span><br><span class="line">	i.number,</span><br><span class="line">    c.name <span class="keyword">AS</span> client,</span><br><span class="line">    i.invoice_total,</span><br><span class="line">    i.payment_total,</span><br><span class="line">    i.invoice_date,</span><br><span class="line">    i.payment_date,</span><br><span class="line">    i.due_date</span><br><span class="line"><span class="keyword">FROM</span> invoices i</span><br><span class="line"><span class="keyword">JOIN</span> clients c</span><br><span class="line">	<span class="keyword">USING</span> (client_id)</span><br><span class="line"><span class="keyword">WHERE</span> payment_date <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>



<h4 id="Updating-a-Single-Row"><a href="#Updating-a-Single-Row" class="headerlink" title="Updating a Single Row"></a>Updating a Single Row</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE invoices</span><br><span class="line"><span class="keyword">SET</span> payment_total <span class="operator">=</span> <span class="number">10</span>, payment_date <span class="operator">=</span> &quot;2021-07-14&quot;</span><br><span class="line"><span class="keyword">WHERE</span> invoice_id <span class="operator">=</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>



<h4 id="Updating-Multiple-Rows"><a href="#Updating-Multiple-Rows" class="headerlink" title="Updating Multiple Rows"></a>Updating Multiple Rows</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE invoices</span><br><span class="line"><span class="keyword">SET</span> payment_total <span class="operator">=</span> invoice_total <span class="operator">*</span> <span class="number">0.5</span>, payment_date <span class="operator">=</span> due_date</span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="keyword">IN</span> (<span class="number">3</span>, <span class="number">5</span>)</span><br></pre></td></tr></table></figure>



<h4 id="Using-Subqueries-in-Updates"><a href="#Using-Subqueries-in-Updates" class="headerlink" title="Using Subqueries in Updates"></a>Using Subqueries in Updates</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE invoices</span><br><span class="line"><span class="keyword">SET</span></span><br><span class="line">	payment_total <span class="operator">=</span> invoice_total <span class="operator">*</span> <span class="number">0.5</span>,</span><br><span class="line">    payment_date <span class="operator">=</span> due_date</span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="operator">=</span> </span><br><span class="line">			(<span class="keyword">SELECT</span> client_id</span><br><span class="line">			<span class="keyword">FROM</span> clients</span><br><span class="line">			<span class="keyword">WHERE</span> name <span class="operator">=</span> &quot;Vinte&quot;)</span><br><span class="line">			</span><br><span class="line"><span class="comment">-- 如果返回多个结果，需要把等号替换成 IN</span></span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="keyword">IN</span> </span><br><span class="line">			(<span class="keyword">SELECT</span> client_id</span><br><span class="line">			<span class="keyword">FROM</span> clients</span><br><span class="line">			<span class="keyword">WHERE</span> state <span class="keyword">IN</span> (&quot;NY&quot;, &quot;CA&quot;))</span><br></pre></td></tr></table></figure>



<h4 id="Deleting-Rows"><a href="#Deleting-Rows" class="headerlink" title="Deleting Rows"></a>Deleting Rows</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> invoices</span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="operator">=</span> </span><br><span class="line">		(<span class="keyword">SELECT</span> client_id</span><br><span class="line">		<span class="keyword">FROM</span> clients</span><br><span class="line">		<span class="keyword">WHERE</span> name <span class="operator">=</span> &quot;test&quot;)</span><br></pre></td></tr></table></figure>



<h3 id="Summarizing-Data"><a href="#Summarizing-Data" class="headerlink" title="Summarizing Data"></a>Summarizing Data</h3><h4 id="Aggregate-Functions"><a href="#Aggregate-Functions" class="headerlink" title="Aggregate Functions"></a>Aggregate Functions</h4><p>聚合函数只作用于非空的记录，如果记录中有空值，计算中就不会包含这条记录。如果要得到表中所有记录的总数，需要避免漏算空值，可以使用 <code>COUNT(*)</code> 。</p>
<p>默认情况下，聚合函数会算入重复值，如果不需要重复值需要使用 DISTINCT 去重。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	<span class="built_in">MAX</span>(invoice_total) <span class="keyword">AS</span> highest,</span><br><span class="line">    <span class="built_in">MIN</span>(invoice_total) <span class="keyword">AS</span> lowest,</span><br><span class="line">    <span class="built_in">AVG</span>(invoice_total) <span class="keyword">AS</span> average,</span><br><span class="line">    <span class="built_in">SUM</span>(invoice_total) <span class="keyword">AS</span> total,</span><br><span class="line">    <span class="built_in">COUNT</span>(invoice_total) <span class="keyword">AS</span> number_of_invoices,</span><br><span class="line">    <span class="built_in">COUNT</span>(payment_date) <span class="keyword">AS</span> number_of_payments,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> total_records,</span><br><span class="line">	<span class="built_in">COUNT</span>(<span class="keyword">DISTINCT</span> client_id) <span class="keyword">AS</span> number_of_clients</span><br><span class="line"><span class="keyword">FROM</span> invoices</span><br><span class="line"><span class="keyword">WHERE</span> invoice_date <span class="operator">&gt;</span> &quot;2019-07-01&quot;</span><br></pre></td></tr></table></figure>



<h4 id="The-GROUP-BY-Clause"><a href="#The-GROUP-BY-Clause" class="headerlink" title="The GROUP BY Clause"></a>The GROUP BY Clause</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	p.date,</span><br><span class="line">    pm.name <span class="keyword">AS</span> payment_method,</span><br><span class="line">    <span class="built_in">SUM</span>(p.amount) <span class="keyword">AS</span> total_payments</span><br><span class="line"><span class="keyword">FROM</span> payments p</span><br><span class="line"><span class="keyword">JOIN</span> payment_methods pm</span><br><span class="line">	<span class="keyword">ON</span> p.payment_method <span class="operator">=</span> pm.payment_method_id</span><br><span class="line"><span class="comment">-- 由于同一天可能有好几次转账，因此需要按日期分组</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> p.date, p.payment_method</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> p.date</span><br></pre></td></tr></table></figure>



<h4 id="The-HAVING-Clause"><a href="#The-HAVING-Clause" class="headerlink" title="The HAVING Clause"></a>The HAVING Clause</h4><p>HAVING 子句中使用的字段必须是存在于 SELECT 子句中的字段。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	client_id,</span><br><span class="line">    <span class="built_in">SUM</span>(invoice_total) <span class="keyword">AS</span> total_sales,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> number_of_invoices</span><br><span class="line"><span class="keyword">FROM</span> invoices</span><br><span class="line"><span class="comment">-- 如果想筛选出购买金额大于 500 的客户，无法使用 WHERE 子句</span></span><br><span class="line"><span class="comment">-- 因为这时还未分组，需要分组后才能知道总的购买金额</span></span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> client_id</span><br><span class="line"><span class="comment">-- 在分组之后可以使用 HAVING 子句来筛选结果</span></span><br><span class="line"><span class="keyword">HAVING</span> total_sales <span class="operator">&gt;</span> <span class="number">500</span> <span class="keyword">AND</span> number_of_invoices <span class="operator">&gt;</span> <span class="number">5</span></span><br></pre></td></tr></table></figure>

<p>作为原则，如果在 SELECT 语句中使用了聚合函数，就应该在分组时采用所有选出的字段组合。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 选出位于VA的，总消费大于100的客户</span></span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	c.customer_id,</span><br><span class="line">    c.first_name,</span><br><span class="line">    c.last_name,</span><br><span class="line">    <span class="built_in">SUM</span>(oi.quantity <span class="operator">*</span> oi.unit_price) <span class="keyword">AS</span> total</span><br><span class="line"><span class="keyword">FROM</span> customers c</span><br><span class="line"><span class="keyword">JOIN</span> orders o</span><br><span class="line">	<span class="keyword">USING</span> (customer_id)</span><br><span class="line"><span class="keyword">JOIN</span> order_items oi</span><br><span class="line">	<span class="keyword">USING</span> (order_id)</span><br><span class="line"><span class="keyword">WHERE</span> c.state <span class="operator">=</span> &quot;VA&quot;</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.customer_id, c.first_name, c.last_name</span><br><span class="line"><span class="keyword">HAVING</span> total <span class="operator">&gt;</span> <span class="number">100</span></span><br></pre></td></tr></table></figure>



<h4 id="The-ROLLUP-Operator"><a href="#The-ROLLUP-Operator" class="headerlink" title="The ROLLUP Operator"></a>The ROLLUP Operator</h4><p>在 MySQL 中， ROLLUP 操作符写在分组语句后，只所用于聚合函数字段，对每个分组的结果以及整个结果集进行求和。</p>
<p>只要使用了 ROLLUP 操作符，就不能在分组条件中使用别名，需要使用真实的字段名。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	pm.name <span class="keyword">AS</span> payment_method,</span><br><span class="line">    <span class="built_in">SUM</span>(p.amount) <span class="keyword">AS</span> total</span><br><span class="line"><span class="keyword">FROM</span> payments p</span><br><span class="line"><span class="keyword">JOIN</span> payment_methods pm</span><br><span class="line">	<span class="keyword">ON</span> p.payment_method <span class="operator">=</span> pm.payment_method_id</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> pm.name <span class="keyword">WITH</span> <span class="keyword">ROLLUP</span></span><br></pre></td></tr></table></figure>



<h3 id="Complex-Query"><a href="#Complex-Query" class="headerlink" title="Complex Query"></a>Complex Query</h3><h4 id="Subqueries"><a href="#Subqueries" class="headerlink" title="Subqueries"></a>Subqueries</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 收入大于平均值的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&gt;</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h4 id="The-IN-Operator-1"><a href="#The-IN-Operator-1" class="headerlink" title="The IN Operator"></a>The IN Operator</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找出从未被订购过的产品</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products</span><br><span class="line"><span class="keyword">WHERE</span> product_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> product_id</span><br><span class="line">	<span class="keyword">FROM</span> order_items</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找出没有发票的客户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> clients</span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="keyword">NOT</span> <span class="keyword">IN</span> (</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> client_id</span><br><span class="line">		<span class="keyword">FROM</span> invoices</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h4 id="Subqueries-vs-Joins"><a href="#Subqueries-vs-Joins" class="headerlink" title="Subqueries vs Joins"></a>Subqueries vs Joins</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 订购了产品 id = 3 的客户</span></span><br><span class="line"><span class="comment">-- 子查询解法</span></span><br><span class="line"><span class="keyword">SELECT</span> customer_id, first_name, last_name</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">WHERE</span> customer_id <span class="keyword">IN</span> (</span><br><span class="line">		<span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> customer_id</span><br><span class="line">		<span class="keyword">FROM</span> orders</span><br><span class="line">		<span class="keyword">WHERE</span> order_id <span class="keyword">IN</span> (</span><br><span class="line">				<span class="keyword">SELECT</span> order_id</span><br><span class="line">				<span class="keyword">FROM</span> order_items</span><br><span class="line">				<span class="keyword">WHERE</span> product_id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">		)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- JOIN解法</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> c.customer_id, c.first_name, c.last_name</span><br><span class="line"><span class="keyword">FROM</span> order_items oi</span><br><span class="line"><span class="keyword">JOIN</span> orders o</span><br><span class="line">	<span class="keyword">USING</span> (order_id)</span><br><span class="line"><span class="keyword">JOIN</span> customers c</span><br><span class="line">	<span class="keyword">USING</span> (customer_id)</span><br><span class="line"><span class="keyword">WHERE</span> oi.product_id <span class="operator">=</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p>这种复杂查询时，使用 JOIN 解法的代码可读性更强一些。因此更多的情况下，使用的是 JOIN 。</p>
<h4 id="The-ALL-Keyword"><a href="#The-ALL-Keyword" class="headerlink" title="The ALL Keyword"></a>The ALL Keyword</h4><p>当将一个返回结果集的查询语句作为子查询时，可以使用 ALL 关键字逐条遍历结果集进行进一步的筛选操作。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 筛选出发票中价格比客户 3 的所有发票价格都大的客户。也可以使用 MAX 聚合函数</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> invoices</span><br><span class="line"><span class="keyword">WHERE</span> invoice_total <span class="operator">&gt;</span> <span class="keyword">ALL</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> invoice_total</span><br><span class="line">	<span class="keyword">FROM</span> invoices</span><br><span class="line">	<span class="keyword">WHERE</span> client_id <span class="operator">=</span> <span class="number">3</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h4 id="The-ANY-Keyword"><a href="#The-ANY-Keyword" class="headerlink" title="The ANY Keyword"></a>The ANY Keyword</h4><p>使用了 ANY 关键字，就意味着条件只需要满足子查询结果集的某一条就可以。</p>
<p>=ANY 等价于 IN 操作符。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 筛选出至少有两张发票的客户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> clients</span><br><span class="line"><span class="keyword">WHERE</span> client_id <span class="operator">=</span> <span class="keyword">ANY</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> client_id</span><br><span class="line">	<span class="keyword">FROM</span> invoices</span><br><span class="line">	<span class="keyword">GROUP</span> <span class="keyword">BY</span> client_id</span><br><span class="line">	<span class="keyword">HAVING</span> <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;=</span> <span class="number">2</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h4 id="Correlated-Subqueries"><a href="#Correlated-Subqueries" class="headerlink" title="Correlated Subqueries"></a>Correlated Subqueries</h4><p>当一个子查询中有条件是依赖于外部查询时，就被称为相关子查询。</p>
<p>当使用了相关子查询，这个子查询会在每次主查询的每条记录执行一次。因此，相关子查询有时会很慢，数据越多，获得结果的时间就越长。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找出不同办公室中薪水高于平均值的员工</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> employees e</span><br><span class="line"><span class="keyword">WHERE</span> salary <span class="operator">&lt;</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(salary)</span><br><span class="line">    <span class="keyword">FROM</span> employees</span><br><span class="line">    <span class="keyword">WHERE</span> office_id <span class="operator">=</span> e.office_id</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找出每个客户中发票金额高于该客户发票金额平均值的发票</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> invoices i</span><br><span class="line"><span class="keyword">WHERE</span> invoice_total <span class="operator">&gt;</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(invoice_total)</span><br><span class="line">    <span class="keyword">FROM</span> invoices</span><br><span class="line">    <span class="keyword">WHERE</span> client_id <span class="operator">=</span> i.client_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h4 id="The-EXISTS-Operator"><a href="#The-EXISTS-Operator" class="headerlink" title="The EXISTS Operator"></a>The EXISTS Operator</h4><p>当数据表中的数据非常庞大时，如果使用 IN 操作符查询结果，子查询返回的结果集也会非常庞大，这会对系统产生负面的性能影响。这种情况下使用 EXISTS 操作符更好，因为用 EXISTS 操作符时子查询不会真正返回结果集给外部查询，它只给出子查询是否有满足条件的记录，如果结果为真，就将该条记录添加到最终结果集。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 找出有开发票的客户</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> invoices i</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> client_id</span><br><span class="line">    <span class="keyword">FROM</span> invoices</span><br><span class="line">    <span class="keyword">WHERE</span> invoice_id <span class="operator">=</span> i.invoice_id</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 找出没被订购过的产品</span></span><br><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> products p</span><br><span class="line"><span class="keyword">WHERE</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> product_id</span><br><span class="line">    <span class="keyword">FROM</span> order_items</span><br><span class="line">    <span class="keyword">WHERE</span> product_id <span class="operator">=</span> p.product_id</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h4 id="Subqueries-in-the-SELECT-Clause"><a href="#Subqueries-in-the-SELECT-Clause" class="headerlink" title="Subqueries in the SELECT Clause"></a>Subqueries in the SELECT Clause</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	invoice_id,</span><br><span class="line">    invoice_total,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(invoice_total) <span class="keyword">FROM</span> invoices) <span class="keyword">AS</span> invoice_average,</span><br><span class="line">    <span class="comment">-- 无法使用别名</span></span><br><span class="line">    invoice_total <span class="operator">-</span> (<span class="keyword">SELECT</span> invoice_average) <span class="keyword">AS</span> difference</span><br><span class="line"><span class="keyword">FROM</span> invoices</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	client_id,</span><br><span class="line">    name,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(invoice_total) <span class="keyword">FROM</span> invoices</span><br><span class="line">    <span class="keyword">WHERE</span> client_id <span class="operator">=</span> c.client_id</span><br><span class="line">    <span class="keyword">GROUP</span> <span class="keyword">BY</span> client_id) <span class="keyword">AS</span> total_sales,</span><br><span class="line">    (<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(invoice_total) <span class="keyword">FROM</span> invoices) <span class="keyword">AS</span> average,</span><br><span class="line">    (<span class="keyword">SELECT</span> total_sales <span class="operator">-</span> average) <span class="keyword">AS</span> difference</span><br><span class="line"><span class="keyword">FROM</span> clients c</span><br></pre></td></tr></table></figure>



<h4 id="Subqueries-in-the-FROM-Clause"><a href="#Subqueries-in-the-FROM-Clause" class="headerlink" title="Subqueries in the FROM Clause"></a>Subqueries in the FROM Clause</h4><p>最好在 FROM 子句中只写简单的子查询，在 FROM 子句中写复杂的子查询会将主查询也变得很复杂，使用视图（View）可以将这个问题简化。因此可以将复杂子查询保存到库中，作为一个视图。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">FROM</span> (</span><br><span class="line">	<span class="keyword">SELECT</span> </span><br><span class="line">		client_id,</span><br><span class="line">		name,</span><br><span class="line">		(<span class="keyword">SELECT</span> <span class="built_in">SUM</span>(invoice_total) <span class="keyword">FROM</span> invoices</span><br><span class="line">		<span class="keyword">WHERE</span> client_id <span class="operator">=</span> c.client_id</span><br><span class="line">		<span class="keyword">GROUP</span> <span class="keyword">BY</span> client_id) <span class="keyword">AS</span> total_sales,</span><br><span class="line">		(<span class="keyword">SELECT</span> <span class="built_in">AVG</span>(invoice_total) <span class="keyword">FROM</span> invoices) <span class="keyword">AS</span> average,</span><br><span class="line">		(<span class="keyword">SELECT</span> total_sales <span class="operator">-</span> average) <span class="keyword">AS</span> difference</span><br><span class="line">	<span class="keyword">FROM</span> clients c</span><br><span class="line">) <span class="keyword">AS</span> sales_summary</span><br><span class="line"><span class="keyword">WHERE</span> total_sales <span class="keyword">IS</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span></span><br></pre></td></tr></table></figure>



<h3 id="Essential-MySQL-Functions"><a href="#Essential-MySQL-Functions" class="headerlink" title="Essential MySQL Functions"></a>Essential MySQL Functions</h3><h4 id="Numeric-Functions"><a href="#Numeric-Functions" class="headerlink" title="Numeric Functions"></a>Numeric Functions</h4><ul>
<li>ROUND() ：可以对数值四舍五入；</li>
<li>TRUNCATE() ：截断数值；</li>
<li>CEILING() ：向上取整；</li>
<li>FLOOR() ：向下取整；</li>
<li>ABS() ：取绝对值；</li>
<li>RAND() ：创建一个 0 到 1 之间的随机浮点数；</li>
</ul>
<h4 id="String-Functions"><a href="#String-Functions" class="headerlink" title="String Functions"></a>String Functions</h4><ul>
<li>LENGTH() ：返回字符串长度；</li>
<li>UPPER() ：将字符串转为大写；</li>
<li>LOWER() ：将字符串转为小写；</li>
<li>LTRIM() ：去除最前端的空格；</li>
<li>RTRIM() ：去除最末尾的空格；</li>
<li>TRIM() ：删除所有最前和末尾的空格；</li>
<li>LEFT() ：返回从最左端开始的若干字符；</li>
<li>RIGHT() ：返回从最右端开始的若干字符；</li>
<li>SUBSTRING() ：从字符串的任何位置截取字符；</li>
<li>LOCATE() ：返回第一次出现字符或字符串的位置；</li>
<li>REPLACE() ：更换字符串中的某些字符；</li>
<li>CONCAT() ：连接字符串；</li>
</ul>
<h4 id="Date-Functions"><a href="#Date-Functions" class="headerlink" title="Date Functions"></a>Date Functions</h4><ul>
<li>NOW() ：获得当前的日期和时间；</li>
<li>CURDATE() ：获得当前日期，不含时间；</li>
<li>CURTIME() ：获得当前时间；</li>
<li>YEAR() ：将年份从时间对象中提取出来，类似的还有 MONTH() 、 DAY() 和 HOUR() 等；</li>
<li>DAYNAME() ：根据日期对象返回星期几；</li>
<li>EXTRACT() ：从对象中提取不同的单位，例如年份月份等；</li>
</ul>
<h4 id="Calculating-Dates-and-Times"><a href="#Calculating-Dates-and-Times" class="headerlink" title="Calculating Dates and Times"></a>Calculating Dates and Times</h4><ul>
<li>DATE_ADD() ：向给定日期加上一个天数；</li>
<li>DATEDIFF() ：返回两个日期的时间间隔；</li>
<li>TIME_TO_SEC() ：从零点开始到指定时间的间隔；</li>
</ul>
<h4 id="The-IFNULL-and-COALESCE-Functions"><a href="#The-IFNULL-and-COALESCE-Functions" class="headerlink" title="The IFNULL and COALESCE Functions"></a>The IFNULL and COALESCE Functions</h4><ul>
<li>IFNULL() ：可以将指定列中 null 的值替换为其他值；</li>
<li>COALESCE() ：返回一串指定字段或值中第一个不为空的值；</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	CONCAT(first_name, &quot; &quot;, last_name) <span class="keyword">AS</span> full_name,</span><br><span class="line">	IFNULL(phone, &quot;Unknown&quot;) <span class="keyword">AS</span> phone</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br></pre></td></tr></table></figure>



<h4 id="The-IF-Function"><a href="#The-IF-Function" class="headerlink" title="The IF Function"></a>The IF Function</h4><p>有时需要条件检测，然后根据结果显示相应的值。例如，根据订单的下单时间对订单进行分类。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	order_id,</span><br><span class="line">    order_date,</span><br><span class="line">    IF(<span class="keyword">YEAR</span>(order_date) <span class="operator">=</span> <span class="keyword">YEAR</span>(NOW()), </span><br><span class="line">		&quot;Active&quot;,</span><br><span class="line">        &quot;Archived&quot;) <span class="keyword">AS</span> category</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 给被订购过的商品添加备注</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	product_id,</span><br><span class="line">    name,</span><br><span class="line">    <span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="keyword">AS</span> orders,</span><br><span class="line">    IF(</span><br><span class="line">		<span class="built_in">COUNT</span>(<span class="operator">*</span>) <span class="operator">&gt;</span> <span class="number">1</span>,</span><br><span class="line">        &quot;Many Times&quot;,</span><br><span class="line">        &quot;Once&quot;</span><br><span class="line">    ) <span class="keyword">AS</span> frequency</span><br><span class="line"><span class="keyword">FROM</span> products p</span><br><span class="line"><span class="keyword">JOIN</span> order_items <span class="keyword">USING</span> (product_id)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> product_id, name</span><br></pre></td></tr></table></figure>



<h4 id="The-CASE-Operator"><a href="#The-CASE-Operator" class="headerlink" title="The CASE Operator"></a>The CASE Operator</h4><p>由于用 IF 语句只能判断一个表达式，如果有多个表达式需要判断，可以使用 CASE 操作符。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 按年份分类</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	order_id,</span><br><span class="line">    <span class="keyword">CASE</span></span><br><span class="line">		<span class="keyword">WHEN</span> <span class="keyword">YEAR</span>(order_date) <span class="operator">=</span> <span class="keyword">YEAR</span>(NOW()) <span class="keyword">THEN</span> &quot;Active&quot;</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">YEAR</span>(order_date) <span class="operator">=</span> <span class="keyword">YEAR</span>(NOW()) <span class="operator">-</span> <span class="number">1</span> <span class="keyword">THEN</span> &quot;Last Year&quot;</span><br><span class="line">        <span class="keyword">WHEN</span> <span class="keyword">YEAR</span>(order_date) <span class="operator">&lt;</span> <span class="keyword">YEAR</span>(NOW()) <span class="operator">-</span> <span class="number">1</span> <span class="keyword">THEN</span> &quot;Archived&quot;</span><br><span class="line">        <span class="keyword">ELSE</span> &quot;Future&quot; </span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">AS</span> category</span><br><span class="line"><span class="keyword">FROM</span> orders</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 按客户积分分类</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	CONCAT(first_name, &quot; &quot;, last_name) <span class="keyword">AS</span> customer,</span><br><span class="line">    points,</span><br><span class="line">    <span class="keyword">CASE</span></span><br><span class="line">		<span class="keyword">WHEN</span> points <span class="operator">&gt;</span> <span class="number">3000</span> <span class="keyword">THEN</span> &quot;Gold&quot;</span><br><span class="line">        <span class="keyword">WHEN</span> points <span class="operator">&gt;=</span> <span class="number">2000</span> <span class="keyword">THEN</span> &quot;Silver&quot;</span><br><span class="line">        <span class="keyword">ELSE</span> &quot;Bronze&quot;</span><br><span class="line">	<span class="keyword">END</span> <span class="keyword">AS</span> category</span><br><span class="line"><span class="keyword">FROM</span> customers</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> points <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>



<h3 id="Views"><a href="#Views" class="headerlink" title="Views"></a>Views</h3><h4 id="Creating-Views"><a href="#Creating-Views" class="headerlink" title="Creating Views"></a>Creating Views</h4><p>当查询或子查询很复杂的时候，可以将其保存为视图，从而极大简化查询语句。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> sales_by_client <span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	c.client_id,</span><br><span class="line">    c.name,</span><br><span class="line">    <span class="built_in">SUM</span>(i.invoice_total) <span class="keyword">AS</span> total_sales</span><br><span class="line"><span class="keyword">FROM</span> clients c</span><br><span class="line"><span class="keyword">JOIN</span> invoices i</span><br><span class="line">	<span class="keyword">USING</span> (client_id)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.client_id, c.name</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> client_balance <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span> </span><br><span class="line">	c.client_id,</span><br><span class="line">    c.name,</span><br><span class="line">    <span class="built_in">SUM</span>(i.invoice_total <span class="operator">-</span> i.payment_total) <span class="keyword">AS</span> balance</span><br><span class="line"><span class="keyword">FROM</span> clients c</span><br><span class="line"><span class="keyword">JOIN</span> invoices i</span><br><span class="line">	<span class="keyword">USING</span> (client_id)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> c.client_id, c.name</span><br></pre></td></tr></table></figure>

<p>视图不保存数据，数据仍保存在表中，视图只是基于某些条件显示表中的数据。</p>
<h4 id="Altering-or-Dropping-Views"><a href="#Altering-or-Dropping-Views" class="headerlink" title="Altering or Dropping Views"></a>Altering or Dropping Views</h4><p>删除并更新视图的方式：</p>
<ol>
<li><code>DROP VIEW ...</code></li>
<li><code>CREATE OR REPLACE VIEW ...</code></li>
</ol>
<h4 id="Updatable-Views"><a href="#Updatable-Views" class="headerlink" title="Updatable Views"></a>Updatable Views</h4><p>如果视图中没有 DISTINCT 关键字，以及任何聚合函数，GROUP BY 和 HAVING 子句，以及 UNION 操作符，那么就称这些视图为可更新视图，即可以通过视图插入、更新或删除数据。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 一个可更新视图</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">OR</span> REPLACE <span class="keyword">VIEW</span> invoices_with_balance <span class="keyword">AS</span> </span><br><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">	invoice_id,</span><br><span class="line">    number,</span><br><span class="line">    client_id,</span><br><span class="line">    invoice_total,</span><br><span class="line">    payment_total,</span><br><span class="line">    invoice_total <span class="operator">-</span> payment_total <span class="keyword">AS</span> balance,</span><br><span class="line">    invoice_date,</span><br><span class="line">    due_date,</span><br><span class="line">    payment_date</span><br><span class="line"><span class="keyword">FROM</span> invoices</span><br><span class="line"><span class="keyword">WHERE</span> (invoice_total <span class="operator">-</span> payment_total) <span class="operator">&gt;</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 通过视图将2号发票的截止日期推后2天</span></span><br><span class="line">UPDATE invoices_with_balance</span><br><span class="line"><span class="keyword">SET</span> due_date <span class="operator">=</span> DATE_ADD(due_date, <span class="type">INTERVAL</span> <span class="number">2</span> <span class="keyword">DAY</span>)</span><br><span class="line"><span class="keyword">WHERE</span> invoice_id <span class="operator">=</span> <span class="number">2</span></span><br></pre></td></tr></table></figure>



<h4 id="The-WITH-CHECK-OPTION-Clause"><a href="#The-WITH-CHECK-OPTION-Clause" class="headerlink" title="The WITH  CHECK OPTION Clause"></a>The WITH  CHECK OPTION Clause</h4><p>当通过视图更新或删除数据后，某些记录会不见。为了防止这种情况发生，可以在重建视图的末尾添加 WITH CHECK OPTION 。如果修改视图的结果会导致某些记录从视图中消失，那么这个执行就不会被实现。</p>
<h4 id="Other-Benefits-of-Views"><a href="#Other-Benefits-of-Views" class="headerlink" title="Other Benefits of Views"></a>Other Benefits of Views</h4><p>除了可以简化代码之外，视图还可以减小修改表的结构带来的影响。如果所有查询都是基于视图的，它们就不会因为源表的修改而受到影响。</p>
<p>视图还可以用来防止对源数据的访问。</p>
<p>但是不要盲目使用视图。</p>
<h3 id="Stored-Procedures"><a href="#Stored-Procedures" class="headerlink" title="Stored Procedures"></a>Stored Procedures</h3><p>当将 SQL 查询写到应用程序代码中，需要修改某些查询时，就要重新编译代码。因此应该将 SQL 代码放到程序代码之外，然后将它们存放在数据库的存储过程或函数中。</p>
<p>存储过程就是在数据库中保存代码块的对象。在应用代码中，通过调用这些过程来获得或存入数据，所以用存储过程来对 SQL 数据库进行保存和管理。例如，可以删除所有对表的直接访问，通过存储过程只允许有限的增删改操作，然后可以限定谁可以执行什么过程，这样可以限制用户对数据的操作。</p>
<h4 id="Creating-a-Stored-Procedure"><a href="#Creating-a-Stored-Procedure" class="headerlink" title="Creating a Stored Procedure"></a>Creating a Stored Procedure</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 设置分隔符为$$ 用来将存储过程视为一个整体</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_clients()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> clients;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 将分隔符改回来</span></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>



<h4 id="Dropping-Procedures"><a href="#Dropping-Procedures" class="headerlink" title="Dropping Procedures"></a>Dropping Procedures</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> get_invoices_with_balance;</span><br><span class="line"><span class="comment">-- 先删除存储过程再创建</span></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_invoices_with_balance()</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">    <span class="keyword">FROM</span> invoices</span><br><span class="line">    <span class="keyword">WHERE</span> invoice_total <span class="operator">-</span> payment_total <span class="operator">&gt;</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>



<h4 id="Parameters"><a href="#Parameters" class="headerlink" title="Parameters"></a>Parameters</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> get_clients_by_state;</span><br><span class="line"></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_clients_by_state(state <span class="type">CHAR</span>(<span class="number">2</span>))</span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">    <span class="keyword">FROM</span> clients c</span><br><span class="line">    <span class="keyword">WHERE</span> state <span class="operator">=</span> c.state;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>



<h4 id="Parameters-with-Default-Values"><a href="#Parameters-with-Default-Values" class="headerlink" title="Parameters with Default Values"></a>Parameters with Default Values</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> get_invoices_by_client;</span><br><span class="line"></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_invoices_by_client(client_id <span class="type">INT</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="comment">-- 为存储过程参数设置默认值</span></span><br><span class="line">	IF client_id <span class="keyword">IS</span> <span class="keyword">NULL</span> <span class="keyword">THEN</span></span><br><span class="line">		<span class="keyword">SET</span> client_id <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">END</span> IF;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">    <span class="keyword">FROM</span> invoices i</span><br><span class="line">    <span class="keyword">WHERE</span> client_id <span class="operator">=</span> i.client_id;</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">PROCEDURE</span> IF <span class="keyword">EXISTS</span> get_invoices_by_client;</span><br><span class="line"></span><br><span class="line">DELIMITER $$</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> get_invoices_by_client(client_id <span class="type">INT</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">BEGIN</span></span><br><span class="line">	<span class="keyword">SELECT</span> <span class="operator">*</span> </span><br><span class="line">    <span class="keyword">FROM</span> invoices i</span><br><span class="line">    <span class="comment">-- 如果参数为空，则返回整个表；否则根据参数筛选数据。</span></span><br><span class="line">    <span class="keyword">WHERE</span> i.client_id <span class="operator">=</span> IFNULL(client_id, i.client_id);</span><br><span class="line"><span class="keyword">END</span>$$</span><br><span class="line"></span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Database</category>
      </categories>
  </entry>
  <entry>
    <title>数据链路层</title>
    <url>/2021/04/09/%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/</url>
    <content><![CDATA[<h2 id="数据链路层"><a href="#数据链路层" class="headerlink" title="数据链路层"></a>数据链路层</h2><h3 id="差错检测"><a href="#差错检测" class="headerlink" title="差错检测"></a>差错检测</h3><p>使用差错检测码来检测数据在传输过程中是否产生了比特差错，是数据链路层所要解决的重要问题之一。</p>
<h4 id="循环冗余校验CRC（Cyclic-Redundancy-Check）"><a href="#循环冗余校验CRC（Cyclic-Redundancy-Check）" class="headerlink" title="循环冗余校验CRC（Cyclic Redundancy Check）"></a>循环冗余校验CRC（Cyclic Redundancy Check）</h4><ul>
<li>收发双方约定好一个生成多项式<code>G(x)</code>；</li>
<li>发送方基于待发送的数据和<code>G(x)</code>计算出差错检测码（冗余码），将其添加到待传输数据后面一起传输；</li>
<li>接收方通过<code>G(x)</code>计算收到的数据是否产生了误码。</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul>
<li>检测码只能检测出帧在传输过程中出现了差错，但不能定位差错以及纠正差错。</li>
<li>要想纠正差错，可以使用冗余信息较多的<strong>纠错码</strong>进行<strong>前向纠错</strong>，但开销较大，在计算机网路中较少使用。</li>
<li>循环冗余校验CRC有很好的检错能力（漏检率非常低），虽然计算比较复杂，但非常易于用硬件实现，因此被广泛应用于数据链路层。</li>
<li>在计算机网络中通常采用<strong>检错重传方式</strong>来纠正传输中的错误，或仅仅是丢弃检测到差错的帧，这取决于数据链路层向其上层提供的是可靠传输服务还是不可靠传输服务。</li>
</ul>
<h3 id="可靠传输"><a href="#可靠传输" class="headerlink" title="可靠传输"></a>可靠传输</h3><p>一般情况下，有限链路误码率较低，为减小开销，不要求数据链路从向上层提供可靠传输服务。即使出现误码，可靠传输的问题由上层处理。</p>
<p>无线链路易受干扰，误码率比较高，因此要求数据链路层向上层提供可靠传输服务。</p>
<p>可靠传输服务并不只局限于数据链路层，其他层均可选择实现可靠传输。</p>
<p>可靠传输的实现比较复杂，开销也比较大，是否使用可靠传输取决于应用要求。</p>
<h4 id="可靠传输的实现机制"><a href="#可靠传输的实现机制" class="headerlink" title="可靠传输的实现机制"></a>可靠传输的实现机制</h4><p>可靠传输的实现机制可分为三种：停止-等待协议SW、回退N帧协议GBN、选择重传协议SR。</p>
<p>这三种可靠传输机制的基本原理并不仅限于数据链路层，也可以应用到计算机网络体系结构的各层协议中。</p>
<h5 id="停止-等待协议（Stop-and-Wait）"><a href="#停止-等待协议（Stop-and-Wait）" class="headerlink" title="停止-等待协议（Stop-and-Wait）"></a>停止-等待协议（Stop-and-Wait）</h5><p>发送方每发送一个数据分组，都需要等待来自接收方的确认（ACK）分组或否认（NAK）分组，接收到ACK分组或NAK分组后，才选择发送下一个数据分组或重复发送当前数据分组。</p>
<p>为了让接收方能判断所收到的数据分组是重复的，需要给数据分组编号。由于停止-等待协议的停等特性，只需要1个比特编号就够了，即编号0和1。</p>
<p>为了让发送方能判断接收到的ACK分组是否是重复的，需要给ACK分组编号，所用比特数量与数据分组编号所用的一样。数据链路层一般不会出现ACK分组迟到的情况，因此在数据链路层实现停止-等待协议可以不用给ACK分组编号。</p>
<p>超时计时器设置的重传时间仔细选择，一般可设为略大于“从发送方到接收方的平均往返时间”。</p>
<h6 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h6><ul>
<li>当往返时延（数据分组传输到接收方的时延+ACK/NAK分组返回发送方的时延）远大于数据分组发送时延（数据分组长度/发送速率）时（例如使用卫星链路），信道利用率非常低。</li>
<li>若出现重传，则对于传送有用的数据信息来说，信道利用率更低。</li>
<li>这种通过确认和重传机制实现的可靠传输协议，常称为自动请求重传协议ARQ（Automatic Repeat reQuest）。</li>
<li>为了克服停止-等待协议信道利用率很低的缺点，就产生了另外两种协议，即后退N帧协议GBN和选择重传协议SR。</li>
</ul>
<h5 id="回退N帧协议（Go-Back-N）"><a href="#回退N帧协议（Go-Back-N）" class="headerlink" title="回退N帧协议（Go-Back-N）"></a>回退N帧协议（Go-Back-N）</h5><p>GBN协议采用3个比特给分组编序号（即0 - 7）。</p>
<p>发送窗口尺寸<code>Wt</code>的取值范围是<code>1 &lt; Wt &lt;= 2^n - 1</code>；其中，<code>n</code>是构成分组序号的比特数量，此时<code>n = 3</code>。若<code>Wt = 1</code>，协议就是SW协议；若<code>Wt &gt; 2^n - 1</code>，接收方将无法辨别新、旧数据分组。接收方的接收窗口尺寸<code>Wr = 1</code>，因此接收方只能按序接收数据分组。</p>
<p>发送方可以在未收到接收方确认分组的情况下，将序号落在发送窗口的多个数据分组全部发送出去；接收方只接收序号落在接收窗口且无误码的数据分组，并将接收窗口向前滑动一个位置。为了减少开销，接收方不一定每收到一个无误的数据分组就给发送方返回一个确认分组，而是可以累计好几个之后，针对最后一个数据分组发送确认分组，这叫<strong>累积确认</strong>；或在自己有数据分组要发送时才对之前接收的无误数据分组进行捎带确认。</p>
<p>接收方收到有误的数据分组时直接丢弃，对于未按序到达的数据分组，除丢弃外，还需逐个对最近按序接收无误的数据分组进行确认；只有收到确认分组时，发送方的发送窗口才向前相应滑动。若收到多个重复确认分组，说明出现了误码，可以在重传计时器超时前开始重传，由具体实现决定。</p>
<p>发送方发送窗口内某个已发送的数据分组产生超时重发时，其之后的已发送数据分组也必须全部重传，这就是回退N帧协议名称的由来。</p>
<h6 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h6><ul>
<li>GBN协议在流水线传输的基础上利用发送窗口来限制发送方连续发送数据分组的数量，是一种连续ARQ协议。</li>
<li>在协议的工作过程中发送窗口和接收窗口不断向前滑动，因此这类协议又称为滑动窗口协议。</li>
<li>由于GBN协议的特性，当通信线路质量不好时（不断回退N帧重传），其信道利用率并不比SW协议高。</li>
</ul>
<h5 id="选择重传协议（Selective-Request）"><a href="#选择重传协议（Selective-Request）" class="headerlink" title="选择重传协议（Selective Request）"></a>选择重传协议（Selective Request）</h5><p>GBN协议的接收窗口尺寸只能等于1，一个数据分组的误码会导致后续多个数据分组被丢弃，这必然会造成发送方对这些数据分组的重传，显然这是对信道资源的极大浪费。</p>
<p>为进一步提高性能，可以只设法重传出现误码的数据分组。接收窗口的尺寸应大于1，以便接收方先收下失序到达但无误码且序号落在接收窗口内的数据分组，等到缺失的数据分组收齐后再一并交给上层，这就是选择重传协议。</p>
<p>选择重传协议为了使发送方仅发送需要重传的数据分组，不再使用累积确认，而是对每个正确接收的数据分组进行确认。</p>
<p>接收方只有在按序接收数据分组后才能向前滑动接收窗口，否则等待缺失的某个数据分组重传。发送方只有在按序接收确认分组后才能向前滑动发送窗口；若收到了未按序到达的确认分组，需要进行记录，防止超时重发已到达的数据分组，但此时发送窗口不能向前滑动。</p>
<h3 id="点对点协议（Point-to-Point-Protocol）"><a href="#点对点协议（Point-to-Point-Protocol）" class="headerlink" title="点对点协议（Point-to-Point Protocol）"></a>点对点协议（Point-to-Point Protocol）</h3><p>点对点协议PPP是目前使用最广泛的点对点数据链路层协议。</p>
<p>PPP协议主要由三部分构成：</p>
<ul>
<li>一套网络控制协议NCPs，其中每一个协议支持不同的网络层协议。</li>
<li>对各种协议数据报的封装方法（封装成帧）。</li>
<li>链路控制协议LCP，用于建立、配置以及测试数据链路的连接。</li>
</ul>
<h4 id="帧格式"><a href="#帧格式" class="headerlink" title="帧格式"></a>帧格式</h4><h5 id="帧首部"><a href="#帧首部" class="headerlink" title="帧首部"></a>帧首部</h5><ul>
<li>标志（Flag）字段：PPP协议的定界符，取值为0x7E；</li>
<li>地址（Address）字段：取值为0xFF，预留（目前无作用）；</li>
<li>控制（Control）字段：取值为0x03，预留（目前无作用）；</li>
<li>协议（Protocol）字段：指明帧的数据部分送交哪个协议处理。<ul>
<li>取值0x0021表示：帧的数据部分为IP数据报；</li>
<li>取值0xC021表示：帧的数据部分为LCP分组；</li>
<li>取值0x8021表示：帧的数据部分为NCP分组；</li>
</ul>
</li>
</ul>
<h5 id="帧尾部"><a href="#帧尾部" class="headerlink" title="帧尾部"></a>帧尾部</h5><ul>
<li>帧检验序列（Frame Check Sequence）字段：CRC计算出的校验位；</li>
<li>标志（Flag）字段：PPP协议的定界符，取值为0x7E。</li>
</ul>
<h4 id="透明传输"><a href="#透明传输" class="headerlink" title="透明传输"></a>透明传输</h4><p>当帧的数据部分出现PPP帧首尾标志位时，容易造成对PPP帧是否结束的误判，因此需要采取措施来防止这种误判。实现透明传输的方法：</p>
<ul>
<li>对于面向字节的异步链路，采用字节填充法，即插入转义字符；</li>
<li>对于面向比特的同步链路，采用比特填充法，即插入比特0。</li>
</ul>
<h4 id="差错检测-1"><a href="#差错检测-1" class="headerlink" title="差错检测"></a>差错检测</h4><p>接收方每收到一个PPP帧，就进行CRC检测。若检验正确，则收下这个帧，否则丢弃。</p>
<p>使用PPP的数据链路层向上<strong>不提供可靠传输服务</strong>。</p>
<h3 id="MAC地址"><a href="#MAC地址" class="headerlink" title="MAC地址"></a>MAC地址</h3><p>用于媒体接入控制（Media Access Control）的地址是每个主机发送的帧中携带的标识发送主机和接收主机的地址。</p>
<p>MAC地址一般被固化在网卡的电可擦可编程只读存储器EEPROM中，因此MAC地址也被成为硬件地址；MAC地址有时也被称为物理地址，但这不意味着MAC地址属于物理层。</p>
<p>严格来说，MAC地址是对网络上各接口的唯一标识，而不是对网络上各设备的唯一标识。</p>
<p>一个MAC地址有48个比特，即6个字节。</p>
<p>数据包转发过程中，<strong>源MAC地址和目的MAC地址逐个链路（或逐个网络）改变</strong>。</p>
<p>对于一个需要将数据传送给另一个主机H2的主机H1，假设它们中间有一个路由器R1，那么H1知道应该把数据包传给R1以及R1相应接口的IP地址为IP2，由R1帮其把数据包转发出去，但不知道R1对应的MAC地址是什么。R1知道应该把数据包传给H2，也知道H2的IP地址IP3，但不知道H2对应的MAC地址是什么。</p>
<p>要通过IP地址找出其对应的MAC地址，就需要使用到<strong>网络层的地址解析协议ARP</strong>。</p>
<h3 id="集线器与交换机"><a href="#集线器与交换机" class="headerlink" title="集线器与交换机"></a>集线器与交换机</h3><h4 id="集线器HUB"><a href="#集线器HUB" class="headerlink" title="集线器HUB"></a>集线器HUB</h4><ul>
<li>早期以太网的互连设备；</li>
<li>工作在OSI体系结构的物理层；</li>
<li>对接收到的信号进行放大、转发；</li>
<li>使用集线器作为互连设备的以太网仍属于总线式以太网。集线器互连起来的主机共享总线带宽，属于同一个碰撞域和广播域。</li>
</ul>
<h4 id="交换机SWITCH"><a href="#交换机SWITCH" class="headerlink" title="交换机SWITCH"></a>交换机SWITCH</h4><ul>
<li>目前以太网中使用最广泛的互连设备；</li>
<li>工作在OSI体系结构的数据链路层（也包括物理层）；</li>
<li>根据MAC地址对帧进行转发；</li>
<li>使用交换机作为互连设备的以太网，称为交换式以太网。交换机可以根据MAC地址过滤帧，即隔离碰撞域；</li>
<li>交换机的每个接口是一个独立的碰撞域；</li>
<li>交换机隔离碰撞域但不隔离广播域（VLAN除外）。</li>
</ul>
<h3 id="虚拟局域网VLAN"><a href="#虚拟局域网VLAN" class="headerlink" title="虚拟局域网VLAN"></a>虚拟局域网VLAN</h3><p>由于网络中会频繁出现广播信息，就需要对广播域进行分割。除了可以使用路由器隔离广播域（路由器成本较高）外，虚拟局域网VLAN（Virtual Local Area Network）技术应运而生。</p>
<p>虚拟局域网VLAN是一种将局域网内的设备划分成与物理位置无关的逻辑组的技术，这些逻辑组具有某些共同的需求。</p>
<h4 id="VLAN的实现机制"><a href="#VLAN的实现机制" class="headerlink" title="VLAN的实现机制"></a>VLAN的实现机制</h4><p>IEEE 802.1Q帧对以太网的MAC帧格式进行了扩展，插入了<strong>4个字节的VLAN标记</strong>。</p>
<p>VLAN标记的最后12比特成为<strong>VLAN标识符VID</strong>，它唯一地标志了以太网帧属于哪一个VLAN。</p>
<blockquote>
<p>学习资料：</p>
<p><a href="http://topurl.cn/5jl">计算机网络微课堂</a>    UP主：湖科大教书匠</p>
</blockquote>
]]></content>
      <categories>
        <category>Computer Network</category>
      </categories>
  </entry>
  <entry>
    <title>梦</title>
    <url>/2021/04/05/%E6%A2%A6/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fc16466f1f1b679632f072c620aa143ea6a8e185f591cf7237d41adf10951a77">e60a61a1055049834be66d4bcabc5233ef368abe3e6b0cce00a0046c1317306b2300b73f6ddaa625c85e944541fde064f8ce35ff7504814f9cd229c023bc9f804f01efd18df64892f105f21f7b12248e325d60bd384cdb77d25f7a8037d75df72219cd843ef25324cd40373a2cc4e1f2b14be263a2da5a80157b510a5476027ce9424cc89071eb639782a50a3729d9a81df6c19fd4ea4f8a9d8ff3bf9e5fac5fb28255127b31c1acd83aa363a6df0ff26f5716de7b83c4b83cb129b2b5fa34a0f35331f2c1983b846fcac1e1075536cc22ab19b53738884bb96701010e17c18173b499904c31b158166f64b7a1bbc2b7fcf4de323d6583085c16a61c1171ce475f095cfe8e2392ffba154a86775e15c88d706a4f7040e28b95d4fdbbaaea7fae1f09dccb64ca379689c68ef66a3ad89bb3f9709d292cd55bc6cc6f15d80d9210ded0464433a3c0373354a6040264d015bf33d50377e761f6eb7c9413d29d65560a92caf561407acba45f76effcd906f2f8f26dbb6dd3af6f0623dc068aef5df5974271192006175f56ed60e0e0c7d1873bbffcef9abb2876eebcd7df669e4439cb5ed61cfacff9a6dde2a2adea71a40b441a118aad06ee1aff376226c33fbeca867ff500b3f57e055d61fadb2df8bf53b82de07331c8ea1413e5675cb05c9bd9da261ed313f0594271d31433ec2116948a94b1eff1c5c7194326405d33a2cf555f2e67a7be509b8d5f41d156987d1b47096285c262e22237d6e7ebb1d361e1168fca917aef5755cd1427ec0ad360399fe67163691273d30041299a766a1bc1f7ddb753a0d8b5f1c49e9c1ffc58bc47329f43754d0d7dc1f688c0da3ec963a87ab33983339b32427d0e1ec268876d8c50e0126cb35de743ca04c58a4e8be25663f384b81591316bf816e70a1d2980090222a1a1749c030bb3b98b5a208e2ca4f3ec49457a580e97fa8b8b98379efb84e71eab7655df10dfc586413e4a719db337b2f59473fa6d65cdc4b793f8b8154ae25dbbc704eb03b99045e97b7ed0cba50e566c648919b13fe6879716a84cd0f18944616daf88034476b55bac03ed3bd6ddb448d333697128a3d46988e3d972e0d4e19ac928984ad54f829c7918c78ff3a49747f6940abb50f02b784b0324bfbfe8bbb2922d1b9389db649d9b550af78cc961749f03f9e4e0201ce7da8710e940a0309a02ad00837ec8daeb7759820714cc4129052b51b7ece60b0a3bac340b34498434ecda8715fb16293a074802e565297214a1ad9ca7339d625eaa7769fe8280e3d1ecd9c0db453d57e6ad2d8d27020c1e5a9748ef4ab2e42161de91b89da605eb3dfe928420369bed37628f8d5574cad7e22c3ce8202e8554e4797e9b2f214a14bbd29f938cb64a4b13be18e6ce7de7f621b20dc0e7b3c0785711e7ea7a42893ee9ff6128baad967b0a9a1175e6d0613599faad997d7508566de0c45c755052db664be666eaaf5e00599ed739c3812ab0c5cacfcd25b2d07465326daf1767b5e75713901b8b8576bf713dff11a45ff85ed052cc42dce6d38a9331fe372c8e3bd663a5324fc41cee0b9cd3c9c053b76dfb22f1e71b1420b090907f15993a94e935279a84a2dc8bcc86e4410ef84a1702</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【10】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9010%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="74203530986879863a4895b7afc78d594e7b6cbb73fd75123b25d1c97fb2c7a4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【11】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9011%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c686117dd54549c59b41e58416e88662e49ca30cebc443350712e5a14ddabc37">e60a61a1055049834be66d4bcabc5233e6bbb96340662efbbb7595e6402c831dee61a10d14432d30c329bfca88dcd1fca030178b7f8c8ccb9e15d21de134c5acaccd8f4d29033757f3491c9817ab09f103b88d4a8246381d82572e8fd9d0fc34c1537550ecca6af3c4d8e98ca5254598bd4709c0919570456c1c3242375414781f798f5a9b89c2062515cb303581a338d2eedde0f1364d03ee04970faa0e77e6df95fe2be62890b841bb044c41f4179a2c97766cba63c59b1cf2b3c090327105a2f18e77bab281821cd052c141587aa14158450b9eb1a85c498010b6f30988e4249fa1c2ae87777c5cef44ffec22b2ed600da635860545bcd96abd307b0c818b0e61aa5fd53ca8fa292fc192400fec2fefb045a8941ec7a0783f7fda3f40da39d88379a3fac0ca818f46f4e9644f67958549cc99664ec77482374ef31fec58aa1db5481975a865ef5151d024c1ff0543ba2f79cf13bb56360a2d665cae8aca2550c268a0e141492d2ee92ab1f12853260138b89357b52cd8d09de115324edc27c366fc0c9ce5f24dc87a3fb8e46798383240dd6b0351a7ccbf0b779a7c3133c1ac00e831765c88b7420fe7281f77db5c3ebf3914f1746c193c6a3a527aef035c0f2747d94712b885caf870b7f724a8b8b9d436ce4f3cebdd63c247152603dfc0e63e5000a20915150a6a2960bf9cd0d92e12ef942c8fb3f53c6fb273b47d250f65b668f97ab17991bd43135c34500d849e0925337c68662948453c894bac2d71cf6930f9bf992943a85a83664e72bca0b6a61fa5ddbb9001be80b93fbfa4d267f86d4072c9a5b83d83af9e37540832b0da4484c18e7fea98f4b7858d65bbef61fa0ea8fa5545848ee24b3d7f9aa9bafe6ec07a6dabd4667127cf33cde03e01fddff0ce9c3e43ddf98fb516ef97ea48b634a6ace9b2fa21701fb9533eca4f3ae8ba3bb3a2b87f014e255ab79644305919d7672b5e15ffa755332a55d20f0d63be431049d80f080ad5bf999985b77ae516e92518cce402b51cda4de1563c61f6fb8f4858ef26fbf1794f79dc6a7f85e847fcd5eccc819c8ef048b9a0ad55fda8bfce129ed952749bd8eb41831c74bf1159ee0677773f0472b9b4cd8fe88728b50983a1c06767339590c9ac366662c42fa5ca8d3073760b489eee368c7dc7abd0312676c2bb85f40d8c507a36a323ab8a24c0f09bb3be0ef3624a86568b96394138ef3e654030e87b75e5abdef5c640c7cc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【12】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9012%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7b966b1d70eb3dc80fd4df55d7359586cfa75edc31135e4f76312276fe316b55"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【13】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9013%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="555f98ad336f6919b270b055fac2307f7746b37651a1fe59eaac8f0a43c902b5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【14】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9014%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9b40c326a8a3ee79cc4709718d9a2caa316b96622175ce269f4734974d14ff53">e60a61a1055049834be66d4bcabc5233c217b1be2e84839dfeb1fc73b79c0b78ffb3bd372ae8a7c6b3b29218fa2770e28bf5ff217901a67ca44c12b58c5cb3a62e77c715d9b98860fffc44dc89c7eb222e3dee019991477ca0e91c0c4e78302e835a0deba307e507d81ebeece3ca829f64e3ba027ce88ac0115c38ea72970994917ead169a532d742107a66a501697ec1d8b49b972820fd1733b620fe96fb774a106fc9073ebf4fac4ea6f558a7afd6b170cb89e741e1bfcbbd36b6461f4c2ad3ee6c9d5348112813282d2afc14cad02436ebfa1d1602bb3cc7daa75ae39f74f49054756022901f3a1f9c1d835457447c8b0f23a848d7784e74f334080f6c74e937e3fd733d5c845bf50e1511e2a1c2c5a37e03ca55612f34ed28d4cb462130ba5f607d4ea1a6854eb830c9b8b66432911dea96b75c659dca77d9270809f3c2d36957825284bfc19d871b81cad138ecfac7ff6301651acf6c68c7d9950332aee96bf7a1499d47786cba221cb6996d0a19d23fffb622387053c2fd968b880d68462025eb8fb18e86b772df0ce82bdf85e1c741b7394f4c74f3489314ead7a57343ee44fe8a0f17a2d5d9aab8e4662e017668a664187146e4e1a5aac302fc2c5e2f46b3aeb10043bf00269e5596593231379bc1cc52f9f779babd1a60b24ce70bbab2e9c8eb43c3d4a916d345708540e706df02b9f70fe7a75bf8b77854a8415c558819e7c75d32ef0d757f3d0386c69da281bd79fb98fa617f066d963efb7a1bd2bda387ddede5934044cc027a233f767ea239bdb49c37b97ee759864b97951d09669d07a6f805be1fec1a3fbb583615a3a0c94f8b9cafb09a628851568780f221b0aa68259f5f6b281835fe4374275587382cf1849558aeb8cb99e0902e7e3601963dde833e90daee8a2c48c28044f2379f507dc894adfe8bf79f9be3682bb69e18f23b59050b4b35d3585732795b27aa68fb255df121d0adb740cfd3896a29a5f6b5d3b422f2a851757517dd113c383974d5ce8e84eb95e3ac7ffbae9c5a9412f39e226160e28629a1d5c901d6e40bd0fc4428b50776d5fc28164eae4b204f439cdb2dc05f1d58330a3d4b13dd4b9ae4e53c5b5b264d21e5e2d1310085d03802b1fe562c53a0447df2cd80c01a8d4301ac8d579a41796c399475e3304e4a603edaf8d1dd78fa4efe2a1e691dde1f296403de8ef6895325718bd3a65b8e872583b84d4606c8ca6919096cb402fa6602752f251a369d76ccf0fe93cc34016a0aa5592838b3285128af4d5a8c85fa04909b9fe8dc321d9f1edb53d2ebcdb916168c4e7499677d8a9bca4d2d933aac1717f1f3dbbd6e3eeff004495f2550e52636ec0e666173ab9287bfed943dc754471ab4329f2f84cd134d0385aa312c5e4fcadbded40bd7c99b2d37e0b54abe25e792dc87fa635c70e5c67ffe0ea22cea5fccfc9884919a5bb215defc4899c2e0b9d7fc8b6230dc14058a20b7a861251d198dac81955e9fd9c21cf2cdf17ce616606c2297607c5a432bc48580d73a842b3d33211ede71e34a150557df8682afddf7a3f8a32979da1a60ad102fe4ed91ae5cc2b41e8b3e7df9f8f2443d3f9961ac5bcaa05b44c066cf80e81b9ade7e4b31b1718da94794d84ceab0113ff1d07d8d27cfa53637702ff485e4554522e2af99e1a9baa8c229bf520eeb8a4f6cca7158e05002a8b9db069f8e505b785e8aef5b662cbf5024a8314cb47ac0cc9ad6687cf9b7eaf9de443bdd45cd9e26ab28ac5abfdfada2949ad7495fbca57b18406a71b1f0e26f21e4d297645cb646a55a9ef330f4fc1c893e22acb4acd39893ee382906e54288ccd12851835d04bdbdce2d934efe3413fd699b4079a47d6becf76ba6499764e8410deadced2554285bd70652d9cfac5fd67e0ce04e030d932d50f8ea705fe7f2bf4ac3e3bc5a2d7e8217f2ddbc724</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【15】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9015%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b9b030e8bfb8116998f94fa2308946a91b2e228832f24f8cb6928e49326bf07d">e60a61a1055049834be66d4bcabc5233a13f4a9ed54ef15b962a78c2686e5fed815549f0da2875c710a359bdfefeb78ae1736e7b541cd60ae7f536fc4ac3c674271c48831590ac684a6c21723c68bd4d603511c70c4c9734e262b8c41d479c77a67c4e67bdc58a403b7da2555fd714ea6650b1a5dba81050a8a7e1f02461d9df2c530b35801d7886892d9a8b349e24ce876f6b392ca365c8d415803d4caf9d8cb7f05d956e268458de0fce5c959da7878b88a571f394d294c844a48afb661968ef9924446ffd2f4d3633b1c21b706638f52ea8de9852309984c2a73ffbf9690d26e4524d75af43b8924cd651be801b309fde33af969ce8de90b22240d84802da3eabb450095ce72d7378c8266b78bfaff45ebb69be69371ead669bb25b0b3124fdc721082dfea99e424920672e959bec42a442d3465cb29022587a8e7e30380085ddc2b1d0ea1708766098d7ed8d7ab3b5e7f05cb97439e1a2f99f475ae59082e6af1170dae25243aa471a4a9427e2e06bf8b26670aaa6a30774fa127580606debb66ba0a9e246017a137931be624624fd4f5b3d56ab07930d62211e0c11a5697e201aabae8dc267e1732acf99ce25a5f888c13cd62d43e5cc67f2edca9494862215e88a625e8c2efb9ee14dfde2a0127b503459cec8509d032097dd755e482d0ddf63b6c545c6ca2373472e97482774c87177f5d477fdfb3ea4e2d6a614f0e5cf12183b26337e5ae7dcf272623ef6cfba5ac19cf775a1c72f2013c5ec5f379f026a8a1e129d78717f507ba400014f627150194c15a31ca8fd281c0c73d024124f74873b045bdadea8da0a11c8602a1ed515762032b4f6989de6ede11d72b95c85621d4fd3fa1b21fedee4db683d2760bbc2cfc02caf554aa3f7a747e837ed9ccbe9c39d533338012b72c38e5acf2ab466aa2db89b2de5aa8978a9b70ba2e1bf484080b6e4893052e7f0b3f1e42ecaefbce8ca355e3ea78c4bc4776c47fb960aab6cf2c19c0d7dab0757ab93fec6df24b66dd5711540b631eaea2d4bfce2b0aa6f0d35231705991ace35de93cb948baf54044a76d19ab7f9eb2fed0da92692b1d1d268484bbf95cfa22567e9560a24aa7463ae17b160b8468a7b222a87ab7cd785a962dcc9ad8640cf9cfa8aa938239559e77b2bc3e5bc97842bae0abd88cd167fe291c4b5225248667d36de022196024d07fe7ca90a4c86a21cd6ad74f334bb32b46ae1ae7b4dd5930cc3eac3db856a4b78fb989625f9f8346acc343276b69847a963c8666df4d032dd6299da42965e12c2c4d5c4d50b7f189a7e6ad79e7c4ba2b49b79e0fd641231e391614236a4504ab33d536d8f5590043afca2f6ff4236ec94dddc68403ed1f7d5b0545c3ec433d1c04858cee4352162bc1bea967576678596b3805185b48c9e0d2c74ff20a0004e01e6fa0d8f121dc84b2bb2b792d1afca0b6045cb0f1865ef5cdc0c608c5baac4b0b821501c4aace62ddefd3b7a29d72b4609b0f9af84745e7d5e27f5c14b6025625c4912de8e948e23c12eaaca7eade15926fefc29b8eb709731d58592faa635b60bb07596102557bca06aff46c775de31de2468d3ee830d8b91f3a7ad46485ffb037929fe6665a15dd1ac7ec7b94080859c5a47cc3b15c3d37c94d79ea70ed1c07216bd5caf04e9f14f59e0394ddca96c31e7cf94342e13d73a34942ecf35ae684907b1c294c802de6d5359bdf19fed3bfb0b96cb497d662c7b17465de1b688a1b397b19b9bb45aa0e2b60b04f05ee7b0e862e6059c53a90d004f9974e389e2a81b40c112300c6b8fa34d96ee8d1f9f87ad7caf14e2472d8f1a1e832668a563739d93ed1ce1c1e83900533bb5d490accb9e3e393724563165acf28904ef41ae7e1a582fe6adb1cf9089263e606f802a373066650ac842fd38c40ae01a611b4fef2a71b676ccf1047420216be888b10b1ee99627aea2d606439a65daab14a00d2e55b78dccd645230eb25098bb4d636546fd7d6838665939d4e6f3a85c695a66ffc7a21ee32e61043930ee00d1595a5a135fa0d36f4c01f18d9b0e31cf7bb8eea25a2e0040e68bb99425264317f25ac55cb90276b544d6eff847ef2ef8b3f498774c356732050603ba1c315cf5a3a539d5b389a431ab4a8261ac92a7385b9328b495e3ad0ea26b951606e35075603f86d27f5766bc347604a895a3f27d55180f599211ce61f3c13919d78b601fc7b262a77c8993d560e60396a25c2b594494239d0ab84ce15da2ff0b488b77c5d79a08dce1a5a838b4bfb8c6ea5e25530cf8d5da1fba4472ef6bf807fc31f3870ba1cd642b06cc463ac577c2423ec01676407d20e625b94e9ad3e8f6a6937b2e7b25cb8af2f107767d78199064f730a19e871d4ae47005bdefe1754473121c1a5154691ef892d6909e239bfffb3657bb2cbb18a2ca7f9ec473bd2477d9a9f19ca4d058d042ecc7c3d6e2812b6ea31a776585ced8eb568dd78c9e7d2d4f107f21af993a52872121a37efac1a7921e6b6e306cca9ac5ecd10ca910c11552608b2f68aeaa3ed10feb552ad547e33e6031c77bb6b861ac10f9819f3ce187d1efd50cfd6fa617810a8782de15b472b75baf541965093fd0d02cbba79af89db3e36fb4992c58cfac1c813579a91c1fbbf3a2887b7294c0510cf0fa08383f1a165a3edd4fb74c23555d009700f47cfc401f46aea2acf8ffe9586fdb950f7f00d5dd56a302f5aaac4ade401c96c704a0205c9d888d205ff434a9b6804bdbfb7d1a18eca1d1bc2545985a175dbba776771fbed8a97868fb41ae110fe78867382c8359e727de9c9120df1999b63663a844a6e1f2f2f2de9312c3271e7cc985dfb619553a677dd18bc571475913eb2379d74b0c53fce260a16a89d24ddac878f802ac38fb8379bfffc3fcdb621a45b5df002694c262362929fdee938c86c3f0f042143c7b47d10074f4a3ad59ec10960886ca41b9c04cdd206d8fe6bd8acf6e615486457b1c52c4517edd075def564c76b21da1ee8c023498768c11640dd62b3635e3e24f0c362bab02e5209d4081120ca410bdd2575865577b4c4147de7069814c6637a9a7aaf19756f021e69de01991901ff20eed4b8c314f0c5559fce7904bd9a2fe3fa56f590c32592a1b20d20be2ee844d8b101aaea36de49a02d51d3b3fb3103255206a2161abec965cad46f396cc735269ee295441c3ddec0b57a193a5c746f4102ce21d714a9d1ce25b2759858076e4ccbcf0fcceb61a5d0e4fc61bcde632e0c5e572932fbadce083008b33013e9516dc1f4c2b0399af78f320b76798c08b72a2a69458a046e3b94d6bb25bb92fe212fbe6f69612ae632c2fef28d868c34dcadc37bb95749911b5cd59ca189d05be4c60346388900999940eba167139685d9647544e217d5a13864d29496598eef0b5ed92ed7f4b00ff8fb9e30e537c54d97c91c11d7454d16bfb51e96793b7d77275027cf5a97a75f8315fe014da1e8d8c42b71c32e9d58925d8a024719da3d495c19c773569caa5cb7154bb453d9a9eb52430b801bcfdc28456c65468413c1ef693ed478ce8eaf6d5eb29168650067a56f6f9da48f130ade3a2de866b05e745f36fc85213c38fedfe1298370a71ef54e35d9c6790db41f538c5b6fd89ef0420c68ebec7d61ed561f6847337acc1b85a069884018b35b43ca836be741fb3dc85c2d5f34244f118e031f5f587d5a5af1ddc9d1467156ab1260f20b68a3b8195dcdd7f84514b1b34b9125ac889004a5121c0ca4e92559fa2ccab9661accd98ce7b2ce6fc47b4e1165d55d364d4ed870c71592ad452aba2d2639e58477e0efc66c3522fa6679b73233f5532da5ef824f1597b8476e921f1930ed14e61506686e5c83fd20ba8ce5d9c211646db5c44a118e931b15184247bcc40d2289ac2fa2a8dfec55b78d852222b0b424647cf28fae15523e9f7beb1cb3437854f4e1c6f9b70996ff8abb79c885d18dde4348073dede8715d10f6a455e558ee2d407299a5feb93427cd1ce72b4c96199092af42bfb4de3068d6469292da2375934cd51f2fb739325a081b901b2bdf288ad4de0071eff2c4217a4ae405212cfb361c6dc95fbcf070280ca4bac3f2d406768e934fc017dc9c0e7387443836132324d457587fe7de1275d0657593d1915fd7b30cfa43a799b5f1b3db9a356a36621af8e57f692a855928c7b8c6342dfb431ee09d10826dcb45b672794f11d158aa3be76435c15115dfccc141cc4d08072bdef863abf0e05e82591392346148dd5ec1c24f6beacbae7dda2c42571121354bac2eba517faf8882d0bb3ab351f26af66b31166bc558bf57582f187787e4d1258759dbabd8c1641fd43e59447ca1b5167c76833ecdffd808ef1e54cbeebab914fe81eadc07e454060a0be67b602b4e2b70deb06805c37c42be75a8022bb374cfc80c8930b284dc6c20bce2cc510bccf81ef9a0ab1adcfb6973b85271549e0c48263510d100586c3dbf8c0d18782e48aaa62966bac34e1fbef61fdce3cc003bdb05ccd4737b5c590a464e8cc0516b4bb5c4409b6c8b9fe9bdd51b8df0a02201bb6cdc36ae003499eb068ead764112a91006b78c08d63ab6990b568937e511c2c3cfeb9a766d3a781678751f8cdca</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【16】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9016%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="efb6d3b448fedee0cc0e19b8d9a2ca0f6a750070d859e892c5f5c050b33e9db7">e60a61a1055049834be66d4bcabc52336b6236b26c26566d4a0500a3dacb29b039e83178109c0b0eede3acf3ceefd0a940cc38849e446eddcbceee29ea69e3ab083787c6de4805cf3411de1176a785341c6bc327bd11441fcf317e6614fb8935313f3dec69504cbf504d2f0019990293d921c1a6cd5b2dd379674e7583d3073b6d2e59e5e5627a49342fa5f52b6fdabe27135c200d0245a5063b322884db06eefd7e3cbac34b336f7117167ca8f1b0d1b2c0bf327800b898ec2168e45a2c19f4a02b511fa2445abe02bc713219627dd4a847ed92ab965def2d5f12019b401bab6140a5405a8105407d6cb13ec4c03917721ca6ccf5794b0a12fbf340cb01539358a0601e6a7d17c31aed298949ef3295b50e8d40a516b5ed95f8950b24ded8bb25b43b87ddbb4c19c7ed4fa79a1f6063c09687396431dfdb0a5f82a12d8fc41d8c61cc046c5de344832e686fe7ee10bfbb20c0976dab0a96a58529cb7ff11354d357ea795a8b4f63d132f3fb2531f595ca58e23f4d702b0d1091cf103ed01891b10c5f03c1f18f57efdfd63cdb47c4321ff0cfbd795069e8f2fbdb04bb209949aaa104243d3b710c0266b920dde3df0e9e015b0fbab9665c3a6e2c77f1678e845f543ff2bda2457eab0c21cf8a5e12bbf22a7c95ebf8a631a8cd01fe50a8eb568722d6bf0108fa41540da00bb28ad0af3737ddb249a81f713377e1d47b0a917abd3e21e2e69b078a6fcde9810e65723724c1a9dac9e01026a259d44a847a20e561aba21b3fa0ffba12c8baf3d5b91514a9b51462558b35c1c63570c185440c6e0ff09b29145f05968ef8c35c6456068f044b6dd7fe1eb8474537fe5558da78c4ef12e20674fd68429a6b9023c844552b5795efdefdc8146a21b1c5fa969375c294c67e94b21a39216d000e8bae5ee10f3d749a2c1ef2a456e3b8d401f2a796360ac7f3be7fda704a566881cdba78f3c093b8a6ecb58f08eba516ccdcbab7192a6d36d37603f317585265868867888943442ab277bf95ae0d89afd6301a2391ef66a5eafcd68bfb82c3dfc6cc997ec8af49cab0a5508b35ec44c786034ef852cf48cba77de6152e8de5ddaf5a0e74227b2e3822e449991bfd8b91a4a3b486a0e7b1ba9a2cdbc5bb7ba6c8c80d88f049757428a0b2e4f68137072175d1154cc42649bab3edafc7822574605fa9c4e43c381bd88c4a96c0ed1781e92ece2e0e9bd08628e0bdf0537c68fdf1c7eddb50f591369860e20ea53cf5b25c1696ede820a158e9d9de6ff1de99fdf6217412c53389868b24940a0ac6a1f50809f58ce2d0d11fa40e87fb8246591e7845c697e458dd250ec6c1b13e257cebcb8c4ff1aa91585fd348d4a6a80fbadac1d125a2b9eb1ac0f6ad4af83038b5c05d72522c21ef0ef2ab0a99b76eeaca349e3e11ccac4be8def0f9dafba77c654454ce7ec251dc469584285e1591cacc0d692005233bc82ff009a96aee973631686932d0cc5d4624e40c8ca0274570bf91c10e29d066a3f2a9f44a41e256f209e3dc66d8340b642502c32030b8b3383834a29e149bb8aa424dcd80f0df852f4e9fcc8a1447b851ea354ecc491d95ae9781674c0005232d298522af40f926eeb515db74b8bea3610d9ac193c8fd4e4ee1ed4827473cb1a6bd36d5def67f19865551f690813c06d3f4ea15a05dd9cf0edf3ccbd1b5a735d22c1a874433b4b0157f712520b9d1fd6b5cb6700ab8e9bb6c6f9bce2723bd1ed602b54656eb2f0970b59cbbd2c65dee0481719e4ee2afb8cf33205dbf18507ef06bf329db87f7e8db3630ae50a2d7ff8738f06512f95c60f43542aed75cd86ae7c0613605a0fdd07940be17342268d93660c1c16341df6bb9ea6f7375c80a0a50656b3fb2de5b6c6f80c25bfb757d38e7de0ba79b816b65283fb33d5491ae5083e923000b92830bb8e50c48b84846845a82422c942fa081619ae0260ba5db112f39093c07dddbff6aa2bd35aafccd63df7513eda46016db045f63e0cfd51d19aad76285a5a41dc2a0591013dc430546bb0315153b65a688617cd4c5e604fe53326e7c8e0df8daadd18743c96a89cc5ff133128c99029a5271876b7368156ae5ab0ebef829707e573268b325199e3b9afd92c842e511bfdf33d588dc96b12d20d28ac77164fc42d1dcac7a2209157ce6d001</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【17】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9017%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="61346dfe2296fcdd3d857188c056659158400952ee2b11bd3631d69a0563422f">e60a61a1055049834be66d4bcabc5233effb9a36ea4d92dec97d2f338119676baabd26af32f673833991f24802fd2553038e33f993d8eb5c7f80c88d6f5c67c0296f999c307d2b9c26fb978b20ae51f5b840f9fc68709e4f90ca19357b8b03650b61cd1d27fda9abf6429359957a658b519a36d9ea27f407435d7a83c328a9934e75465ed66226fbb225498f7258faf6060998253f1b73523d68b83e1817f04bd9844693f74617258940545f5390554355dcb7d0c9fbc2c8b00ae93a87fdf954b785f81b76bbddccde14ab012048842989e165cc8ea72fe5858a957eeebffe240ff1a2ae72acd41a6ebb3acc668a37e5f20abdecf0b9187f62ab90c05cd7afc115fcadba452a18b6157880fbfeb274700ff212c84f26fa429f635e907ccc440ee81527715d17adc30191f2d94f0f5d8445c0dead35734f4988c33a886c87a9f211539b7c140e4d2717900030a3fd1e7ee6786a48afea3a10244763033c8a272c05cb7eebc00bab3005469e5da51d243fda5f85e22e5e17e0bad345ed59f61a13c1a276edb0f7ccaf5176c713c5187d7ef891484b78b2f1be2929c14d3d981cf14303e378edd078ba8d8a084aeab16e20cdbdc9c8bc0389f8b74a2b39f906ce2356a6eaed945dc1dc4925090f33526807ff9d42bc8d388206be8a6ce9f0a10cec96ca4115f995406ccbdce93312d4986a837e4d76840a4dee4ca697f4597b29689db756e0f31a0a0e8839f40502d184c2b75d73b2e5a9b85a4acc6e3b82027187dae44863aa08de9d3e3d5e34e638dbd617d8b35dbd0cd432dd13940fa43cae8f1a9bf1a6cbd45aa94d222d1d5c5951b972240fac965c7c2947ec5cc6df8c39ac9fc160a8bf5cbf99cd4e2635c3eb6b11bd526948d4fa20b9a3713b41228ba62c9d04b9033e5095217ea90f824e16f9e2f3f334335431261680a9ce350107907edbeac878ead49398152490178511e5d2895f5ff327019eb710923b83943a4cd3a25495cd668e4b42badb11cfff9f930af6ae6e98fb3b1239cf65faafe43124e9c1846a13cf13184b1446b8495ca288574171e531e972bb7d4a6b1c1604d03c5b15b83a299f7daaabbb180c6e3cf888241a629364943c12018f74125c1ebdf435d255043cce66a94b1d81d1f2aa5a9c5d6fd4d5e5499fce9224047814404ba71a60110198464d6a2aebf56c3e04fcc08c615ca714558021db5fef44557fc4e27a9d34881e4b7d1c8593b47d755736e805ba55c9c8c163bbc66efb0b144184ed2bffe6ea8aeb056a64cf5876ec35caf9bc04931e1993ac092ebdae151bbee8db99be56cec9dd02dda8552565c754c7f709879f1cc16d97743048b1f79e047d0c366e98d34e1baf0334a6d3fb786ed38585b3d97b809ae1769382353104f330cad91ea62ab46773b4ccbfdcc5a91ff7aefebd46545db51eb06ae2e8d11e0cd48641a092caf18a59abcb58ee78fcdaa971755efbaef3404d0cef41765cc2d41b16cee4360a1a598e98ab4ded0fcc181177b7dd07fd0790137760c6c2e1ddf7db1fff0b4e193499c087432022025814af70747cfd5cdbcc6c32f3b7e9db1477a3e325c1bccbb2210908eecb8b984bc3b5df97424ce2fec7e81e71549f97bb3e00948a7d33fed37313eb710cc9dae85c319b50aa25be0bbac29e23e170dcb7749e49bf925249923f601abb2561d8732b193c16a0741277917879e70ee117646a13a58fb5ae6c724bd6c9ba7843e3bf52f641eebd2ecdfa6ef248fdd7fa335cfc489a6f53fb718a286e5ffb3f8e8ddfc24e3a7909f6049bf4a0e5af96725e3d90e4139c5e0b932a1c6e2be150ee8835f45fe2e766917de534a91dc6e6bba54bd2a406aee38f5d2d781afe97133c7f1d6faca9f8790237a7c15fa8479bfd87bd67b8d3850ba74705ae6a4c90c8eeb041a21060e6c38f2f376e785902e63d1bac2f1f7a86882b6c0d7b587fd01c441c07a9c22baed063a4a7dba18432914d90304874332277ab704f3e749c0005e7219c76a3c1bc4a5171243fc1dfc298d36dd6929eec84049f393ac3111398980c7ebcc45fac30816c436aaea16580f309d8d69a2193de6db73f55b6eb80eac20c68e66d80f00f84d3bac98cfad200633e1b1d7be25badf2d8bf14bed51cf8372cd4883c98f9fe849facc192c1cf98ad4ef329be6cbc1b00839a59aa6de81b932628a982e8d57de328f1356da38d33ccdcd7873024c378436ebc3a0d9b6794dc09a0dafe137e6200cfc3b4a7cd21c9a4972363641902edb827c14f151ced26f68da552b2759b6f6b5ba1e92281e72c0d3f81ee153ddf37</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【19】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9019%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="de187e42cfa018ae040bf86e8254bbd6daba79cdac6d4009c3850d28dbb940d5"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【18】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9018%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="da3fd4891681964f4363b46d11e99f873275f0617bad11b4005f5767720876e0"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【1】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%901%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="625efab4744801c978de6151f18f4076b80a26326fddf8cdee8d1791af0c234d">e60a61a1055049834be66d4bcabc5233c9921563aa9ac10508b6a9a3a16fb0f14f22dd6bd786a7863db51637e96ddbc17bea610f0cf460bd3fe37996d8143e30274aaa64cfe96a7b15d52c6e542b9ee5404961dac397a16e0fef4e83eb60976e76236073a9b62b8286b152a03a4269f32a8859edad46f32133251e785d912b16e0c6deea28e9ea8f1de249fcbdeb8c412db27a0fad1f3afc9624a65fee1d9da4f573bc11542b2e0917ad964e56ce3e80582616bf1610e0c47e908580a6e71dfbb839939ad96812e1c2391df6deb846ae23e58bf195427776780a65675d560557c3fe253a32dbfaa85daf05c62501e258d78ef7640eab1d288cae4a3e5c182591799d248310893e218dbe80ebc3d3254bb30e33f8149e2688c915d1936c70ed56f47192fe4206ef32e03a821dc04ef88c2ff4a7e74a4cbd20caa2a57a21fb045e0b605705011031b2509121bc17993955f2f341ac163d496682ac58fed055592d7d4f9d89da68bf57f9eaeb0a1a3e307ad287d041cbae69668936ef85552637e68fbc4db0e4d12264ba39d106a66668eb524c828f86e18d8b62aabea97148b2a47efc6991332a5ea3e82664096c8c0ea16974f47eb5fae0641b4c666ee9c7f280ebec4d9da8d746513c30a3734ddf56899be75614e0a1cc59f24b89429d0fc40ae253497d214b4049aac2d6f062880ec8c68df05a2f9872470fa8b9ea9b0476b6dbdf862042615a4b6299e96da434462015d459c20d6675db5261915603f2aa93cf895532bb7cef4ac3dba2becfcba239f86113bae4601c688982f8c4ed1a1a9d3ea130fbf9878b9f5d22fff4ce01bd0a289e3081bc64b8cadf193b667b22c32a525856ac56734acde23a71d9bc2e4ab736370e234ff1cbffd4ca631c128cda9c6fbfb77ce8d3b8a659df069d936b3aa5ac4c4b9d60af7d90e5aa4fa0acfb896ed04904538ed1d451f321607c296a11812d8a9dcff07560874afea707ba67c81a4d7eaf7c483b7ede99313b3de7694496fcde7c72b40d6569f6e1bd924df22db2fb7c5a681136aaf94571341954596596050c47379dcf183d8fc68c42f709dd3542c1dfc7bc21abff79c3a3ffea01abd2179eccd9dc399ed5f91adefcabfce0cfc87d7dc48658b11e6d7bc634eb642ff23c930ad2329b75f604260d9cf284bb8cfd338980d63d44331b08bd962c025c47808d4a06aebff88df87bd17f450d31cfd6add7597fb4018b69033ea8cb6f2f5f854ee297a14e9293f6ff841ffdba0d75e74808abfcb55329826e5b7c66ffc35190b9f09622b2f128d1bc3a4e30fdc4e3a29fc609c5f48470a88a6213eab7de0208b0fddc0d5291bd1d240878c808587b17b4ff36e95b5f698dc797ac7a8fd2349c0facff697cfb7000b9a5054681c811659421c7bc7f91d38691ac384eef5ce78dfe60c4b120dffb2aaa7a44d24773778fc584961597957b32dda5c77b0b50ba173f355a9093b6261db5b9b15d8cd59880c0ed0ba4bd6db4539901508f1880b65bce025ba959fed44bec4d3bba7dd62e18df80c0d49aeda40e7858db20f5c10ed7d776845b1b71e545234c204d9ec79db57d4e0fbe2b68eb77649ebfa4c201e3bed693980195918c2b3456d6e3eb6bae6ceb2341e159ba1da4dd97c57c64b400b5de781ab150f92b00aff49e7f33012037545e8e0755d50e31b97c1717e5c9103cb6b3453766e9dab647fab2b1693d60b9028126f8d159a0f7466160922682e97c552971ac069358afeba6d8b0a9288499c94afb30ff84c8a844c7f9fa03457a2f09ef5541299d45d7c533e78ca57a7ec412f6de26989964eab19146030730a4b95fa8bbc8aafee6f9bdb1e273ee6184688cf73d4644808b0ebf67a6c0e5bfb98ccde6ae63daecda3ad15b97d587f6b818d81c7c1bbe6823dc9cf0d05b438f0961ffaeb6e01768b2bd8959ce5e85c67c7077e7d3884aadae8bf510c14554dad054ece4af1cccf93f0f1823a7d23903c76737f5d5b2e166c54b5af278dcc81a17fbf4de1444bcc4b38d2ab95cbe50cae21bb5d0f5967ed540eec8613414a3a8c49cc8be40609dba00fe7addcd15bd5b0d34560105db6cb78137fa5645951a0dc41fd6f935672cc6bbfb43991537da363a</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【20】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9020%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9ac3b98e3e508037a8cabfe46d2808cdddd1c5deef8100d69048bc444ca9f5ba">e60a61a1055049834be66d4bcabc52331065ca477c447093089048d23211c8dc76b4ac17d2ec4ff995f67253800689f64ce5544b585f73d2ed3fca6202b474d4452e768cc7334274705fdc2a430e167c00bca5626a507577c80ff93a19e214a90f796989c78a1464106901b70ab008a6331b7b1f97112e5336426e98393ede0f668ccfcf9088438a71035c0051ecb722e5fb1ecf185900b97b8c8569ac948353f58cf6b900f34b7b21be5748312fdf3816ed236a164c5052d5c7ee8ec39f51944f46f3643daed2c44609ddbaad51b749bd1c1741a7bd3793ebf796c8e27b6b83547fe098ce73f51c5388d7ced1bcff81b7a91df6d9ea2182991961274947f82a956f7fe3a222b338c1a2056a366d08f7420efa1ec2c7df1c16a5301113480bc2092d12942013af48d80b504563a090af558b7b81676cef03a1eb5a9cc12822c772e687eb66b73de18366fb5bef45aec2b483b6c447035dd20d19173e93a19a0e248b09c481ab37a0ad6c321954a7649292efd18b9574380c8f56bfb067a103f5989f2320d33377dad94c281a34d4750fd0b8afe9e0e62acf4fb6edccc52248c68afc0754c4b235ed8ea9a158787ce97061f9e9eb872f79e308ccf6047e35a379167863547f5cb8f5a3cc50e7d873452b796a5cb5429baedd3a09457a78a8b68af79a4684ba0af16183ba9992c46245a300e6420bc7bfb2b6e666020917e74b0585f699be74cfab3388704bb5c0356d3cb8b522df0145dd9999d372e8e29cdfdcace52dd14092d96a8625ffb0cfb28bb8ee3aa16654bc7b4f70b74b8fc2c9ea3a24718377783b71fa5e40e8006f9275630280ed27512c3c14cdd13140bc4c011e46bd532df7a0543c2576c67840ac8ff55c12a10ba07176632e2dd6e38b8a77b979fd394d2ed2081fd1124bb1d562041b6bcb990b1c185ba50098480d87a3340408a7cff8ad46377b7efeb6c6cfbc024f7db10848d34b24fcd4e9f21aa991912b573be8d8a1b93817869e2d6ec657b364f59cc3bb566cd0342038bb8f760dc5758b4c0e4d86cc1f1e4d562e1a484ec9871195733272dfc0019055b98a87819c80768928c499759fa2e6d40e438243da5969b24690e1bd0eaea04b611b9fbea14ee13616f67a0d20c5747ca8d67b1e612a329d5637694a87026c89f8e7474ea20bec452f028b0f9611a7d5eb3522ac1a3cf908861f4d74eb0e40bd2b8c8128e3bd658e64315195b1b88f7d66dbbf0838e1ff3cfa8f2a621b4d77736fb86bc0e47fc2bc323b38701de0b6b1ae40a4c516d2a8f4981478aec5b6d04b7ccd9d3340b941cacde7f17a68ceda480103c45aac0933a66577e4bf9c5df6f00379876ae7f37866a95e25be7e71cb7cefa92edb74c064157a4742bb8be5ac580409e10654d286990eba78f02476de6f010b4ad6405bee3c8b0ada0c29bec8cd64e3430ca81e69795e6e426be7ad6104c9a29adf1490899bf5d33034f7343357b9abddb688569bb4bac0ad5c022146e4a043597c569ae6e5ebe761c44286c89958f7301aecad09615dfeb46ef7c12d022b7e75391647a91c6491a4adaeb1b353e3550156c9b196a4ba76d728f8cbae6a454e819c6cd770931bf6810e4ca29d0ed7093f26eae56dbf31c12326054ebe000bb592f11b493f8f1929ea1dea2b6bdc2b1a4a74a2af4d9042f42f5988a95ec4c7ca0461128e7fd9c6f554a4307d1d3f044cf91c5daf1b47afc2e109db35c48559c7c884598a1be78d41d6bb54ff7d311ce088a2a6316ca4bc512f02ab691f9746f1aa7e27b43e76dbf4443e6d780d73eb54b479b6ffe4346e4812374f061d62a9bfbdf94d5416311dc0b002baa378e2aeb6f39a7d86f2dd982b8e68201f29ff0157634be64b4765bf7ce7a7ce4542a7dbbe9dd321a11ab6be7d83864e87714f80c684d8721c0b2b371a0d00c37c1f1061b7deecb50e54bbb7405b7bd1582c4e68020466f8d3403faebc297c2ab6705309b79692dbf3909e37ff33fe9369c0547bbe8e75b101d4a128c508920901d927fb595e91acbfe4981b1e1f38e852b09030f074d13a99bb8bc88f8a27e6f7e413b75c4f6ff313435e6ee1b435c876a17602ac2326ade411a4bc444042b65929b78172c669370cd029f98095052b135c48146769b55a2bb6d81b78f64bec5fd8681e7b77ae23358f6683721acef9038a39fe8fedf4abe725a12aa1535eb2e208fd4a6fb54ccc8aeaa2305a979f6be5eb846f31eeec3c287b7d35277edae8650fa8a82551e5597b10c6b4435aab0005fa9aa4a97987119763523cc5a582551a7b8fd87d73a851d82bae9a4ab6c4baf0005ce6e9c700ec97cd248efff1be22157a71640b2b4ce87361b5f47607cf810c3add34b0ce6d29e2f6bce33cdfb9c2af11c0624439bb1f348278535b8d364bf0f492459172ee7cf15325b502ec27dae8c41614e8a57d606166c81a154ecee49cb5d2eb201b5bddb02f21936f3f5e51200a8cda239207dfdce28e55562346d8be31eaa623840de231fc95f6765afe4d17050db4f90454e10cbe11f79b5c34f8e473946b2c4006893396fe2a86b9500355d4891804abbf2c3d6015aa5d7dd59e304ebc1e93fad4bdc083847c42c8d19ed87a570f5c409fce2db3cf34aec9c3637807b7dc242095f54513dd2417783bfa30bab11f2f240db7bb5c0507694948b8175c3d84a4e3b5c27ccd559ba51bb945627680d16919c7df7d5bc7079e78e39a7675fd11400d547c5983a5f296fd6350e6d4371730ae8adbe983ef630a64ce5436d2cb34fb188648d60a18a0ce56eb79c6d600f9924f2c829ee26b6da2af9574dfa7a5463754403e02031881c1ff6a7f6dd29c05a6cb194211ddeb7cddab429fa60f03a67edce0978b8802b3a85322339e5026c2786e31e8a853cdc3b7ddfbc5a0ac79be7dd690abe5fdc20980c9195fc1888ab4019407658bc9f90b34fde093aa47f8fa49da39b0d02efb63469640f6ae13aadc0f291a6ebaf28fd58d53486913f461eb5d36908a30327fb0d094c98eb38b623877bd99c969596fbeb8ca1ed6a67b470d5ed741c7a37ae3a0fcdf89549a751abff9e5c0f7342b8e72a926db5f94f0960e2ec13d4faa09a9d10ad7db4aace42b5a3c3ffa7c2f31683b7816af10888c662c0a03a575829286cf92cf476ac67b3532149ec2f82e8d9458f6c5ddba0dad767237e3496b07b67d39f8dd342c2d56605f650a750f4e4cb53c8ed6b8f87415f5a7d1bb32ffd5aeca1361e5dc837a779bbdb898a37f165137927875ec6fae945f09b1c6ffa77f04f042dbbaf0c81e9d2d4265c1fea0998a369986d1f81a742856088990c1c54e3fba82c39d0c32731c4b2fb113a8f942882462a783c93d913c931048ca607129f6d6c662233098f1f3769f76d1a2c413469651d16110826cdca857ae8b0f13c2403e238fb0e14ff30617ebb3358df8daf01b2740dc45ba265689f9dcd6066a61776df35228656e91e6ca41949f2a0fbedb934518743e00368f11a0949061f65f6a85fa2b9cd7130568550dcb4652c0b11788dfc08aafda2822ac029f6b8a91d500cdf982609e83950d4d4c9288b15e505831ff017d919887dd496f8061c156eba9457e5db004060adeebdeb6ef7acb358f7472c4320dfcedddae44b5840e8c2f5608ed735b29229472538fb23ebee560580d89035abb906003c6a843b65022cfc4a2f31c234a4c879e2a62a4d80913382fc09d6e0e74e2542944a85ae104b3b43489558ec31780e7c8e0562d7335c100698d10b91e046a09e34dc10c27bd2a4af9ad2b15bc8c44c989dff17ffcd1c90cf932de39239ad7cf1ded1d07c8f112647e82f2cd62d370ea9c4b8cc5fbeebca6ad5fd69525f8d2ce4492c4a3ee5e9e82e90fa4b52a0d44fe8929b011a2063b21df9338018dcc1735b057d25ac5d2195a5137276cae8219241378244dff35887d92719300e687b12f7ea3674d649599aa073b490def568518d1f5cfe0c2006a64c02829e72d30e479d61567cf390e50aad3bfc18f5d0cf9ebe642a1058b0aa42f3a448ffbe3f24b589ae9ebc7665dc7dba0e361fdbcd4c67532dcf50b9a001850be8cfdc037092acb37a83d4b51599cfa2f950beafcaf815938eb0575c459fbaf01170553c2cc72f158a9224ab371181fdd34bdc5e6aa3efa7b61db057cb2dece41eb9058a54eb3622b4881e3f27619fe</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【22】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9022%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="1ea56d671fbbef388b20448e6acb49db188246c462f68d9bbc47f6eac06d61a3">e60a61a1055049834be66d4bcabc523350a69668830b59ba4436daa26b599736a98653144c4f5658fb818aeb1e92f66c3312e30377900de3f276d04a5b89f596f7ec457ed1f0bfa99d8c8405aea07c26ab1769c7a23bf4a81cbafd19d89022bc1c1f9b9fa223ce5f4d008dc24ad9426872f513445ec29631c393c3c73c28f8f5f638fe3f6045a31f74ed0768593d9c55bb3b408de2d5768b03803fb79a9644fe62ccdd8599d60861a6d4ac3527c2cfbeac30017f20d7fb21179ae707b77f4a29ae53509136c539c5f97e1ba196808c36ebafd2baf206c03866358150a60d31c7afa1d41e23c39cae31df6a870b2e84d9a53085a2369beb8f793eb6d7e6ae4c2d21a967fb19d36c04ab80915902699068d00a18cde0f58d193efb57a14deeed1b8107f6606d05d36c4e68031836ee55bc567a7b7ec0bde0b9dd5231a09d940fc01f2ef445d22a1e755607c6b8555dfbe79e86e876dc854498fe0b1cfb83b8334bd5811a1f1dae78723263abc8a7470c41e0455a605cafa9b756e66909e517f625a386caa5d01dcaf4a900ae0c09096cd0572f8c9b61029f58166f95b6e9631ecff662694a88d9e20338709eef3553ce31c8bf609af938940dffe7fffefc977e9bf81f61a63f13deadb8a1214493dd6c1b03ecae7d949f355679a48785512e44855129d024aebfa4e17ad50cdd013689419263b4b1e563edaba92b81dc3f3787f250a8b0c224a60b2c3480f5fd3c7442ba6a5b6b221f74483effd08edff9a7dd1acddc06f8f6f801f3f0af0d11298473e5483d1c1358b12970e6a9b744385108eebe4ea291ae5c300c85e35780e20b52d784201da19e6b500c0e2d0b29d85123d28661b4a7c7562327d06f25e550bdf89d844b7b0a8d06d4123dfdb61d271a36886afa29fa421191d732adf8287fb08732e96b1e298cc2b07447b3f85c0b170a37325a0af06c93b8c7baab89cbdef792364501e61480c1a8bde51906f5c6d2f85b8611d3710a0666aa603da7d4bae13c8af16a5f6c3e8d6079d1fb62639dbaac9e9079a21bc3d9f6844714d57a6bb58a3e696a704a0b470ba9c34dad78a00559f8c9a529a8bcc0813cd1bacf80a217beebef0df62be0b7e672c0b73d2d159243b984f4d6baea98059d41ad520e1f0a082c33d2537b208c78ab7a6cf241d900053806ddc4cd08a5cdcc2ae8b0eda89fd25b22a55dd15a3d3077ce4836c46b3eacf53f032548d6f1f0fdd3647ad503ae72ac879e55825b0751366e9eb0257738d99d3135cc2f72ddd1474a8804a7108f9bc2962b2fc86c8f7b16b1f21b340db4e5890c9cf50bb31624e539165574d59b924ab38772d8c90c99e3319498f22fe720ecac851a2475bff4989cb104edc56c13bb510b437e8cd0a4bd9f8df69cdc9b97a07305a2966e4320edeb7b74ce3a2245562d2d877a83bf5b63c603d715632109c8918ca8fe3d79df57dcce8e0bf3df1ca3fe51555bf94a276cabea523e08e4f057a291bf41c5bb42f317e4566b5f9717e5cd29459ae288a7a803e7003defeea05aa3e7a2e62405b92b968c295b24f3babf5728e80a67998b2121620a3ce06612f6c3abb1b3cd03083b05197e299b90525ed262fba0a2c3210f7d87fb189a7a1581e465d69448800f7462e7062d4950266a570a88b45e2e7bd6e5a36e138f4335b7eb41a688f8a528cf9c7b882091a78116c41e47a0b872deca36c3ebc5ba72f1b1870a43ccf22071bc0bc8b59f6050f9fa02852cb05bb40513087349c40df8cfa0dbf7f4d8d133a701076ec7222211df56bafc756684acb9e565b3f5ab82c6f7f92bc6c5ffa66a0ac80b6850c629f722354a6b627eb8bab88c888594f9d8c4f4eb177a21cda6dc7a35f7084900e70b598a5ebe296e25854d6498d28e914f645800b8f3b393eedf4e2eba8cc245139b0ec4962da00cae641c7af95869e83e043eed7b03fb24ad2d2369f329ed7293872e344c2b4dfd480b78394c50a6e6056f03a133f2ec0261250edb744c45035d5fef79acf577dec14a114b69e13ec4bdb6cec9ccaee0d535f8682378e58d24bbddfe4ad3613562430710b32e2d9aa65dd1c7ef7f47500b665411b5bbb5289883bd3e92d034d7b5429c91c50ea8f67378b9d43cf0eea735ad4073edcf76114b450b6f8249bff8960c7fb993dbc5511b1c714d9c10f919f098d7fcccfdd6f78cdd6e4f582962d09269cf31c029f978d4c0859c90f48892390c6e46c5f0d2cd90279aea5829b0c98eb5e9f63656e1df6a739148a8e1a5cf2f4e9f1d1bedeb0a37ac001df22538d29681b779dd59e9b87a452feae8979876a7a7ff60ce20a5041e14fb59531d542c4980369d1e3147ad778f8c5319fe4499df7a7e81e84fc86acdf696682516f0a2ac52af23e1e5ae84606999300811eccf5a407b187aabf9f913fa23245d2b65788315a0464067e2348883d447f4f87b17ef9aca25e77f52ad8d146fc4381f01130205840db8a67d06aa88fdb48090731fbf8b6a24428458e6f4af4fcda9a6651c5302ca102a6e76189896975c8dcfa37dbb748909d06e1a50dec74125de693e7d6646aae71cf5a0744d8a615206acbad1f65bd81fb67dd692c089be14aca1d2d582491a74c20517c475a81464282f44102fd90f5a038df426c68274fda82028864f7eaeecd0765fdbc8b07b4a8b6a7e541e3e078dd3dc50cd65ff67a109f91eef002f2f50cdc87cd00149bb24aca0e9c8356deacb8d88f7346a38fce20d0d17a6d27f0d4922d413accf063dbddb16e5a68676ff0e1097b8ca45219895520bd4cf98eccfe906d95384bcaa2054c34e63d0f883b32e6134ef6982030e3de53b4409b8950b71e0110e88bfd1decc0aaafcae69ea379650399deb29ea1eac74cfef027e134e004c5d9622e8b962a5d3d829e2347006af2e4c8437b7dd36880dd0da7efd7a011f59d3d08079551de1022c9b82585bd6fb64b14297b17ed7fb100318bbf7840e8ad7d5c15451512af74f90f92db1498a61911325335b87a0aac5255baa26c971d290a36baf3270225831eb765cfc12c17504818af4f42cb470938509b873d6ebd197f11a7f866bf518e752c2a54d903378025f495cf7d2d8a8affe5fe25e4f01d825de302b7baad07e3840190502110ca9128b1adceb975558c885435ea85ac4911f1630372c3ccb7dc18bdaa13e8bc563a03bae11fadf631320d1d02478c372d6e6efca068ea73be79fbb1f9167d5f0cb502d3c5e15289ba2ee40e033219b484e50ff01e90cc1d1832fa8876d5cbcebc31b8536140ab3d7c51d63cafb28666e2ef8514b9460ede3eca6e697f446209ec1a2495719be3171ebb72db692a112233ec1190127056ab3e3f906bea74d937a233149a81ea8ad6d7d18342338194201160ee7dcc7abb936b7d91cb23951261ca647b1447e3a0f41beaf037017f6f270e246c76f11bcb7b3dda4ca271a15ef702290ad0edb6b9196c52959592acc15993d655176521053c1c11e9523165ac87cc7f1d0fc988993798a267dd3ed29ac2964b36a3484545fd9b402cfd64ed97ba05795536e33cd3dc94f2000c932c57a019a490a496f26556255d599230980c1ee6f5d7245f8eb72d42407e439388cc3d7146cf32f946b5effb89ab8e74c93a613550be789327ab844fa1d754215e7ee3f94bae7215c0bd3d6f367a8596b555912c8f9b5efe5ae4b685775ddb089294015215003c8e5fa5239f4de435a486e508b2a880a6c9e51a8e0119a246dba7893f561ff41efbffc8741415e5dfe8f0ef818f9358d3f90ebdcd69ef6317d3f21b88ffd103e7c8b9de6de64ee1848d42003ab2bae6badd0c96326f2bbf0089f12dcc7025a96c3c1b0a1a466295e06058ee1c19757cc2b7719af325feb115841dc16ada7dc696fe3c32b2d7098d10ab0335e10a3414394eef274b8297f1dc251733babd99368f56cf46b88f827847a63287b08e1a5c6638bf85840be8e58d191516a50530db5417c2effc1e2f884cd19dda1ff604ca1b3859ab34ce40264878c4d13e4b7d08d0a5a7a38abe29659ee45a3f35c9ccaa82987186a98df27b059fa02396ec47814e3f8f998c6a7b9d40f4f77d7a37a0cf568449c5aaa476c7892c8a24b3cd40dddf3ba2aa0e9f49e9c9df28c138068a1d8161e928ef83a1b61c8cc95bacf160c0becabd20c212e4bc93aad6bcebdf10edbe2705c3557b2be940ea008c193249102b24680b467560c79586fd3568e350956677fc9275cae6c659d9574fc595581205ce55024cc1ec4bc0b3e64c01d781764a63d01d6a8b8ef3f5129e7b5a9a6ed8877e67fd55f80b0a9d86978ed28f5b7a12e831981758fe3929600fd566d5716350ebe7910e8629d84794a4a2097ce15a92cb5b4c5e4f8cdb9af1c9845d019e8f53fa652fe107877499afaf92053d4fb9bcdc35c9e7a7ee677ff517b6587737c4583b55f901f805a1350189dfa94e3e16d52f078cac9534579957f2a1614260c128ac2af368e1628bc1e459cce025955b613d59ec98614c56af271bcd82f870c9285577bdc2639a60b4b7444b23f78f87208c7516fc59148</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【21】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9021%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="41c808f50f608cb8fec0ec8b445c05483d4f1e9e96eecfe9d5f88a2bd4e16d8a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【23】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9023%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f8f740d849a737558ad5023c443f85a9a03b7d3e8bdfae92c08753853af0bb36">e60a61a1055049834be66d4bcabc523342490b6efee372448d4d4dd82bc263fd94412a3243d1375634fadbd3ce70ccda3f1871fe98b5075e3deb7dbb1c1e956059198ebe4e4053f7974b2dca4e50cd5862d81b83b188574494141549ed74704bfb9a9aaa5acfb26b9ae20d4841f97a54722d20c460a6c155e920003582e172d62977ec61c0db95f07b3e9b297f36dd9aabd1a8159a36985a7352499ca37f378dbedbe84c996aeb0e8950f2157d540b494986234c0e163017d6d00e186c867523657642bb2917cb6b430046f0ccf11c818bec55556f4bce1a77b927855d43b674ed78384ad32563259549e0f709db7dc3b12a0a6f75f447f13815a8403203b5a84e20f9e4ebed25ccad21ea7067d6e19eb49e9d3b633002d62b2b22b1c844d01d1e1343e402ce5c0288e5b214fbfc303a6529a2964a1c78a96d4123285e19b198ccbd0143966d3417ea0bb33178ef34baed681f29ebb0df12b26be92e5f170dfb65bd79b975834c9e9286e630cdcec346640880ba06897f68b650916b66fab48ee9e473b3a43b9db30ea4ef400483aaad9f445b34d2e9f6968409d64a5b00f01adb667fe0ce52b8d9b25dfe2e28f2b3075b22cf8fcf933174cfb42c0c1c51c1822136259999f12b11cff39c69206e0f483a054350808f377abb348ab3d5716ea56998165c41a0eb0f1087358b7468fea3509848352bfa91207cd6889a35b031baee9c17f19e5c98a8b908e537eea193d993a4ac5d98646425caf1aec1acd5042f754351b339e723677bedb8bc59726b6ece8477fb58e990ad3facd619f5c3f04eb92f1a0ddc3f1b1143aea94637ad72a2c97ff13979db0cc6e23305774bedb66f84bd16685af89ac817277e160036b4124d3032bf8dfe4c9545decfb752a38e346f316b8d241cd6e6d1b6b9a09ebacf99cef6448623c311b6268798d75218f6655f19200e1ba50ee817c6412024a6c682054f276febe56f6f98943564019c0f0eec399e5fc8205376c5d071b9391219218341fa878bb2f637c94027bf6f4e3bf8b36f565861e1b69529ca37eab6d713b05f3fe5fe1084f6289bc13a8a21ce1f6cf7c9206d5dadfac4d6c9fa76009b9fab3448757de208efcf313dca341322d8d4b09177176f1f04f4faa6a6584508b97ef5ccd6047a9f50dd0cc226d65c17084ac6d25dee31cb647ac393b741b4fe0b28de4d8e9cc158e5a34acfe698822589333cfedbaf6978c69bf9a927bde44a45add7df2d9618e4692a821b9d3e1c1fd60499a89863e6134d2b5b23b229cff33c1b8a3be39119cc7af5390b3d5673c7bc38e6ede1d1278f7a557f6200ad10c859137bacbc50b64e97c0ef4a9a2e7da590c0a7c241149f9df3786a54978b1ff45a0ce68fdde5b69f834c41b45a170385f6f628568a07e77fe881c4da46dac682392b1f21f15257d98d88762862634104adfaa425352b3163b2a32d9eff2ce1963da2baced34fe7589f344cf924513abb6915479b1bdb083de99f47d22ce1ef212900f5f0147fd5d1eb90e14fe6687008cc02857ad6fd518d5a32f51c46874e29ba32f6408d66b1038f30f98b3a2cddd62bce3498426811c00250fc704cef45587a6385648567b73cf22a193925a55ebc3321504a76590e5c98aa480d58f1d5da02eeedcdcf83f80f429a3167bb2ea7ba451ae8077dfc1bf5d09b75f7b2ce4e99ae38debe960dda3f3f4389efd2e60bb78df81d882d0e876de6404454cad92479bd1a96ae1f63114825141a263580a943400f75df17394b7affb5d5c8ad694f8f5d1af54a6b481d6754cfa2defb7c5ebb87999252adb84e6403cfdc3e94ceca66f478add9187cff04f77553a37fdfa76b089c59fdb9752a1b3ce3c5555cdefff15e337c5ef734eea9a954fd7f05215add96abda99f13123c61b9f6e193acb1969a6ac680f8375417a9a53211256919c8fd76f3b850c82caeade101adce2f4c37fab24f8c09f50a58e6c78becc7414dce971096985d867bcf016271e1a06de1342bca19cf6c5b8fc7a93d016428f01cdff3f1250b2f7ddd2c860afa78450dc0d8298a22ff4204c2e92ba4e119e07663bce333385c1880e5e411e5c2b33638e3543907dbe3127cef3ba59b254ca78347d125abf4aa835ee2ff6904225ffe66f4fa9ec7a507ba832188cba4e594e4ac3bdfb891dea3886a04e3e07290bfb554c92f058d406b2a9012d85c6a83911012bb8b5c3844c6c1107dfcbc53ff3f3c098d5e86b4743a73fc414307ad7d103449984bf97e4bb8433b9022e36ddf9bb99ba27e0d0f1c74ce969123765a09f817f94483d1f6793b91ba4be978407adc77762205a786400db18580f496d5bdc0f1e69584d0d3c4a78467a4b0ceb37ed64f892764cbee624346502f51dd80f7df80619c4467d20a759cc57ae3be8ea0ce0aa9eeff4363c553926abb78a78f2375084e4554fe123d72357a9d209f90f42b676454d43eb356bcaf5794cc38cdcb7a1952efa54d3eccdcaef25ea69cfbd19b458cc5e3ce0fb3121eaf827cd649116ad4e1f579cf92fbea5501fd8af0cf9889db3fbe997d1960d55a16820d60055bb646b43f695ce6b5b6ebd008af253b213a0eac268397a10fc5b64da89e5f69ad412f033497d33380f7aa9e06fcc68afa8e801187ff659bbb52b3107a8550e3d5bb6e94977375525a2280ea486d657d91c251d77264657327d2fbe5a35df379ac927d494756d3fe1628979f951c703022566afcf3aeef4e0ecc5df9eece6b8e8e3e958c08490289526a54619de5586b9bd9b114e4f6853f97da2ab2af892834463d58de212e1b237ad6f73687e7ff1786b8cb93697080ffb788451ffcd5e3fabb228248e4521fa388ba1f43fa43173d162a6608321b139afee226135078e8b6754ae2450eae32d2eccc781ea5e75bd44462cb31fefcd19c8067c0e21b849182f0ec60c2845dd638eb8b5e92aa33e5acbe5306bafdad2b327f24442c6d4609b1cb1e586868eec02f259ffa1cbfa91fc16d6a87b0ec370fb8abbd05558050231c94fd0e8735bb204b9dbf34675040d3d9af2e7db4eb5b5ee75882cfccc4735cb4e0900e3e8116393459ec3af9ed762ca2ce13b1747810e771c218025fe898b7318df0d6e2ffecf6cda45042ce49d6ec92b668844e8fd00dcb22fa018e76c0d11522823ad507a81561af334a5525e793443ac245914fefdab8d705eddd3833e715978c9ea61ec77b2bc5ec6174439ca6e6b0145eef3ee5f7be90cb15cb98da9ac334c7c131e79fc441582b75339fcc603bbf46587e2df697e50e338ff17b84f4b66b0afc4876c8b09d2f60d66946f0bf1b89932936df7fedd080751fc5cc3f44fc14d23fc3a2ab300801c4209562f7864f57e6de61465d86446abb9899227578166df6ffebb49dd8b7dd3629cb8749142bfe40cccda4ccb7be9f09863ca4638b117a6c9c7ff50eb02b416e5e6378c9da283d27c48ddce4091230be5d435e1ae2bb5ddcb819163f8924fc3852041f7c1425d26b884ce7971ac9ba3fed536b38e2447be2b9c7c7966fe35dd18a8f30273affff6cc669cbd556b12ef262bbc0351f5e392b4066cff35fd7d61f32aba4e44e34ec1d02ec20ad74a539f2a9c42de9bc11d3f384a451713e0d809c364fdbbd389471c514ef362d0b36449316d825e20a87d579fdaab1fdef91bb4c2169e65b685d41b0738f7d10968c64e883a416811b588b8bf83d400a471723ea95bb57d8ace8b7869928f9629392c1f69817d667cca5320ff63f9a0ef9d867f75e57f362d12ead9a26a2c16f5b85c3ed35e4c013a6cd27ae886c7184edcd4ad59f5b8b87c03b6d677f6b972699ae75bc6ba36865d94e92eb09efb56b241f305b90e6fc125395ab1bace7a204c6cd99f559ea9ff7791b4ba0ad236b9067885c4c0b061f79c08ca903daa375de58f4eb16eba618f93140dfdb8c7d686863aa99533c14b19bd2c17a05f41c2182f47f8a289aaf4b59e58ea0f1cd48d6be25af70aae1e416649879a46562b6f94beefe4f878ae2a2553461f6262842ba9134009b218cbc61554c5d21919297cce5ce8b3c533bbf2945d77297a7355c899e0ab16383e5f1f4d43e241ef5945900e20ae6d741af5a8d25c7e950550f0f3516599e1980e5835122b37edd0ada2147746baf7f2b60f6588aa8dd33c53dd287f41e57733dcf9c8be9d6cb75a35896d5309825630702dcd462e935ce589ba897c6344f6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【24】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9024%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ac852bfb37a6ee1d414d3be8fd7d928570525398b11b851daf75708ced610a63">e60a61a1055049834be66d4bcabc523399b1a01f1bb1bf5cb64ec4559d3ce477f47ee9652c6437781f09985e192e1f3fea285f02c7f0ea3b07e02a9784760364c6e92a1fa5255ff3f72eb44e46767eb34eea162665c9b724da53b3bf5ef90dc265dd6c052da90fdc958da75c17ca85a4c3abae6e1675be75e9c4e64d388a45e5c4ec2325abe2f836749c29420fde80a133ad7ff2cb0ac2eda08beef3393463fd0f6258cf205c125e7bd99a34066e002d782e8ccc7a0746c9a641c7cf52f9aa57efa564c146e32e9eb7d17b11cb043d68723e318ed862efd0b795e8446fa3bd9104eded6441ba37dc9bcb8da60e0ac67d9c6d9c96eea4a3b498458e0598759ec588c76617ddc50eb508405c20c0c81e3eaae0211775ceedcb5f32cc562621238997640f3c167ba2d43aec04cfa933d9c47855623f008bb34e8468d7b51ac7dd0c259f7fba47179e6944cd0f554f7cdbb226874e9f551f5f1dd66cdd6e75c70f65363ca4351cd6b0d3ce95219d3a67afcf77a9c4d9015b5c9ac10c63c317d84a26a30164b498682374daf07d0dcdf90a32e13ab95445f136d03e51f17546ad5cec5b5452da3b0d4f50950c495209f71d270dcd3fc3320d17f9d45456fb88af9285b5918b547931a0e646cdaf832a33f5522f07afc64b7ce9ed3dbe059b12259b89099203cb26b21a600559ecbcefc7928e46653364232fd54b2ca525f9f2a49d6673783c05ea8b383607295457167e3e51285663946be8acb020166d6d94ba20caceb45154e776a8d4399ea1d56b4fac1cd2604c1b26b89158ee4925c07a97f09c5a93fb5a2da2f03eed00638629dabee09d221bd76d192ff15533256fef6b2a20d5e1b1a28aa464b7ce53e75310a9966c577006623d2aea9c01135e307edc7f4e8932d8166157f8b74d8ea143aba76ea2a755aa14a1ffc673675d9d5db94c90f2cd98ba87f7f0d64820567c03050376ec38e86bc71ca5c872e39993321114bebc58087452504fd07b1a19c650ca18ce91271965da15b421a32d10d4892c0f5feeae95974e8deae591018f8226fe7d99f69bbe5f837308c42d45e3f3cfa65da70d0d96e146b8db5ec3ee338a693c756795670da5f369896ffeade6516f5627f7c1891ed6edcd63ea741f6e73316fa3d275162c9a2f6762a041af268a27d1eb7d08bed2325ab986a3754ea9df48867fb243c25580bd78edb48d34027413883b3ebeb8043a1f584618d0ea75487e3f78783fd176d7c684d4e541e918c12bbb10ff17cb65479ab61b274f54ff770d55f5266bc3cd3e9e7f56189460faa42bcea77a9e537e49ca9f40da702009740d6043dbb5b0b060e5770a6e561e8c1ae6f741abe921aa2f989568ee876f58e74370df0b85b8ce3cceffd6ca678b6714a3265a5ccb7d33414590d4c2d1b6bb00bae01834aaa23eb3200449d9efe52ed24c45d6f8248915d26340d15310e988d9835d7d6de50207fdcd2328dc6518942d1da3be45b8c147e6135f2825a390ee623de9fdb80ac50af46da5348e039e7cf79882bcc0c5108bcd1f8a93212d532b6a18413388a7c0a94c75d3f71e97aace0a1f9cc1023581b0e6fb2410581ab699a4b5e0e0e9ab29b2e25239c194a577ca53131eb394cec57bc03d56fc5bba604f4faab726648a06ef913a1e1039f8474fc4c74529626f07f867cbc092a8c421b856d483be87f6b2cd95db34e4a1bcf4067247b4acc98685bbc98f0ca9e237474bdffca143e3c4489e09d826847c56dbeb8a5175babed5b6dc10c3f9679b365a43323b3e78fa7fee33e210b692f01098481d362d07d5be42d656623753dac67b9136eb8687cd0cf9446f6811806be9739307493e6e04212bbc227b5dcbc42c620b58fd8035296cbd8b1948453ac04987f7bde72d0021e5ea38060d44ce7b60c5d788cfdd69d293da39663fb06c6507d7ffd0406213d6395a46fa9a2285087fb32e10ffead972d2881a98359e1c850915b3c2afb1a0c69f563ce0491d096e8f7c2f19e5aaee3665ff5eae936db4c48eca4324928b71b3b45e2f35974daa611780245fdba9fd3034728f8decf5ca0a5921bb33f0c3cbe1ad3c260b009f0a03786fc1c56451f24f8d24fb7ab6ffccdc2c9bf8c606d1e1dcf467f40348b820d7b7f16c133cae5f7d37dacc551590ef1a650a61e33a4f6a37a0de0d7242478add22efe4b12d7beae80a1b925282783447db8253822354daf03c4a82aad7ceb2d096191eb4ed8716109d8d19133e2dcb3a4cf04d586b6b675b9500ce2e3e96ef2475a57dbb05a79814cb633d37b5ccf336153cf82a9bf3e429feaccc1b79f435773d38aef686d53602ad78da4e589235aebe7cdc34063aca3329b1ceb57b9f94cbea9a5e5ccb14fd3e2678ef17132115c7fddbe808e8a231a3fa666f17ee700075f4f7621be35a8ccb66b9ccf505ad6df1d38f0d2446776fab4be61170024e0cb7a82d72c9b1f2431cd6605e56f2f0b31310ab4a3ef526f46a452f3a204c86bc9daa80ddf949869b43c2562e46a4b550bac18487546598a3fe8906a257dc14cf11bff0bf5c374e933edcf5b59f4b3b577a7643314090287440814f525efdf090d9c74a20e23b5a47833adf435cab20c84f922bbe260809dbb4581510bc8d72cbdad1d4955608b4226c058528cd5f1d59c57200416655e826085a28fa47b3dc65ccbf65e3fe6f649891826aa3374ea6ea81776ba6e736716e114c0daa446c98a13faf2b45257e817a5c3b055ee8bb8530f07606c02eb1dffda77267211819e87b2dc018135b27f03ec7540f2b6d1ae2275ed760d768368f500d5ef8e0c0eddd801d1d9a712dab3aa058db383320c0530aa7730a67445ed96a0571f9761932a211f57b731c60a43c457bbe561792ff002dfde9e306876401a5edf379c9b5c816be947af19159a5696d898ef10e43f2c83f2c799433066a256b81f5ad1c0fdfcd059a14f65723a026851a49815564833047cb6cfe5da58ab60100b6fe61357e142c60d86b6b4636e0acadd6fa450da34f37999a970dd8e9abb8e2cb6bccd6dbb53d115c4cf2f2c4a81d5c378ffa22c680b3035e0a5a00be331cccb62fe6c85bd7c1a1e2193325660a0275eca5aaab60200387a169842edaa29ffc49950d682544b90ce5c68fe1346c6e330879d45b682d44cc04e5f0ce9ae741e5927b22bca33a34e2e2520db5dd057d6f043f8162ae7f59894390aa2ca7a123e7bfcbeec3f09e2bfe908103b18a0a10965e4b20672c215ebef35015d54370fead55edde4c86dfe8507cd3fa9ab31c122109f899b84aeda0545734e28e2f603f481aeed1147df8cac690d3343a02d45cff7baf25bc2d75b6d9fc9d1c30632c6d65eaa7359662c19585e7246aff0fa6415e5254dabd4862bb71bee8343ddebbab0f5257a4543ecb98863d6222c79afd0f2f24d0e9af8f6997cb2e618306377d01a4d136c962ab487dd7a0dffcb0500f278029c36207a64446bbbe977a4943cafacb74e18ef110d4a0a0f82b7236cd1e0d793b7c670c0dfce2c74395e12f022fbe618c5db9319b86a5c195207b62079a9ee2ba3ff609152f2e0bc7dc48aebe631a41d20d4237114c5637f1ceecf7bcf367ca22372a8870efee008cdb61c54cd0fcb30401c55dd6bbabb1b733c9524660aa251fc4386576bd139a7f231d12f000578393525accb4b2b27e6d31293b9bd1f0394c181782f2a2a2d9ad4d69b18c55284f2e3a4d555c30b5b32a114a9f69ed7fa1cb1960d927ac1bc148f7bd7081fb2f0aa4e04976e978c0160a0b52a997479f94ae40066d47c06a19e59c8f0f81a46e22dec97a34aae7f45dabbfea3adc1b986a26c7a306f0052e27264ce06645bfe7ce5b4a4d18cab838ba6cf067069dd11d8c843c277e37e97aa9ca39c5e9587121d699858a54ce8b7c6c2e7bd7e62eff1286d7d41e9bba1c9359af8a80d497614eabc8740d07e401dd85bfd7721808124388d4244d2b2a5fdb794d154ece58e8c5c6d1f7060eba8afd39fdfe9a034834fb7b03bfeafd0a2de622e40a0ae56b6d67a00e0dce7bf48c42f0aa658ce33980fd7734c5e6ee5bc220791aabb471eb01c3925c278d57b19e2b83b621391aa184fbcb7fe77a925e9c961f27d256b5f108742974d72f7867d4193f9590debc34201384389ad186a700e5643948a3a40b2d6944d6e02db131c0dd642298bb7e6b15ffb318f3d6593fb497f4528473dfa07e1b4e83bff0718968d309ab4ee93103ba829032dc06a39e2a6dbd0bb27c7bbc0cc32db2511ec4924fff5a146b544e0d89e02a064d659898279b628e58803f1c1b963e5ca9ccda6ebcc25e43354c81e83a7bd765fa53b411f8b7fa44054d6adcd1c18a64b339e4deb3a3cd89fc3f527e786f1a32915e4641ec314c7fd49d038ad6d96f586d142419d78ee65bc912b2c1dad5d52ff08adcb9601cf8ccc06f55b22dee3b22a06706c6d48c9109a35683b89184591d029a2d3718a3fd3fd7184374398452b5b9a74eb4998450083e42be1a36c5ea582f2de30d638f38869e273f9805077108</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【25】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9025%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c55d98d34bf0bd1d2fd67b541871f66121d51f65956d67966bb7cbc76c241471"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【26】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9026%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="8289f45e9feb62a295072dd9bf2c20ddedc88ef1e71fdabc4fb7b947631e37f2"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【28】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9028%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ea55dbc1fbb8ca9c586f3718444f01b7866079e62062b69d4744490306b52b93">e60a61a1055049834be66d4bcabc523373b4ab01178720610de105b847b6d7588e1120bec712e215082fad3f50eb27418ae41e302c7d0fb15f666a50e3d53711ec8817e1b87cc70b8a0aea6b6729dd4981a2e6cb48f6a393623089283cf195b63739439c0fb0816aae01e0014a1495685709d47fc40093c4a00056d588dcf93020df22c360a27c70b1c74edb6a9162356fdd1561488544cf8b5bcd44dd348e0509b7f5bb713fe765ed213a8358cf1f1011befb1e8c467a744cbef8a69d302852adbbd09fc23514895602a008a882593c893f257bd49a97a1ce79fd3dcca67203b4855e94a62a71502d6021d129477f91b0592e54fd6fc8f78d8ff68d0c31e279deb54aeedbbb19dfd5ccfdc326013d3c50630ebd3f9b6046f31d5cd3efa4d8450786a35dec8fbe2b17bc3c68fe140a863666e7b93f53118568fe440a123983bc99d90912f75d97271d7df3b89ed4fa88c47ceea65e89f23796e83a6dfaf31e02389ce6d5b4c96b1e9be2bdad4bdc933886950e8d28e03689e8c41b1e737f64dbff6e0fdf1c7297c7230d90aeea96578332300d5f63106d56c06eadf403db80646dba13d45c77e9fbb0cb563fefb9548758118727d9c96935b6fa9dcfcb376e34d203bfa270b49d2d58aa4ee6a7c58b75f04c677e7d458a77c1a558f4ad83d7ef029494ec007e01389b6dc2f8aa921b48bfdd7dd22f4a4532ed4e40ccd69f11fc22434df20d18f8265fb6ab6615562b1a79e36f4273228a4d606f6fffe5c3c36beece9917c14e22d32dab8ea36956f6231a59e51b62f5dbcef978dcd60cfb5a08ab08c64bfe65117cc2d63ef5232c3cee10bcebf29a79995fc6e9db49f6bfcc0aebe0cc39243da44ee434ba08aa50a25bdec29fa8dc8b6bd5c36752052cf1aae57561864f4e77edfdf305e1fd8aded86e9a7b64c9b8d467d714212d3d005decb83df090dd7c12b1ae1380bda8d24fa6b59a59eb6d99298c5ec00e39e8a1a220b2156fef47b3cd2b870dd0131e3ca03ab08db2becb098c7ab47fb1d34a6e87aec6dc14178d81f6d1e2853f12d409a0965945b7af11b74f3c66c7dd7043fefed3ed4a5ff4484a271a9623f807fad6ff60b8afa66b60558436b891e9d0f0e65cd9a3fd3e94bb35095325d68c61150ebb266bdfe7c9cc37e0f2af9d4aab3f11cd0f560c137f98ca2d88483463477228f4d53cae05740d08d6d69693e326cd7f81458a1b49e02aced12a87288d000f8766a4dcf9b6631232d85cd705605ff2e19f4fa27e9328914dad0415286c121b9ca6d2471ee464c3f9ad650004c28c2122c27df04ad78ad03589c70ec3120642ee10f6a2888adef3e41f8091c41c4181c6f48a51b65a25f2672044dac1df98048d02b6c546bdbb25c54af9684a38340ab9f386705864adb193434eefafff93a0412eb153599722928dfdff807a7f78cc7a05c20c58e074754efb5632abc4b6dd81f15665e0b79c8f254ee9517a3aadf6fa4c93e3fe6f152a13181163c186dfe6e913c8f15970d7371d1539fbc9a6a3b1fa657c4a815656ee74f8c1edae9f8e6cde95f96dc7419b327ea968dc28678473394915017dff85d74dde25cefb23c9a2a34eccc45148972ad0ce5302088403e3372d9d56587e1196d24366f7cae4f2e42068be480f77d001922af520e9ecac0e87bdf0c8c02dc6d6c2f191c7165fcb72ea3d6e94606662b84c66b117f3d24460b0dec4268495aa4ebb77dfc8142e77451745bc22ac4f03a30a2117035472a7445a79f2c2767c7f1d1999e32a0412f66e5705947ca8ea9f1dce6a16b837b6a9a8244739899fb70a1b4dacf0b441c849911db6a61283c11c59b000b42047057503304d6469722ad3c5f7c355a9972fc7059d5e152f5f4fe97381e125a5821485b01e3bd0940fc5ff8a86385270f55a3300169a5ae31ec4021df217d0030348a6dafd4e6b09</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【27】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9027%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="401aab4f9c6ac4ea7e9127e6bf9da43dd93ef1fee9832a1a51e7b7aa31db2a90">e60a61a1055049834be66d4bcabc52331aef85e700d3e0a008e7ed99a2fa31114d0b5775fc144191becc4d991f5b723483ae4f394f3be8d2555d0af4a5485e48cff47076acb20310b0d0b695daf55d9bb074f67dab6bed7b7f3c48f341f7d609fb4034c389dcc28bcd4a6224e083d45ce6899722dd25e7f65bf493341c26a8d0e8703c76189178772a08184224dac1c674d1391b6193f63699562e7052ff71020356c0bd2f72f94d9b3d995d52894d48140cb924fb8127055f356d5270fac8fece5f02e5bc8d76445067eb36b427d3302842223fec77bc03c6605ba12555a72396b8a6e1679c3e919eda8f475ec7dbc779860dee5183bfd3362c2f94cf817136d60ea8daca7f2aff1244e96b14148675219e7544a992917d87dd64a3e2fb83d14e0006976c98c3564b6b5e28a4385fed7c75b5133551c6fbda4069293344de12490dfd4d053e2fd091e992a8bbab54cf453454e6b9d26dbf3df57f314ec2fb52fe2b3e76c446b80574865da5cc839bb55f37cd1afe53c415863cf5fff0e61660a27e284da0d8e34ca8fd859125ec44caf6b23c0f99e8f06e3eb8d8d9221df0adc1a845a695dc632e6f5eb98b5466afca4f747cb1ffbe1e393c5aa061a0c0557fd57e8a8672e0687cba1c83aff8a013de8d4f18d8cf21f904f49825d7c1268b3d9d4f2a5371972d6c1a7707e394859b2021aa3e914ccc0bd0aabd270ad34a3308f94859b8f6e398f67398e901975f247517355ed8696e999a7f563792b98d04da759d7f49659a47a5a7e029e743d1455db81839da9891d64852215b73eac93331a26fb6df4eb7e299480fdaed0f4e61729147e081c7ab8948d518c73e8f87cb3f812a9f76f3dca1fa90c52e9487177a63f80d86af9ba138ce251851250582ce1b344f4d513126d225e8112fa4fd1a1f2b334ce64679d90336a5b3a728953c359abd9ea2d625cbe88e335c8b237a30ab3424857d08cbd2d2301ec2a296efb67353b16238816b45f01b7b3b77b059815391e817a713b652c2df3cbe5873f0c7108183b2a981d2e79aa09755b8ace4934ddc62964ecc32b4c23232624b0306167b22364ed782ecbe9d1aba6bc40c4d6da83d07598e745ffc03402cfdc0deccb166e575ec868b6bb7a8e209741c0bc851450d4157617ad6f3e7db82139fe7dfa092957d5327ca2b3ea6d07df49a803d7e8ce6e42115e5712cdd34ee2fa6348834678dcb0cac64c616b114abb4d1124affc22a4194c17340b2f0a2edf9bbac5fc9cdb931ca71bcf9c463b752cfd72d0a7c4a1ef53b2d3f4ad83ffdb7152cccb8ca946b6297e8a41ef820acc33e78b35f4ac17d7c3d84405b6b1f3528d7cd9ce48ed25ecccec9a83b7ac027a2547eb24d949220fbca47a27a88cfe1a91b18e3227721af6fa9a7da5640050264a73b0514cc7836c08bb5ff84ac0ec3a411a60293df4aecaf304eb0b0c35f1b304b5d4e8cd5f7f3e731e80a569a211924f1878166d6e47e2b739ad494cec3937e5da0c3847d240be37ab62b80a7eaaa6c03f36f13c67eac3f1a26f896776e63a2d0f9eae559cace12828de605c5e9a1e997ef24626053e2b92c0b5e090276d61ba814772d88a3a6b64ad3547cc089f0658ca0d2c16066d9ce59c9bb54ec3b701bb3f2a7bda65f458e444aa7454f7608f6185fffade644bec9efae8d2c71fb8f98f03a737bd07e2380e6080088c49f7b5b89e967bb4c17f599b7396240affc76343a5fbc59da196c1e5ad05e5dca5dd05b73fa7058d15d3c9932fafe50f89c08644c59317739aa5aaa4799075179092f7c7c95761f2d14b56ddd01a9ec387aa2c37dbf33ae931bee4415ac3f9a08b0dee8248ae684a539477e77b3747e57cc9ca04aee0bdb45c736163511edef8fd1c563ccd11a79e6c5450e3ec34110554bae81069ebaec6a2b379a0d6d8e9fd0e0245f8cc368a0da74b7fc9eca39d38e0c07e0b7e16803ed100d99db5e79ccfcc8bac2e573a06fc42855b69d7564be05f67964a8537ed35dd0614a17e1c5a0cc83355059df1e0c7db011ced0e38691d5feced794d0c9a1439d6ed4c926cdcd5da57315830eae89af3fa81ec74b82d445c33f7a95bcc0c2ce093bdd11d13301d4aff037d2152b1a797ac075fdd8b99775a8ae6829fc27cc19f2e78d66d0888fed5548da085e7126eb5852ac0d43a4e58421481888c2de0b5c29b98ebc674f912535b5af3e79c02872bdc81cbde0d4a0157c1c69b7df685b9f943155e1ba9023f46c9d33e8346b73484a8a6b709ae23682343640cd429f2a36f9ca0953c2215a458dd6af65586a1717d34d4958f1fdb8ab2d3500f7578a8b4b39dfeb3848b1ae722c52e847ef9591bcfcb8e999077eff953a43a0772b8da7b198a4353cdd2c08a5fa2ddf65a26bc57b85725242419e1812da28be845329014517da38cc6f4326bbe6e869e58ae957a793b41e48aa324ac216cd5e491986c3624a3519a370cf29bb788f2ef3471f41f4136ae3a49938a89b0882f2f9e4cac3a68fa5b38761e1b2b5c7dd89480b67ba5e5e3cf353843ca3193acebe9c81a9f7e079fdd25033cd6c18e3ed962b96f819c800accbc6e2f2d42826eaeb80d7067f469cd15daf2ccd129ccfc2ad16c3650e3c80cb8122c5ccb26e18bf18e8da46ab539e11abff46c5ef27cdbf1ae49d527d7d22226c870e2a4e29cb0005cc4aff28f4f85ba230980367800a9d6a2d295f0bed0ee379e3f300e546f59b14aa82f34de952742c4fe4616f0557240a0247c03e9fae4044abd8c697e1c40c7d5a593ce2bafc721e50690aa64a1e1ca07ba4d7744ce3951265d3be5312e7031633ce22cc95fd118a4fb18bfd792966d69000c2f28cd013cd21a1d9b34c79700940ccb54d6874367bea7ce01a774effd82ad77e3aa8a0e6d96576dc71464d63c1e37cebcb3d9ada55ef61a46ae106240c9f392099d23f29789bfbabf4214060a1368598da748ad199f0f432f3919014cbef7064b3b92ed4bc5880bc1b9aa7fd95ee063669323a85437b92e22e541ae96f038d7bb5fd8be49671a2ce99dbe324098abe27e7519b1db62923c30707d2579943df21076fd707000e95e12f91d26fea6302e25d126b43134e0950dd6c3de8a99d00891c67a2f98e6bdf3018486dc2a3491069e78f087c48810f123adfff32167635d39e5f3955354afb94c7079547c7d7b5859d01bbe6c1e501eecd2402c27072fda85bcbfde9ea2764a56286e00dafbbc879ee6d0258c8b4df6bfc72287084a340dfb67399a5ac349a4bcd2ac0b0eb6ab0f29b08bbee254415a099aff6e1e47da4cb09d9d9ae9b58709cb0052cee728be3186321750692547b9b7e7f33af93314d87f4295988b55db2781d70f817395e6de1fda990f312556bb3a2f9dd9bcfd4529c953335e0f8b18963528a09b8924d4d9a6541225e4b4c0ec24f011b86c8d1d0919c519003b714e2594369ea6350ed6486ea7e5096f05c990ae6d16985bf5e4777b805d44cbd86a3c341b17c98b60ba347a0acf0689f92d608405a018d08d147f3c4c5e38bc7f4fc1c60c78bac10e0f56eb099e2aae9d96630a0eee068e1a53cbdd651e2c89fe18d2718024253a9469999f0af3f37afaa381cc62795acac574aa914b21abb32806ffd96c0cd9c78d77e5e3b6b22b85655c72f1f565dd04a4735c9018feb529b829b57fea134c3ee0f3850215365cde0d438c1e29110552843c77598948c5f2c80fa1cd9b3adc588a51ab20314002e0f6db42857df6bc1cc6e4329cd3d1745</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【2】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%902%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="4837634f9556fcb5b3002b0c0ff5d2036ea751efac93ed10caba43b7603ea3f5">e60a61a1055049834be66d4bcabc523304f0b986e5f014e9b20008a321169c1c6c482de91d90c986f69e9e0f9c731782c5b8a5e021e32f8e5d96cb814b4a64edf279714412309cbed03523e41be65de758ca69e9fb374f3dad734a9e813160f5a023b5bfb9f56e9a6aae5a4af5d7e1a19674bb51c7b61e4a4f91bd01fe1c8a236b740a7ea9904e7956f71bd766b65fe23a8a0be2d63dccaf3d42b10a8b05b964b49d260b2bfcad3ee4e5f0d466162226e3d498579a7b36d364ecd0916a8b614f43588d6836d97eb9909f6f8a82fcdbcd58447ca6c0c1622030f6d3e6a552df54d7820d97a31cd92a249b59037e0085eecb6401abda7c30cef952a85f836f9d877cdbb1ff82064c8449006b40161907430fbde9f1a1c1cdebd7d5192f084aef188ccd6d0b00a111d8eaee83bba2dd5c9bbeeb09de7528b461693615d396e45f2b962218ce06e8d7da85a3af6f6135c6ada1644ca4bc3a6dacb8d901c46f59af7ffcc5f98f34dd6c1e02f9a38e8de8df9d957f59717367292b96a4272f284c5079fa5f8f7b0b5623db3ba6ebc10d02f52f505bdc1630770353b2fda8d191c3ba79bdf30dc8af667f15930395b3d2b84458a133e70baf906a4b99d222dcc9ba5b5795a19d6a8fb6365c0e135e24a3cecd2795646b94ea5a937196eb8770128109154fb0f292a44d7e07ed544c71961c857167915648253b0d519c6b21ef4c4d9b94d7cadbdc72a308f19124762a52d2363eaf45de9df9e4007c6cbfac8c00b1b4dff0538c5fdfa58391bd2df5f76e0d735876d85dd251ecbd6c8bc411274c60a4e6222b41d36a1506e9e2f1f0c13a9a57bd54de041e1b48dbcb537f8bf7f6afbd24779881cf4161ccbf74131e4b0b2b23db9206d233343110062bccf58ef5210c5c2201b54aaf1de775bba8e96317450da120e7d8915299fd8f0273c14c4ec9f599dbbf23494739bb7a480466e3bdb27b15a26cbfcb89559f02f26097fb167fab80b92234e86825fb6761b1fa2d1595147676328ffed38747350287c5bdcf1e4a5eb27b4c8d158e159e8928f5738b354be4013de67f41a5acbeeb44f53b5fff115296d3ebe372f2b013637945ee3c79a3334770f4a4b71933a885cead0d9e6073c3bedcb69b43f0d39c292a2971765eeae0a2072ed41e3a71c4db103ef3f2321ebfa6219b941d2369dbfa63f7bbba8a08f004c8a98631776f05426a343ce492c859416898769afb8ef438594ff603a26b0b2bdca8874de3f5c87c39f1ff69304e3af79e0f436dd14d2a943d65fda101dff0e9a655b3612f6a3fa2d62a1545b86b4f5c2c84b9871a98a366d25bc4f93ab4c5cc7fc706fced234fd82fb4c325966508df7c8a2c2ea46ed9a1c600aaaad6d5f37c7b5714c8d44060276a7e50cdb7f1cb2f8e31d22839af45d45def0eb3e3d1f336ca267aeddc2639c31aee97baebeea08a796d6e81ba34299cc673701ef3a3c66cc24e632131d2f1b3cd664d12511b72acc8b37007470e4de63092b150013af0842362bacec277a233fac361ed83e1cc0c1184a35929e3ba90dcb3b9e7bc6c470f5f0df05272d12e69f5bd2aaaf7f06502511ae0a29b52cda5408cebce6d809e166c51fb85641d8658d78c5379f868b078c8a1b7ef96295a2f48a9d7f4ac57c5aac6b5a64118e7bdcb3ad3fc4540f5a9c9585d63d12fff36fe372fb468faee73c0f08acf8f42c515e24e3b18ae756b68788f3203e220b4cc44ff0f92b372ff69de692a1a1cd9c0d25c403d3bdedd06fb25d68360b93bce08a07690d64f05b4c8776a5c544a3efc20447799b2d56bb8001f662417cbfde57df8f121975ce3a52fb00b7afe7f78d1c77a77feec882ae60ec6fc1ea96afa5c22c0fe6490575069c2492a81eca4b38535e04767db6225dbc8a345d6e7bb21dc41321ae24a3dd1b9e28b1f1136e306a50fb48ec3f61d42bc3d05447c48a9a72b60d589bbdc292061e617fd661d5cb402b282618682f68cf7b7ab5ddfe49df42f33f4c1c55d7093728180c48678323ba5b62fdce59bb6340ec76f4c2e0c7bf272672353b9b6feb60fa8473dd1a3da8568bcbd8d53a90d7bd995ac6519c6173b2b09fc2797971f44a176646e8ca2068c7a5808e993ee5a494957e9642ced50c181eb2759c181484eff4c7680a13daac7cc4da1eee5427dfcec25b19901f50224e2b8b7030dcd33fcc034a12e01a070123647c82a410888eab3c0a0f07640c649f631cd51213cb4def762ff16534cb85107ad3a0c3a34615eeacb902fdd78195f7f8c422188d037e7077f59472e05477d1e5fe800cf1bc5078c7e5572ef5c3899e9b9b39780a37932a2a3aa55bc51628da651d307f0c823d921d319134127b89b23824cc8ee2c4722bf624c4617b24a1704e8b10e36d429824e30de11b970d42a7d8532633e497fabbceaa54b049720c592d73bceb032719bff29969a0d723128791901bd420de506143e4ec8071148213d8b2286bd163531cfc478cd9aae4e1b63b24cf3c9cf4a9b296d5a30a02e52368501fb34f61128b2d989af395f884b8bfc1224545530645c6618d8e53959cc5005e342a2e7258af5325702f363d426f145a31b21dd4ad66e93a1070924205dd47e7226a5f022c6a9da135b7a581a652613550501f19790a6eea18c153e01bc15f3803791175978b9deb224fd33ac6a8cb7477688d5e2f7e910321c0134b112aab71d1e522ad8bc51a216cb15d427cf26cf87e36f0d78236847c309ef06548b9555746bc5c1a94aa7971d4a620e2a9a5065df39c37030fb9ff414427c9ae95187d0e4ac51d15107d347227d662b400c956b3843597c387c0cb35dade8989453aef42c5f50d26d093fd43ac1ce259d3417daca9d6a98171fae14e8e01fbd7221b6de6f58707fc49f322e4e89e32e7c41fbffbcc698a669accbebb7d44265715fa6da0d74c29f83b64e29bcce028aa0c6bec4b6c9d22507f379f5225f7c7d96fac1e85e6f17188b2459a2898cf3f444dafc1802f5bd90f3f7bba787fe416eedd4d8fb6aee38b07f59f34fa1ca7ee2aa77fb1bcdd2698fbe86e83216e210a75c0e254e8d7064efb2b0117f45423d7aa280af04a93ffd3dec06b27f8d4852f085db46c033d3a79a1d58bc565565aff44f7cfdbe9ae4e8ee3a0913bb78e957d59b80ad223d954f830e593957eb0a35d8e0d62d7c4576b7c48fd924f8e481f12c715558632a8014387bfc0d859b422d58053cb1815930e06cbc1dd50835958476280fa19f8394d9f9920f98a3486a3920622d2659cbc4c44e5d414d310719645638e1825bdebb3ed26eb967023b455af301f8f4f3fd220560699bccd09e7bbfc3c51a2e8b1d14ca246c1db617d3855ad26f6bf0b4817de2eb013e2a9a66bcb6d10e90e0ffd5928a4222b63b919a59c404559234cd3c1e853bcd2b85197425066314a61e04b50475ac850851ca9c65295ea062e1d47420126c285bea032a04d3b14989564cfe35a0fd859a5c9123da0b6d0dbe2cea1407bc84f0796382230dbdc2c59a88f8b4c058f1f95dcc19fafc088dc46c63d124fd844b7adbef979a512dfeeff1b2055779aec5af27d890df52772a52f6eefe12acbd8a47d2bd4c69c44dcbab3766d5882208c76c83c416ff890bfdb322e87d33ee51490b5ee890895442af07f83bbab62bb2c49fb0d41898c4f2c622987b38a4ebde42f32f6b86bb4ba179367b452435f15a80d384a2f89c5153340339fc3b2f66dba7a5e8e2d240aadb3ad58015baf2c95a53910d9026b06a1f790f7ac479add088dc98c4e6261dfaf085339a6274381bf0e94f51e53c058aaec22be07c6fdb820033d83b6b671e18dce9b9f1e01952f38dd9a8c77a1a067a854bcb46e1b75b9df262a1f9e0b0f8ac58d2f0275059071077ed30de597769a2fd9622f15b63e6b92a4329822933a4b07f6b89aa5f88ff38f51bc0918fac796da1c2b31d9fb0d8817e50cecae37e90f664e0b6e365900e9c30084ef9e1d2a1d385062fe1993e8a0365a151f7dcb786fdebfc0aa28052ecf742f8891bfe783cdb8dedaf11ad480ec831a71992053b70299e64342e50a66c32ad102ec026a81412ff8b9eff228dd16fb17e96285c30fc77e6b70a734b82f092ef5a06f206387f0147b973a06755bd89e21ec8d1b6853d7148d4c8995d4858929238342bee3614bf6a091a29624e17f85ccb8a4c00650cde31b18159829854c0384134b2d8eb70db7cbae2118fe6cf95f13be15d86e4f1423b8a206097eb561618bd3697a31cfa54d6c222bb9d935824ac79f3a5aa33a85c4234303832d10283a4f9f02ad48bfad5ff02e6218f3bc7a386ad4061a8ca8b453e88f45f613402d1111429819159845f59232761b12afded9a83c77f196df8c1b7466fcbe9b0c3e27468da217b7ea7f0cd7f04e9032d0fa38687588774b614a531f99c6045ff4f8ffcee2cfa2ba3816eb1d0f15e58081b78bb10cad4041f9fc498930f2e27af5c3eb7668e3b5542b66c8aaf5637794cbcee22c43b7d252a472092ede48bc97a7247534c86a7c6ccc574d57f84ce9672770dd325b839e19a22759f7e96ce8de5ceeb9eb6310ff731457c145e0c630a097a881e541f96cceb49</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【29】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9029%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="96043f93f29b5b08d959e149805934047052ffe08217d26bcb9661afce79b3bb"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【30】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9030%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="7300e2c527b45dcfe9fe1ff21a393fc38dbfe61a1e14ca5710fe02c830e6850c"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【31】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9031%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="9b8b9378fd8d0e232d7c75657e8e1b40694856a5fa6a72482b60dddfa4ef203a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【32】</title>
    <url>/2021/04/18/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9032%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fd95787ce7f0c22bed18d084cd9fc662ec863e7a8fe31859d853bc698a8d34dc"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【33】</title>
    <url>/2021/04/20/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%9033%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ce647252d10580bb524635852f4c9bfc385eac82afa1f73704c3492ce110dd0c">e60a61a1055049834be66d4bcabc523396317cd9197e890281417d950a22cb6da7ec657059d76c8ab5ad6ae49eafabe7b3c3c4900066df5b9687a46af353c1273e3745a523d68f95ebd459ad4de4f1e3c16f0ec33264a8d0141cbe6b6d4678ea8a9f07641fb3b23aac781769ae59dbea318e95ecc6e841c3de4478328d6549a2c351656b064bbc522862759c6b59e276b708d9a5eeb935a9428353645d47e8d5f78ec630c06644b97e28179b0fc127de8a3684601c17cd62f6da0bbf2b139902ee76007b0882a513268ec6ae81a8992e8c009bca2958b033a70e44eeea5e3ac6084f4bc31bd86cff7d6ef07996629dbb75408aad9dfea29ab99e952884bc0b34f5f9165a3e1d6fa05cb82804bef223b693862a09191768718cdb68e8ea18b814e0a50e61e9d413af0c31381997807d3811b4a676ee4402e8ad82347a1c853cdeccb9abd3720eb3c87261a205848b823dff23cd6007667c96eec7b26279c460eba7f0852903b713b751f8b6251272905c48ec64a9f26af5fca6f7cc02188b0b6c9324f6359f43e177cc6d5da6df8ef123100f93e5c03d54e4d3099ff5718d9b79512f838030f8f6e2c379ffb9539d541ced16bf03758e918eec2be7ff46a571bb84d608113bd39d072ead68cf8e933aa7fa7f1f3c5dbc82c6ecd7bbfaaeaccc8fcd8dc0bda5dc6b108da5fc02746032d7e405caf80459d6f976af81fc82d1e54cfe5401e04a747724fb733f03461efe9fafd144b04b7ee487228c7dd623bd4b264018194ac1adfcfaf61f41c29dcd736b5cb04ddd5dfee32341d5390cd838444db27626c1735bc074fd6f6b055412c5e7387d2435ee5054e80836af343e8a4e2793baa3c491d44edf6a93a57762b59d263b20465ba78f024f9cdc722c0eeaa51f8ccf5da2633377b72433f0aca0fc3358043cad8a90f86748cfe1bc0ef4e6d0319871eec80d93c62276e58af9f85c90258f49999afcd5c7b6b85beba4cb1d9a01564c38c7b134a0e7037e40574c27760452eb77feaa89ff3c413582ac9df14c21f63b94a66d4aaa910dc58f350bc3b82436ee9f4496d1eda47b558afead86ebdd8a4f30ccee6ffe6baa71090ca1d2d9c115ba824f15788e5180b13e34f7cbb8e38dd08ace30f9cdb2964b35ba2f386a466c35d71c449c2de10dd5bc6761c165a3ae6bad97d668816d418432783b40101d24e0d55c1b7482902ec4c956c9e47e32c49e498a3c4890f1d51daa381ecf1ed118fec344240d5e0af950d2b46e9b8d92ffa7909069f4fe92eb33b0163a900c6557feda43d00bda9be4ac73083e05daef0e4b5091c796fbd2ecbbf6146875a82784c358102a74a23743b78df086b4daa22475575d82d683f13556c3166b96f88830426bdbe852d9e28f0376a3b06ec94b0929fc400bf2e8b8530570dd1c98bf36467d6335f23999ba110d63286951ffe5f0ae9f196b20bbfac29d2a0be2b72031a054acd0652cdcd286af96fe090de7a8ae527bc43b2510b932078ae2f688eff5d7d0d828a40c198f0170a40f7e63a1139fbf50edb84685964997a6bc2d548dfaca8ca7382a85806c2b1ecd6c454b50a41cd43a9a206a6d2883f7d44fe8310e41640f60380ffb9eea63a8e4cae9ca5c5604f247fc32cb5c6c519633f86c3eaf716e52488a9e128191053a2350bee4fda0ddfba6c7b0b8bf36b3ce3d1fef2dabeade4a55a05091b35e7f3343557eaf0fc553ddabff32b34b075c4aa5aed09a446e7439fa7760255588879e656d544579bebf1936dad69c83b0b13df90c4d61c9a5c2d692a0a628ad01df85cd58fd6eb095580f71eb024fee20af7441508ae1187275ebb5011d51afcdf1a6c1536783ecba59843235d01e29fdaa32a0c0b1fdd0f9d0df5d18414307b31d77fabf8efb53634d53f5652445a9831f05097427d8872c75dbecbaa46101f6ecf931174f237d256e01c00bdfe88d7381f606d64707b1229ac7a750ceec77542c1a56d16242b263186315ad47f654644df52e0d2ec9cb8e22dc64e35a6b99bf9bb48b75e6dc8788c9be77c713fed1cf2d9a150380d632edc149cf3dcb590283daead10ecb3e1f44c3219fed331fa9b7ec9f0ce06da10c6cb27225fdb1fd15e339bb9af63454b79a37913fe56dccd54f2776161c433d7e04000713bea89aceb3e1e0b60edabca4fd40f9f7d502efa7e1e7cbab60e002685acf2fd447cd0f6a66f36bf5f66afe2886af3faf029a6839004a71ea8fee53aa4224176b061ec36dc712a189749c6566ca43bbf493f10d627c80678144041e8ad053887740afa7e36c16d2a439ce9be59617770c7c797ea7a0ba8cc7202c9162c1eb5d4e1a91b4ac7f53e92da823a93cf0cf8043aedc0580568a17c89e3869464b8659e14c554109121ca68c673baa9cb0a267a13497dbb1ef62119e7822147373d6cdfecfaf802d13c8931da5557f475635a3c437eb006260536de9574ae9499fe24bdb233fdf451585dcbf75c23622b56435c87f3a745560c9b4a6e5560ca55c34e3b5edd24c6f5a74fbc44fa5185462f4a3c97622abf4b2882c69134da93777261a692006fa36f960042086baf0286f85f1393a1acb1db91037738277742a5530f467336e469131dee6e09da682a4347624eb50fc5b602e83fe7aacbfd4ab6fe3c30bd16f0973769bcf0a5c41daaa561be2b595c06da0caadafd964e924026579bc73783401fdcd01f8c798d09dcb15dcb7da25dcef3b414e828d00a33316e6f82d5f0932192b1b3d8288e105ccaa30e173b745bc26704d6a73294f1bec870abf1a0b15ce6fca411dc92c10c05b1ca0513d027f06bd050994114e482c26596b0df4d0f7bd26c21834eca8f0cc11a673b59e930556cf632a3fc162f0a1cf5fb726167272819ee18034b3609d9795a46b15a23cd1608437d6bb550b8a83c921b34d7f9580b2bdb28b2f8c76688bab55183ae315d666e9f61d7d6b4c542b73d84e241175ca825aa763857f983a0e57e3bbf3d3d409f18e43ef2b74b12a994d110c18b09cf8fa7e0c0a0ed2c16cb6ddff779dc1da8c42c3178e6ea273ab34775273c0f575aaef8c86d0fce1b85933ba687a4256e3d752d1f174ea22054b470bec6e081df6edbb2ba6fab1e7ee5a2920006531ddc1c05b1a587ca6ea518870af30c6f1734cc12712d141ac327b7e99b5f6ba6ed8c4c4dbb52fa7aa8fcf63bec25cbd35ca9055d88015bc438907f4175ced1ed483fb8fa829174734bf6307845919b033a9ffcdff439e4e3f38de04ef8526cef4e6abaaf3a8a877b18c906b28d9b946e8c68fc13c053cf0d34d0db5d6fbe7578e51eaca015cb73eeb0c039fb07aca6df58f24bd90e7010fc3150f1fad75dbc935b4b030e02192ce28716997367543e2e2cd89c84fa1d319069b0036c626352599aaed7176a049d2f1e9b63812ab28c8224e8bf2977508cc6420b2749054542bc2cd651d08a41d4b75ccae2e99d8dc3ce3ec9d6a9d19b0f238c87afebda65d554f715d7cce0bc7b6d8d208bbb14e8547c867c699937a942b973108d7dd0c131ce459a851606c8bdca78d9573e25ccc48e2c64c6ba410d9dddd174ec5bade73aa2f6dccb97529c5ddb67d2067a7095581509e28c691facfdc70f1e532b25de713a9071cfd17e511e3b6b1211afe94d17de7e9ddd7a1081806db8a4881a7bf86c6f96bb39dab12ca16c8cae3d0b2d350db01bd634804be0e169230d89238a7e18d5192c568ee3932d0f3f3a7829e44a1be272e98a8f6688507f1e003801a67b6b8335f1eab74fd0c38fa523bd80cb8997f79018c1a08e6cf71a0028d470d20a95f36c035d3b619228c5b074d6610242bee6d83a2f2f1cfa2367396c2e1c24f2363d4a631593db246a036ef1dbf8836b0a04e5b4b64f94d106a8d5a4eb38d2a4106e9dd4aaefc31635886eab38323cf01b38997ce86d13e3f330ba47ab189db67369d7962d106747aa4cb4eeffd851852432bf111398ff0fc02c0c2ac400edb5468d30790ba71aa270412bf7c739030c6e05255fdc7c4a938f802f04dda843a01ccbbb456d3e07ed990c6efb40a57b7be59ab04a7e2082bb8dd333076ca0e311b879133d4c3ae71b696e7ea41888ff3fd75170e8a6ab7f1b79f60734446200fb46b506260d47991485129cac10cf8b37b1e344914c5837fdd4bbe8346d508d50dce074c18c7db3a090ed8b3012ba7c5b75578ab3881acc526f43d93c39a8f0a380208bee8a62769978e7f5d9965c03e8c82d245cf1afd8c7f0ce558a85220cba18fa9ca4bf141f63c35fd91968991dbf6e0ae3aca5600f4327c268cd9daec9a29867be1fedfa442f513467d568945db6ae50aa0acf8a6881d3737a9ab5a9f1e632e731b0f9614f0b88df354ed53c795a23393d839bc36c4594ea7d8c18c414aaea4e24b09f7086ce05d6e29863850078d5b967ba95cd365ac8883a848c89c4cd9c80624e07cc00eb9f93f6c25caa6f61112405631f20ea8865186de7ffabac6ead02d0e2e810e8ecd8c2f8a5820c9b38bed3ea7e95aba48963198b78614874f52bf2365f72798ccc2833d1bfe2a8d4ddd58bd94fe7cfc013f215ff90ece191df16cbff65c243c05fab66a758f9d4c93f11a58be05e74de8b3a695e2c89b536d4ea65ce327f52f0a158bc3e1c1bb262326b611ac567336d634ed712ed0a1f71db620d4ceb1fb38a28a8623459b58876e3354a657a50369232f9f8207784d31846a2ac751eafe72776eb41a451ff830847a9aa682c85a9d64c2395e229e6e84f5c9283f5ffb88517dc13e9ba7d0b0af141ee2aa542fc54c01fb1f16dba42dffe26baea47eeb638115b8531e5debc6a4ab4c1867223b19c01e8fc9ab178cd091b3f9fc86a6383780c551009bc085ec69a36d5ffbc1fc72754e02f6570d56347e47bdd03dd46a6456b914ba78733c63d4796c7ef7c886a642b0f4bbace9a639a9617730a519a62919b81239f6129013db019270c6a68ca2f93cb4688d30166845399cdce1bf12e8e29c47dc8683568d140744c06a6e3840203388fb0e1c5eda13dcdcb9c7e7e02d3b81cca7d34589fb116216c70173227d450f46646e4d8d05cc6e6648de4acbec4961b91611a6b83745e31787dba206f1b1b824c96d264ff25003c657ee6664da84528cf05326b22e11c2eb3951873852a017b2256c24e21672929a17413148bf804acc4432bf0ac57606ea3831e2db5d8ebcb9e6d8486692c022d9a9</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【3】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%903%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="b39fc2cf01ae14fbd6d4caa79a71f9e953a143debcb1dccddae8ec8b91c0fb3e">e60a61a1055049834be66d4bcabc52331c188f779e4a5a7fc6404c85f611ffbd4c143c1db19b5c5e17335dc5dad1555a7dba78317ff1ba5af9081c861dbe3a7a3d9bcce91c7346685c821af9dda60cf62247097bffa8637de96e9296668aaa76398a2616928e0ec1445beb3ef74bd649e49bbffe48b5a4ef027a24bd8f56a50260f26fc58af34e0e6a34687d97b946cfe14d683c9585762a76cb6454532bb6e258bd582d40fca98eaf5f24c3e4b5ffd3f0040288098107405ee2051d9b09d3e049eea998bdd17514eebf40ca53aa48edf82474491968cb0dadfeef5c7e3caf4855c5e6a44b000884d5f8a232bab010904aa252ef4a35bda40406e8ac53745fe859b698ef34cf688f9318b6a845bd3950c5798c72d99446ed7235a18d8233b190d568300c9e376265dcba121fc34923b7820cf28d27712e36e6bfbb7e2f20902f12a7d820a09c9e881b21cc864e35f5cc9c7da89211e70863fba94f9b11eb7c3cb890b2ffa145dd44ae7ca4ccc6c234e05ee8758f952d6f9c2085bdd2875de20b0ef14eea2b46ce67dcac97c53bae7fb8111a95bfbe35f9819e7c99325fdf6aeef9653012d2f5a7496d11d94402da76ebe7df339f0c57518ec114d60593aff8e4a233114f661e7192ba9b4ceabea06c7802943681029eb60de432706c8cfb8b499ed7c0e7414550a202c615b0de3cc1e251e6a999ceac096ce97f7b191b3f00adf8fdc4141e8eb1eb9540eb025ea5e5b1e3e3fdcb7738c1462f3da1f03f1c5f3190c937a0ea22369189bf7dc2dcd3914571137742fa167cc0bb07c23f90fe324e591a553131c3f1745cea162cea11dd964843b43c09257ed7838205bfb31e24a8b6a06153c6805a28d776babb57a03c1eba9b72c4c3da7daeb8839a328cd2c107d1195a1151785d4dd351576f27023d870a54b42d9aedbd7dfb15292d45b3d57569fb826200c5ce78e76f7608d9a5d82723fc4395b594e875a33c4ac8c3ce3fc191d374db33e1833f2cd0a65c37ff7053e8d1cb11b51fd7b92a1f6f107a6314a58ed88769822d6e93a2363af1ed92d4ffda50f60e34932ecdf4c56ab14d30168c2100ebf16c932a7421f22852e581e2c1c5299dca84547f5f95cb2bd767d6c9a96895aefd76c17501891945acae35fabae8017b45df2eed5b81204126019d7b40517de4d94470bad3cf12daeabf7a32f2f6c0fa35cae90cd0fec8320a3327f1d5b3ed0835bfdbc313e38ae3cf01126e30776848a7dd6772c26b1b389d8fcc93a303fb8ef0aaf523aed5d130026a7bd26fc0aece7000b68eb06638a7bbe53dca2ab88a7836532710035a7dfdb8750bc386e3ca1ef3b2a58f83cd45a30f8210d1b1b22eb49c64b6fd2d1275ee5727b7f280392e30e496529f3c5cf4de7aa369199d57b0f704fb7129ced45efe5ae0e02a6ba3825a3f61a3e2248ef86a55efcb8a180f46f0e60b9b78e4940c92fffb31d8295e77900456ccff9f2b749adfd9395705320ee96729024daa5626c972f4a12a7973093a0561ad1f906049bb1d1f930fb07bf4c52774d89e5366e7b37f55ba9e2484de68b544ea89b2944fd472df1aa5c3d3a4992a67b065028c2a42b015ee99fc7c2c0bf38fedb57840ea9f9c1e98eeed8ce1d917229abecd6ee32e23101d5968aab182892b9adbe7d547cf39bdd861a63fbc4cde443f6c35808b28d8af9d59d79e1d97405c245694e4106d09f340a483f7ab4be531e1bf8090f9f6b1f4d0e7f220aec0c5697cab1aad0e0ed96c722a4d22a742968b4e90ac4f92fff2ab5d333c8832bef155b8243bb7cd8a92759fed412d8d6499a92839b6bbe0a61b66897f37</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【4】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%904%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="f9c6f27bcbb83ed25ce43a329b75cc6deec8f6b7786ba5a19f24470c6a4c0202">e60a61a1055049834be66d4bcabc5233f23497070baa7b29a5dad6b99f62d64ddc3c58bf17fa0d71bef7d137729de086614d4f145f90f6803fa0ab5ed912e4f20a0448a530b83a6c5faaf79effd341b1f08a0c681b44a63c6d97db42678fa00918146c22e61252a52149e303390a11841e94bae0c122363afd89d5e891f420f38265c0c34eb7ef31f17497c4a79ba056878fcf9e88cc4875fd250c8500d09cc3eb368dd81bb2eec2108ef7c1a2895fb39ffba36811dd8c00c3498e94d8b01d9c9ce39bfde7844be1b76c18a391d80065e4d6bde31a84f5d87334a51845bbc2e870e0cb34cfb4d41943f08ada3a8e56db1d5ccf7906cceb384821c79fdceed09273d8f83583edaa4768014870835a868f25183569f9cd0afafc11a33648173a81c55be4204350ad6d6b73066c05267b9adb47bc754c4cd3354785466f8748101fb7b92dc318ff5e2ce2c76d9ec00ffb9b602ca587f078701d78687768285038e28dd945714b2ac4186b378cf86ed1dcc749a81a86aef562706b0c9061e43c901d69dd10dbba900cb0c60c9cf846797c4f3ba8a3be7dd3ee6c80bc26ff6a66a6857bc8b578e2454de1f06bd50644a9af0af5904d73cec8d15fc873a0ed78d5dcd412c65267038806a3b5a03fc983412e5ee6a62766a0e4d1cbbebdf064d7a469ba7746e895852fbf75968569d37ee4cf44987c467298ff41a40b43f6b6d05793a71558cdf99b83da0cd0b95f897be607f30a62fd013da3c3758f2d6e4d7f7f1428998a800a46a68150da3f6b6d62a02e7b7597f9801e3c7216d2e6529e34010c845bc6fbcece49d3e5abdc1aff7e6ee5f863075191b4ebe4b350a1cb4622b910ea204bd675974f31cba02bc07f097f1d6f072e63d756a2f0d68dd69d9eff8c14079915e474d1a7cf6c427ca99be49a60834e4b3498781a5a7d32ba347795b8a7ca1383bb9bd0b4840a169f4fb4e73e9c8fae25be6dab0f17f25dcf1293956aa43781adeaf2eb79807d30c64a204fe2441ccb45ed1a9e1462bc2a7125d5664ef41bb5373c5bca1d50f3ae2962b3c25113dca20a74b5fbbe53a27ce53b62e035eab7636ff4251080c987c98cb55f87d2801d53a6add245d0e387822ef9f29c8ddfc270fbfc38732fde2aec1419989ec5cb28d03b8a672c5f6e29010766c244f07b42330fa37291798eb80681b54995c5e4c36cb9ca638eaf5485450a758e196b124ff456062aaa790d0fd20a7808293d16a00c099c0a0161f4a50d4f5f8bd8996e6bf2b439d7c0002ea28706920365a1b76de42c5443654644d1b41352b393ee7265e28e77a39889c8971c3fc13885fc2faa5b149a7445db3035cb9bf9911cbbfaf83b3612aa6f021361b07b92d2c502367e5e929bbdf74d4c6fca31d742ba8281fdb6efe1abb3b5b5e57917d1e8c224bb867b439f49b3a6f8d57884c718201d0d066ae09a13316bce1804da2570aea857d09438072028a4a0a79016f4d27b69224555ac468d5386830166ec4a9b61da82127a387dd2097335135ce08288115455942c64e49553fec0372643a765bdb149e6d9a10690cbd6093224973c5ed434521cd63f27161fcaddc6c65dab78ad4b8a73702057fd0e4d38ca48ec6ffb1924c30cc79748f2218e2444c1ca4ca5b7f3e55b32b1132ae664172bdbd222f1f81d3c459abdabc7bec62f9467ec01f2d0b4d2362fc2044e83c7a8f1a3c8944fbf5839337be2e441f3a61a7fb431073a7b017473e3173824af6a0fb3c98fc300f490f9d38abea2c730cee3741f14cea3c42f997a44946a9ffd6092252c6b0f15658c3abfaa397ad1e64198b3e34d38deaf5deece51dcbe27447d3019c0825e0a976cba1c8b8395fa8ec1116e7b72f3e2292ba86fd606332dbafa3589e2d0f7be7da4ec2de0feac08d650fa5daa29451f4830a0085afc65edc3f9f3aa76baf94403339e10dffe04f5913b3ef106faa6482baf77e4cebd6845800c45c8ffd74f8684e4b0d14feecca1ed9eb0556a144ca343a56c57856b27d9ed79190720575e62f6e4b655d1c4d4aefca90ff8f401c617d1ce6b41f06c1e3eda6db397b7a18a104114eb962347a9c31f9dd3ac4a477973535a7eb6</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【6】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%906%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="83c6acacae7364740b67edcc723c7fb56f1c4e27f11f3672d510a644b10a9a36">e60a61a1055049834be66d4bcabc52331c188f779e4a5a7fc6404c85f611ffbdbc10b688c4f0bc672ffead3f91e0e4eb85993f177a910998283b73c387656f53f0c0478a9677edf0f3dea7e7cc23cea0bae6c25ea0a53892b6ab443dae3108b74979eaefc6af2901aad35a58ed1eb59e98c5be5699baddeed6d92406b89aaab2880e53fdb7bacadfbf826a7bcae4a2ee6f91bc447fad8416198bb55cc16bc7ebcfe689bcb6d608cad801fda935f81fb0a051d3da1703be6e26216e260881dcf1a166b72199d843ab2ec23d403b5f31029a5d1068503aa066e0e66a5f4052e4ec9019de1cece31b2d4117278b60d78d92d28b4597f7bde6a46db0ede3b143ac6ce12b6b7860ded62e395818d24d3d161139f2d2c16fcd45ace4df4e02639418ad2f58598e22849589d76a883c1570d905f7e0620fbb8b5475770f170fc0f9f1ef8c8517a5d972b743c27da89036b8d4324e7ea364dfeb509a745ad3e186d1e1ae062a20fd4c46db20fb70c9bceb7b3746480e92e3c74b1955c2f76245340c9e37bfbf73206ed9057dff67cfcd52a77b333c49d747f0c483ad32950842ed55131d3756f2dae249540d2c138382d1d219c3a9e170f33ccd148125d566faef42cd1b0b84d136beac03bcca9406100dc40219f41fa8e49242038f9ad19af8faa54204dceee83565f5bf929ec6e1d53acaa04958b707e55684cd9ed91a8f8a0ba94e9991c5d21cf38a5bf608b862c3a43d07ed59a5cc8873826bb4a7e4e3488370075041950f6962f56809a2f3e45a87de15df7e3fada4a4d6817dd2089c1a9291d65ddfe51ea2282e6c1772524bd4d8a28a791d69c831171956c391b6983d74d0da7bb427745967f4cc7f6d5c5cca49b924d09866133da1bb60bfdf37a3de6a1dfab3d284e9dc841b5e45141199db3153d3b1ef16e66731b658882a0d5c650c66f3030f8abdbc17eb214eb54b0af6d0e7700a3c31b3f0c704e1e1f17373f748402e578a6e95728a570b01022fa34d3fb41b67b99a2bcf8126e911c85f1b24a9d7f1b94bd4c604f90c386b8714a199211b9dc1e507ffe41a685c27b770555da17b543ce2da72147797166903b29c51cbc9e17f0f5f3c54dc2e3904dc689c7c011c3970c34748b92b2381c4a4f9040333f0a6dc83f485f88ef5c225a3914aab83c8392b21a719750accc6e7212e88b5768e35cec4c16614d9f1d957f55ff911a985ff541a8139d530704056b1ab6dd1f99bbf2cba98fc911c44debfc31fa437d16f8e87221399c313556ec8f75d48b651dc52dab4177cc6e9688065f23ad866bf684bd65fe669067ffe41d7225a750c9e64af93fc4aca6d9461293b8085aced5840b17ee09de6e197b7e9c698e0218021ce30a6ce4f1c769ccafeab2ea401b1e1a0a4a308b8fd1684404827d261248e48506fb3b49d73c10e498dcc6824892dcb8aecffc61f49e2e0bed840e5ad94a93e76fa1be5244ab9f8429561206fa07449924d1a4ee1389fc83e99db48a77b45dac91ac2a100ea460d758fbbf06a0248bc2a8a77ba9f411992fac17e0af0dd04b7e20fd7fb9c1b3e5c58d4a3d56198597b44ff45a177d768cccca8fafd26a88ef16777254d6f69ae832348c0217b20c14f94daeffcccdb47a396b9cd9f30270618f2b04e583fe2657a7498843d58e23f3be4638b668df499a3a1744c902c3337da2f9bbf894dd03de7f9972ef31ce0541896f0f0024f147ffcd2351c4f3e72464bb9b5aad603cccca2a67352a25ef19e15d0aa3a380c0ff1836d911cadd63a3ca9c57244d6eb049ab53466cf11a7fa491453ffbd0b74d0bbe03f7e9fecf4a2385d22217e9cc875229ba867511f2bb9937ecc1a2342a6a1a20a3b04a870a08482ca1b17bfd5dd2508c8d454cc0d12ad50378edf40a015ef72926e0df5d67b25f30a7e00c1f79cdd61a50c3f5197af12f49f6979597b3cc463e20a3e012516eb2d2aabc438173ab3451625c260d157c1b1b36889ca2cad287e8039b5c462f7d976f13c53ec24fdd126c95ef0bfad52a00140da102553b396319588b80b9efac6ae798481fba4ce4327b8462c7f03928f2acb4af1dcc31669b54e47187c30055b42d6f304a63970a8cd00c20a4eeda745f4688a9ddb883dedbde2c5babd7aef19acd588f07adae1f33db0484eeaceb963d9ece7ef2c78754fea4ed792d068efbbaa90025c86b3647095577788a203e86d83af38352bf3de8042be8979b38e136ee97b82a6fa0cbaf6cf62f1785c2524acfaa2b221d3f4893959515bfd50e65f6d1a6c47a640037c3bff320b95a9ca81347e79c01702ec4a83f15956d9f156a972514439de6471523ef32f8ed2707e9fb43406f097e3787f48316f69253bc037c431cd3bef11f4ff3ea931230d9adcbfd7d8abef607f1f3a67c6a4b7a82165c84b847ec76d4e0e0a37a45ccae0da592f7dd9aa2bb1a13ea79c72c7810458d24760eb501151720052f7d0d672ac942939a41178029f2a7c7bea7364318b5e132a151ec78376ae0c9d9545b6b61bb53605804c389e08cd7b65f747cb5479c290623bb04bf63f9e8a86d86b1cc817469ab389a9e485fc436e60f7ed487f857aa9042ae1a8e2dde79d34ef581410bb961462ac2cc08e4e48498fa3f6bbfdc6557e073c4b88d66f4782427ab64bd50291d9470851537b36759a1abf77cbb3a8acd3064508bd90c9c8b9296d416fb8646b6f9eadb92f2c544cd989879f5b84ceeddbb91aa963b05771e04de3c3a3b49c0132ad95fa99cfe5bb73500d6fa79eb27bdbe9a8a94a9ff0f651e2ad2765a783e8e0ea2c7e1147f1dfac8adfd4aff6fa8961fb8e66b8474fc8</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【5】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%905%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="3938afba762b4c5464f6eb89fc740cb263846e220676b2fb980f377c09e250ed">e60a61a1055049834be66d4bcabc5233b59d608331477e0d0ea35d678ef1d469ac96be899bebe21617e7de41782d3ee3f6afb52916b05105dd842cea72c76819e8d063efbcbe22d7553c6c0ac956f51610c1fb3009edbdcc6fffdc1a311a1a4cd72410a3ba6e0344177a82a53bf305ca041dd353c37f5689d6eeff59a15c54dcce763cefd0614d5a31adeca334f53f24a48d5232465f88bdab7b2422b1d5afb9b01a6c69fa2f693c25635401bfab6638e43809148a067704ac54aca5c2c7006797d66283946eb9888534bc74429b3d41d70145f2b1cc18275bde493fa706b635aab5cf9b46ed4e43c670670de6f2b83ef3296b8778f2d0c88ec34c56cdd80c5f936b805fe65d915f08fbf26a9f307a41ad74911e5cdb045374f84278e64e6667f6d6bb9d97bf909fffa55e91df9eeb4da973313d590d1f88c80986d4eff30ecab2104bc2034b009400d3f89262ce9036be71c49667c8152f5cc96476c3c8c0475073cbac43f3018eca670a2b56fff52f296392d30acd23e12fb63fde5c2c1901a887b0b8577f32f34ffefe39f7a6600b4884180339e5a06ba1759df83a9010dcd29667c0095d1fe90ddeed6fa6c8a288e551f738a570ccdadcd35dc67473bcece4d07d587aa86db31d17a1f20cb853f6cb6e0ae7093ea618e0b001bd9cd503a15a0e3fc73a6bb516354184738cafd0e6ef1b2dae2943d2fef7d3fb5fc7820214aec30b93dee41f8dea9a117c7f11d0bfb1edda76ca3c6ed0a19450f27e6bc50542c1c7d0ef3b78db23b73f5860c8078f191036ea0035e049aee4a653a7b1a4ed304023927d060de5e371c9eedcf37d0bd970026e02ee457eff8552533702960ed5fb34adb28f56591f8ee1059981fbb3442a936cad040bf6d5b44ef60f1b08e9443ff36946c9053241f95286b6ad8359685126cb0c6ad95bab4e3e17e7e17ae7e0b3b706c0c82805fa8dd3db4d66339f3fcb88b443449598d5801b2fc64273a00a272d5ee0b1202a6286ad2514ffe709d97389021b23405607fbc562774b258d82191dd24399333ec5dcee643f9a6ad9dd29eb085789531869e64f6e742bfda65a9ec1ad82acd34a3b7a8c5669e30ada0280fd485db7e334ba3f6bd0a7cb277cf66cc5d91fca03a64c93a91d5609e70950684c6912094d368b9ec7617bbc099a95f11937c6eaafd291c62613d75f3677e3a84c5c3c55b70d2e219a351b33bdb69ae7e74287d421c4067e5997ecae06336ebf7a1ce5736903149d59720e73912a5bc2a9627849b06ec2ed4334c416d8a3952dd412f7a04a1ab1949d13bdc8e302a158a8de358aff3e2c3823f8a7d8d547b27728c54e3ff39e3aa937a64e07b88a3f189bac8d8ce79395dd060bfe5428601e24fc00446b65fec9b56e4f687fda92b3600d6a57b9cc4887aae85e0b5497deee7d59b008433bcb30b61215d54d2123bfeb0ea70694960b38307d58787249032435d14d0b789ff60463b25e49946be85e412e9e3d198f9facdde6dcae1b5decead79c08fc88b9be6b2a40a6570fdeecb3509f9820ae8d3c01fefe01b55cd6356c7471b33e76cab7547b1f370b8af1046c3130a82c6e6a90c816c0efee8bbce234d4bd8d4175d9abee2e055eaf6a67f0a3adfd59042174223fab2c125e8036d3783cb9aad1689c505f2e9d9a70524b7e9365cab6e5e368a9999e13f99e79ef41eb69dcea3857c13108d6f17a993611515d17cfdccb59c3dab6c98fb1d23b006a0cec8527bcc8d013b60368ea3bdc378861c535c22bffcb9faae19e9ca5c7bcb67216f23065b94e38d134ef129f26542214f3de3fbbba2888eef6cd87af2aca2e72736c7f64dcd485b31555e5bd3b86d80efb93c0357bb1250920c67cfd03aa9c739dc87f556b794a356829b2c41185fb8e4bf14a7cfb23d031b58c086080ee9190039e216c80129bb52e72aa6d2ef3273e714895fea8958b840a2f013fb257cac2264f2dc884336b11eba97cc9d4cf472ae40d362ab6262dde87d7cc94a3a7a214a0f0353051306e0e9f85a264172b3e10154520d009fa7114fc4c32219a77ceb732bfb659061585f747d630c6b0fd1acbd5317a070ae2ce6ecee5a654b9cfcd9485880af5d9568cb2e217d50becab5845bd58ff25ee2b056719d17fde7c1345cda236e7ed65ce69135c00f44f63355f93e33daf19111eeedd73ac4e35d3bbe9635c9650562459649008e038701e2d31ab98460e2ed895ab27619747cee2847447bbc0d38a8067c978a7c985f93c809022cdce6ea04c8164f8219c961d1e2386772f5b81c88a525d3866a4d2de7c3c7a6cf8a73354d68d2e1425c9968d5f77c2c238f4d40ed16b94cef3db02df977f4e0e445977aaa4b81f13a58dd4d4c963bd061c8c1d60daa254b3dd224ff58f587c816870fa13c4b036932ea3e8269d3fd9d02837db7b492461a5f845fca3b02c4cf121d3939ce85e407d5b87e8a883e6beddb60015db68f9e4b0c8f559c0f11f6cfd907a5e1ace9b93fc42b11f3bb91e65a939263bcc9c778fb38418e0c6e98907ae55d85ecb20ae6c3dc1d889245d8db3df11abd5af265602cd98995df96aeebad15bffa8d72f9aef70a0496b26d20e5d1c78513c285018ffd7f73330fd80c48ea39da64618f11feeb2d170f01436ee5c3806f1db504569bd22b527702aa1e4651fca85973cbc7a02fa4be2c499396df43a41633c2bb21b81eec5faec8332c88b7e2ebd265c505702125796a350e7e2b46e1b28793dc40e99fabd461c07b9ebb00703c32936bd5abaca94b54cee0cb787fcdb57d2599cf1a4840155404122904ca23b9a453cd3d2923d073f7bbcc0845735a6b4f9d43e2b6ff8c5cf305a29e7b1ab98408bc7cd303d0503a45078758f1da210f6d1e21c966a53c4eaa31d01af04ea7205ad352eadae15020a290a66ee0113f07b67cab6400ff9f26c65097faeea8c6b22065e43d8e83ff9f7693b27cbd41754ac9d8031fa9e2071928a2430237552600f67d5a35b03a5d7c00eb7cc098d04cb3ec13fa1e5e41dbf8d017d600de8eac29df6b6e1dcd125c784a8a47044a804b671d77f47cd74551e45c4ce722a0a46daa039916d6e8e00808cc9646ba3b8f0edec0ffb3485ba8854f4ab9724ca1af51fbcb813b7aad8e819914154e09989d9eb95c8e32aeb7ed742751d54340e0ef23b7deac1c11064369f9c03c7a46dd61322cb3637fe259e41e60f7c7755da4b750babb9d1180638224720c912884aff4cda16a2700771f3927fdf216c7d7aaea61a36269e8e13b08199be923fd24b302631557e7cdc45979cdf721309fd7a65ab2c9940b566cd85843ecd513350bacf76d4a8211af51547b104faca775657de0f903a39b06273203de64317a99065953668828e5d7f3a1a8fd6392af14b4dbe980b1de48730bb3e71e6fd4a8049e6540336e14e8adf57fa953f1e8efdc8bd8d2d2de5b16b5ee7821c18755d7061319d68a71a7fd6bf340deef87324056647444389c15835459218bd8cdf07e1c049686349f44592c05bdad5e42c9eadd40debde28ad564c100206a3c5761fbf2d63839bb1bf9d42fa835e533aac12747cfcbf1404b9dd1d26d294539754034a3feb9681ae2dcfb367e5057f62c40c189a5f9abf1f5f72f31a395b85049b8e12b76dd821888bdd96d4cffce8a0bf254cb5b967179a844b01da22fdc39776b15d7afc979004eab7505cb9403ac773e05b6d4d2f92e2c077eb56c3560505dcd70115a174c686a7aeaa2c0f82eb8927a2371697cc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【7】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%907%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="fe72a216f71cfd2a88d6e296440af84dc0b7a275ab32406dd511e8572faad239">e60a61a1055049834be66d4bcabc5233059b05dc20772427c8195006316b187eade9e5345719356a1aa09b08ffc4c637c9008cfc6f5c6b3675c91107b6563e5951bcd4412232bc83801c86b13ef2867fb5d107680483f3317f4db35501d4513c813ba26e0d361dc942089ee12715d5cf6691f3ffb009b1935c73bf39ac808bf2b475171e2b70adc164443deb71b79475dd4ea4602806e73e56f6d465c50303900b75cdcaa40a7b0010dbc1dac6c767a01df8e2c5b13575fca8cd88ccfd86e76770092ef3807c95f74e02096eb14e810e7bc278dcfefd8e55ad68eae3ce735bedae3da7dcd441cf237285f2e3e6f3aa22d326a0f6b12b91cf4527a060a6de24b50a22e2df299d615c84f59d633bdf57a809e1d26b6dda7b966cbeecf0b484a5f9dfb05bb4264f3bfa87e0be2597d85fcc48b1fc01c01fb8610a6dd907fdcd15766cbe3384dafe6dc9f17a6e776da7332b0c1004f7ba4baa5e20c6753771f570a60a1ee5fcdec8e956c84c9114b058af189578119b155c81e9041593c63e55845550687cd135c9f07a09e507c6f510cfdffe27281eb8e1161219ec2a891c0882137732da93da3a23d903fbb2eaf99d03a9bf283724285d8f14d9eb06c78feba0446d92027f65d074e4f8d888add01d8ec29df62525829e5d6a813ec0db04974dcafbdbd47c2e46e428564afd518d8d9574ae7450c8f17290473ce0ebaeef09f21e32c5fe9dfd194bc595c0d342fcb443e3eee290d536b6d70eb387387f73cd981c174f51ee3a998c5e309d514864b6eca5eaf9c36876aacd3e9ef2fd57710afb6bc3dc02ee370fe3e39eee187adae729a9058142a9d9b3d1c7d8bfa727ba35bc01f66782fcd43b63300ad3a4a3ae998edd92e617623458e4949e63aab02dae892cbbd2e63a808b67724902ded88b022daa733b9441d3db6233c9f97b1ca517611f9af93a1318eeb261b9bfe3a877d754ea80f0a1e4759319b43ae5749199eb97f0a2815b4256f03f73e2f09ad2ed25a2c0110fc3cc7250255f5f9c4f50a9d6db6c083a4b33ed00cbada0cda6def1bdf50edcb9a8d93158b88f95b232b80fb7b1eeda517454fb5b42688e075bf82982ddd4a17dac9299c000d8bccdfc7380dadd937422c499bf259098692344ef49b4e7949d1b449501c82dec7f17e31b26bf03379c2a416a45a6ee499ed6fb08c1826fdf089b23afbf97b8e6fa5f497cb342089c7956314f54b79b9b640d021ea62d6b578421afbb28a376a496e1df27110a29fea4ba81d0defe3e530fec4a3ca6fe37e9444e6f82cfb74a4b21726e9ea44a3ac08cca7072d0eeea6a9c26791c6cc74ea842e662b2f13f26b6c9f50587e6c65b0ad062ccb3abd06fc77a96506210747a8ec2f6af7b31e3814c85684d69ddc3ee5faf2378f0e42e70f0356035ecd71ac046e741767d4d2f93023e81094128a67aa77a8ef0ca7079a21760faa65b41aefc301945161e3c3158a54e084c25aa42dcc54b85d4e43a451d6cceb48ec2add973bcf4ddd2771e48f7cdf15792e84b30bad55d319e982e0f2c51e0ddf7255884e23dfd22e1ca6a513921a4ebcb562914fd079dfcffa46b72b0d69fbf972e1adf0d1561656ecc183056c8fb5accdada816b34baf2fd6df600bfad7bd13d512ac0485535c96855d73ad9102037195d3ca1dcecb5a50c4e61e9ec98f9e076ce5c4ffbe1e248ddfb59e2573b5575b5cb63311501671e66f8a37d23cd2e491fada7f25e28fd79d9bee9e868dcf1babdf0595bb757e7e7d127b8c9c894632e87fcdc6b5fa7da418e63ea82b3780355cfeb7b747197e788695227085a4e35a27ca6c53772febccc79c719ad83aaa3c72483897e51f95e44fa05c4e8af776dbe3fa4fcd5b2a3406a47d91c3921d72795c66862e393194d1ade67f7836c78b26dfcb4f97a129638c25fa8142701a27ee1df4bed42e07fbe455ad0c5fd521a898daa2c4b88866148aa49fd15afa23beb1b7e08b138cf34044620943ba071410d4f8d3ab8987b85453cf0bf527900bead6e80d70c9b6203c0408453a164f3b58ead008d2e648bdc443e9681017b4b93106044bd5f3cc572b355eb330fb61bbdcd3fdf583d9c0123a716223250192f292fda5a8813ddc348096ecb26c2c8d18cdb45925bdf7b4647e976daf3da1cd5b3e5b15186d2a7771a93ecedb1424c991e6d37379c2eb97ccdf9e6b9a660e3b6fa53d20410a918e352601ae7254e82e2f170c8570c7b62803263abd10a3b9aa837856abca2beed77145968f399dd35f22c1d646dd1c3702bd210d752245e171dbd4563bd6cb88c0ebc66e5c187f6cc1431ec4f848d3c6d1eec31dfacaaacfd833748c30ca7bdd8730d55e26f1213917ee3093eef93bf0c6cc590aefaddac86906966f2f71f5a0eb804872a2c0e05c51232e4bba3303b2028272767322f61840d10d48f0dad4486d79262ffcad232713ec745810ae4cd80db87f528f2f0f864743b55614325595b4f66f33a09c58209dc099b4707e46a3e0eb358d4378232d02a3d6c5e15f82a833cd47cd9655b88c8eae683c3e74ff63204ebe3d4eeac14b0a1e2438be241bd184e5743881e455d1655a8d0033ab2a538c2630e8a5f4b7c7d8a7fd4159071157e2435310860580f940cfea1fa7a18e68686728aeffff3393c656c155c95551578964197fbc68d2a691233102dd9ebac4ab5c6d07066cfb6e879fc03afbef8866d3e4429e7ad085ae90685ede200b590494eb58aced26373b192e4181faf9f07a6742883a9b3f18a6c612dde2cda60f8b2d570e818b8908ba2ebce3815d5df70959540cd32e3d412e9a3037ffa5d19868360c504650ef46258560e7168d5f522c871bc7692a93d83db2bae67840a3ef059caa07113c849e67fb09e012328671367f8d7ec6d98f19844be3a0957c7452968db9ddeb3aa6bb2fc846f71b97bb2a5b0db4c717cc1aa3bcfcca8fe0f7ac85d428259e8c2b04f4093599ef3c46969ba43811796a521f85b665b9687fb270d2cfb917c89fcbc11aaa4bbc35892f6f1a9a4c2c3419b430d18f8947c8d1fc31b2a558ec07ae5f16f13bc053601de4d337d04a4940ec7516744c4c1a2a8959dee119fa690755168d6c59b4dd112de6986b7b8d55c8afb0c29f8b0b4915a8c4482f90652db0d5fa54fdd0f253e04c8183a5bd6b3cbe6eca0485cc8afd180fa57318de81dfe552700ce13fdcc8c6646992314d6a0e5350007451066dc1ce67cad12e59e85462af479ba25578ffb1b7e57fe4bf4dd12fe397e702867ba92c2af6624a49f5cce71099231c06520b3859524f29833748ae2d92b63bca0fa24016a10c5c5136425530a3869bcd8d781ccf11dc9c45f98a49a97fa825db8a90222db3a8eb9466eba120cc9f85c6b1afbaa159f1c5409e1b0263a17f4f67ca654e3b3cd83bea72d16f753715eaf37eebfbe5680d268992740a56e0830724fcd1acac25ef00fc07b35399020378c19126b5ffecc5229e456df3ca5f34690467fd9933b9735672189692154eb4903559b32a3dd7d54360c67289be57d1a59c40bded3530cb55b7921b9542bef1209a4ce16bb5610d36f755c947c484be2b8e02795b13c52d65167c73fda5ab809a26a3dd200ce4f9bd1281c1d16703d7290f859e3325ece8e22dab91290fd849ceb7b81a538d060f2d8da30b8449aa0ef789cef3452620ae3dc29ba8092b57b41a90b5b16d02df88415226b6d9364f5fb35eccad515cb98a41aea48d09286044deb604f2395ce90d514798aba5eb58d2f3226a6898b12a0d0404a15ad20c8e7a3eae5b9258078a77b1bec8daa596dcce118eb609b2226237b815d212c6ee1c941bee0e355d2cfe254d1803b21634ef3ba38162b7f79ffcb041e63b604d766c17846c3d3cf3d8c24d32f4810aa1c9195ecaf778540fd489dc32fdf8aec65529a2dc6b2e3b837f2f3b2a0374fb73d82b01ad10f656b450fa7680ebf1c493ce9d1a3bb67bbd886432c430945f77d50a3170bbd620f2265d275450f4cb04d17fb6ee30b01c05b156c92ee04aa5de1193a4928199f2ece8b2ad59385cee3c67dbedde517a5d4519570d60c4dcb94eef9239f08bd1b4e5451ab9749534f22a9a6c9055bd2cbae7366b8b36f6b3f8c21</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【8】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%908%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="0e83ccf8197a07a5dbc59167168e05d46d20c6d4c6015dcdbc63fc39b6c787e4">e60a61a1055049834be66d4bcabc52331c188f779e4a5a7fc6404c85f611ffbd6b5ea5dfff17d4bbd68f7d31f36deb68e898e4e701fa9fef14f39fac03d66c8eaaab04e4c7f0bbe3be089d7a855796d2cc77c38d3fc0ae7b4624f9128cd09b0851a03bbf69cc053f624ef50ed637a8163ad3993b27c48a0568ae466562a7d359604b1ed7ae6f3a28c666c191d43f74a393f0af5e63a10bf74ec6cc50652ea78b2e431d7e287291ef4276bd8578bb72fd94660a04837c0eb9576b3693771d8a208799f9e67649a4adb64e0f9d3c23858a436d7965a2790c30f5a55ba65b436d57079826ae473c22ae09cbdc01a18f50529641a664852c5238810efb31269f50d2c28e149845df73b859182b6d15bed13b376d8a56708efddb34de701f03ffb2b9d9b497ab4f32c54eb770975e69c44b4e16dfc16eddcb8703c33c5c9441ddebc8db5e07ec1fcab23d845c09fe9031a39177feff81634a7dd535d5715fdcb791533f1ce3b26be6cd3cdc03a9839e40ec3107571c508ead93c442ab2f66ded6c0bbf6944cefed6a6b9353433e4deccc2659f41738f4543bc6506886d0c652d11233bf52a0e73d13de922e9b35ad8f9742295e011321c82e8d32808c71ae47d95e3e393ba6f3e024f7973b0e69afcaab20a0540b33032dae7a2dfce91a63638476d604fdd2236865c522e1a903eed2dc8963297c94eb005b8df87967f6d959dd4a25da9db193420b255f2a897cd5f31021d152f28e69862baf6b11b7d039160b3b7a972c245bd3df65005b3cb63a2fcb0715fe9fa654c26dfae6646d941fae157482c68c89661d68446ac43df19c1a8799a811566779576b2754304ee81495edf1ab6b20754c8e1d3ecf1fde80f0770b3679932686f52e5b68871f7d85de99397100d1b07defd6aba008cf3f24fdac47ad4006d2a379c081eb01f45cb8ad9129adc5d25112364ee5936031fddd2dc9ae8b001250cc79d9da3310961389e870c6c38322574469bc67d8cdb8455cbf42853060de8378ecb1f352999edc1c2c8ef115f99e229a718804d5b73d672354e835f5f4a3ba2fc869bb8335d8408ea7287ffde50a04795697d6f19ecd165d7eed186366ec5026e08dc3948590fa733029d060d00513670e0409a142174abc296d5d426e23194fedef245e6d1eefb086a03ad1b56ceda211aadb8a320d8fad5a26fbba6c5fb12aeecb8edb629d8529dac4d3207228b0a25c8d956679154210d43d319855add8cde25cf2cbe0c24c5d45999203db2bfeb468d57a71f8d7624bc18d60e092019cdfee45ee0be5c2339d9fc2c7aac8f4d0464d0d6fccdca5ebe4ffd718e308489971ba58909b8c0b83fb470cf306574636fb48837e027ad19e24610b51b80d27f47559135d05c2be04329ec11b7c8bb258b5ed621d82e651c215ccd35f7229b0f07b4af5a6403c7b362249c67cea6bd9e91d24b7b70aebac19354a725f14beef81285388cf52f80889b5096e72443875e885fc5c12de933e2377c63b5e212936a5482d1f957b64cc0f6aa65090d90a83d75e5b26689a79cd4afe0d886da0ce791c7703e62f50d3b94a97bfb51e4f1aa00b742f53c35e24ac5f65bc59bda4d62aed471ae9eb1fdccb2d62a3f55583cf3e34ad5975df90e5903dd7655dd39f21b14930466e05d28a96da3dd58a655ba3cbf6a6b9abc3a076c48e8bd435162a91e3c29e9bb9f4eb489805d970febeb2b072206e336b4ba49213c9e30ecb5c68bdd9414a439d127b1c751c2de05693a0acefca0d9b1e5c043df820e9f552280923733e61dc6cb93cb857aab6f8518e717999aea1d38d3fc1b9e6e8e7b6f3c94dba37417209059c7d8153b8ce33c68c8fbe25a4cc84722777fd26b850318f662710ee72ab7d742d934141b6dc48038fe6936a9db0b940d9c76d9f6c2bc9689e55f5a77e2d750aef4d1400da8883010d124ed2cdd2150020c11af3cbd570ed17870d72b422dbd133b84251d8ec080394bc8e95e503c9d440d3be50ebfea8a205561173e8b273f2a080f1f76d6559b43283f2e65b2cd4cced7f2d65c1ecf16b3bb1086fbfe561e7517fde98b23baa2b996b158a9bf4a48e6fd2ec26e0c8322684653092f452dcb7b2e66997e62c1d72ea815ffe74688842df94c3e2c5acf757cb5841302f34fa8e4c374f4836a26f42cb909c1d336c79ae7ed6fd47a0d9d517430e96d1d2d7ece130dfdbc84ec9f9bc3c71a14948058044e3216f156a583ed4c732f32fcf7aaee6312994e279cd9f5ea4b3f4cdc80ab12c443976ca17ce6438704121ed3e2f24ac2bbb4669dc06d62a7de166ed88cf43820488296ddb14379ecdc6130b5dba0c399e95240666665243d13fc359d8b467389fbde4ad8582b48dbdb6551f72d177275142c3213399029e1cae1bed28445838a65870118421edb93d4cbf2f872875368e51592ffbf1ffabe969f9b008c33eeaa90fdfc0f9d53fdd38116aa2dc74e2c0d4181b6953a6028b822a1b00905040661493d480cf81342c0d679cdd6aa53ccc679c456fdfd8a09caa1a4414c57508675e0b2ac1a5747ada61cfed7ba648e9535abae49f23d5d946595870ec5ffdcf82fe00107d122dc7cb3845feb640e239d42c1aafd0ff1d85a91141ed4ab96945f38aa65fbd839f33c1335f6883b181c9135c8209daebbb3920a1f182c73a22939796cc29b22890dcc4190c9a6ab5542ebc323ecceea61d7e3b76f06266319cbad9e439a59d53e91a224b7a46bdba4dbb2c160311af4b2741674769033d1c2e7ac70d41e9d4760bb6bf3ae1215f6894171990de8f16a5956932baba03a7f115384ca107ae09e2d3994aeee1ed843ec77b40313f17993009364b78e5b969d2a3ed89fbef11f6485dfa959e0dd000a1724ce17d69982fb059ad3ee970b504f742181383bf4d8b40b549e7b1f7eb5d3aae05f74d2247fc66a7f45b51f5fe902a30a5f87b5c93a203fb3601fa569f031cd481d02fb4c0ab1ca43886f952207ba9b1ccd562bbf9a26bc70496d0ce42cf6522d0df1029dd20f529fe48341d8d51cee56111cd3ac5ce0b8fab5cb956ca141f18b6443be0f885f872c4abfefb141ad5ca49d5f8c9bae9691ba898a8fd9000934a23996d9c7260ac01fb30d5306f8b789181a088179eac3d7e48d2055fb30032a467f848bf37aed24e45e6bc45f4965d5e007834aad19c899a6961ea3d2bc84e6a302a4a0b0d81f9bb38e2f8ea9579d44e71323aa7e32f340687279b064be1e6989ae657e313bd46e47538a2a75f334fe639b4dfa491274cfddd44fa24214273a2b450a0862742a67a76cd5a4384e30fa2d526d28de3c988548da8245901ab08702198ff1f56f41d7eaa0f987c53897ce94696efe05c79c69a9ec97078e12df2af87eb012fd8f3a10d354849cfb56d85c33c9a87249b77e050855187bd64b864057b8c4f3cbdf361fe7dadeab57f670154b49f8a90f5e25c2702cb4541fb1c7b73274d302535440d53c820d92b8f27f9d7819c17d5ffe529fef80da5dc1beac7ac64de835982866d0d0bf1b822b55bb07ea0f379ebf1466a7736ca2570cc3bf8665639583514e92550e30bfc7fd2826ead83ced78ecdb3b9e1c9c5093e3fdabb51028ea8c8d9a7a0d6e5b65e85d01bbeb275e33d8fd218b1b27be22a29e160597ab70d76c44f8926555a9a60a68c64f41c3c9ef059160eae8e1085ed2734a40619022d1d815a7ab1a894b846750d9f355cfd3db0154ccebf25a58b9fdcb99421a6dafda502e21531c391cad7323c5b932f0b9eb9a162b8227cf525641bd9410f73a26b5856912baf8e51a0f04de2b3116e15b216fa7fc55b6a3c7a377b0ac3cb3ee8a6141c27e52a01528652c56429e04d52efbdae380a50e4cb3c88a2698939e6c1667b40fabededed63a09a8f07e96bad9b3b64361dc41ac427e6ba0b867fa2fc3cca2c3376d1667025c55e0d67664007b785fa9db5ff9f159a91da3b4984d47373002da0de07230d321ff60d6c00ec6be8531c9a54774e3c7131fb88e28ef82c2c402fe0646af4b269328065c7faad4dd364afb6e18521357eec2bb8d0fd7561115a6751c1e00e4dd2e9ff953fa7a122c35afcf106e3fc25e0c6c7fd9d96bf15da31b5ec07d4933e351849f3100bc335374c2b14d7e3de4afbee6729b02175ef1a46336f07766c01dbf50db29c05266c1792ec13657aabd92086ed9a7dac298f6818fdec23dd0cffed11606dd0a9145e117671dcda4cd0072d8da1654ec0add7a7b15f7c1898c2073886e5b8cf36bd0bfd75c4df8a1f60fa7e323c3e69ddd789df94c4994ce5ad5aa96c8651957cae6102080d42167b331a8f8ad7c5b14667f8c6281f40707fe478eac7a53666abbb3e61987c0dd6d8a61c02cf881042ec9d3c158168187e88ffdd2642b207c66d2466fca1cb90f24f9131df3d8a183873487b165edd857cdeb798c03df78b89e8aa8fb60fa85819d9558f6a9233753f68d909ba444433ffc7c0c587d40cbc9a115d67764cca3b52e4ce76b407939794efe8e6fa4449dbe92817ff178601069f77a9a0dd647df5c5e1cd3ae6d3de78f94f5c73e9769bfe47654788d71ca812b0404344f17f7c55938ef0546a31f48ae</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>硬件结构</title>
    <url>/2021/05/08/%E7%A1%AC%E4%BB%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h3 id="冯诺依曼模型"><a href="#冯诺依曼模型" class="headerlink" title="冯诺依曼模型"></a>冯诺依曼模型</h3><p>冯诺依曼定义计算机基本结构为5个部分，分别是<strong>中央处理器（CPU）</strong>、<strong>内存</strong>、<strong>输入设备</strong>、<strong>输出设备</strong>、<strong>总线</strong>。</p>
<h4 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h4><p><strong>程序</strong>和<strong>数据</strong>都存储在内存中，存储的区域是线性的。</p>
<p>数据存储的单位是一个<strong>二进制位（bit）</strong>，即 0 或 1。最小的存储单位是<strong>字节（byte）</strong>，1 字节等于 8 位。</p>
<p>内存的地址从0开始编号，自增排列，最后一个地址为内存总字节数-1，这种结构类似程序中的数组。</p>
<h4 id="中央处理器"><a href="#中央处理器" class="headerlink" title="中央处理器"></a>中央处理器</h4><p>32 位和 64 位 CPU 最主要区别在于一次能计算多少字节数据：</p>
<ul>
<li>32 位 CPU 一次可以计算 4 个字节；</li>
<li>64 位 CPU 一次可以计算 8 个字节；</li>
</ul>
<p>这里的 32 位和 64 位，通常称为 CPU 的位宽。</p>
<p>CPU内部的组件常见的有<strong>寄存器</strong>、<strong>控制单元</strong>和<strong>逻辑运算单元</strong>。其中，控制单元负责CPU工作，逻辑运算单元负责计算，而寄存器的主要作用是存储计算时的数据，可以分为多种类，每种寄存器的功能不同。</p>
<p>需要寄存器的原因：相对于内存来说，寄存器就在CPU中，还紧挨控制单元和逻辑运算单元，寄存器相当于一个缓存器（个人理解），可以加快运算速度。</p>
<p>常见的寄存器类型：</p>
<ul>
<li><strong>通用寄存器</strong>，用来存放需要进行运算的数据，比如需要进行加和运算的两个数据；</li>
<li><strong>程序计数器</strong>，用来存储CPU要执行的下一条指令<strong>所在的内存地址</strong>；</li>
<li><strong>指令寄存器</strong>，用来存放程序计数器指向的指令，即指令本身，指令被执行完成前都存储在这里。</li>
</ul>
<h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h4><p>用于CPU和内存以及其他设备间的通信，可分为3种：</p>
<ul>
<li><strong>地址总线</strong>，用于指定CPU将要操作的内存地址；</li>
<li><strong>数据总线</strong>，用于读写内存的数据；</li>
<li><strong>控制总线</strong>，用于发送和接收信号，比如中断、设备复位等信号，CPU收到信号进行响应，也需要用到控制总线。</li>
</ul>
<h4 id="输入-输出设备"><a href="#输入-输出设备" class="headerlink" title="输入/输出设备"></a>输入/输出设备</h4><p>输入设备向计算机输入数据，经过计算后，数据输出给输出设备。</p>
]]></content>
      <categories>
        <category>Computer Organization</category>
      </categories>
  </entry>
  <entry>
    <title>痴汉先生的成长日记【9】</title>
    <url>/2021/04/05/%E7%97%B4%E6%B1%89%E5%85%88%E7%94%9F%E7%9A%84%E6%88%90%E9%95%BF%E6%97%A5%E8%AE%B0%E3%80%909%E3%80%91/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="ae7e2852e781e15892d637e918e6618282f3b05096dbf6124c95d3e3ecc18faa"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>脑洞之一</title>
    <url>/2021/04/05/%E8%84%91%E6%B4%9E%E4%B9%8B%E4%B8%80/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e178720dee4e286cf7741e7acb01fc16d20b1654eb630d8d9a2fd18bbd106b1d">e60a61a1055049834be66d4bcabc52336fb53f41b0e7bfee536fcb34520972ac5a2757f790f4189da8390d9e8031704d8f39e90acc6306d5e9e6a7b55dbf557576be865be444e3b6b5047ac81705ce5b54a8c5bcef2b70dbd5650b628122144bd0ba2b54a28af62286fe2c3c511dd5ee1daddb01fcdef896036d038716107b5b980b482b5df61dd70aefb8f9aeb30bea87d7cacdc00df15b83d53e38151350d92210161a78ce47511271d66d957dc72d2a3500e7fc463d3f9241e9a86f3dbb369ff8521f45d8a696aeab0f38235742021fbc68baa5d5d38a02d75ae05855609fecc87da0a32ec53aacc3c76f2c10266fc4ba65b9d1d369c58d146aaef8da07830ed45ff0457a2f580891dc26aa7eeb3f42e2a532f9568755522c589005866a03e468599bbbd79846bc44428d6f26556364728f4cccfa5df1ebbc134cb0343968903eeb314e58cb591d7f893eb816fd18839628cef4c1b9515d09a8a44cd987a610bcb17858576190db38368c60786bfb5a0b70ddca2466c31f9272c07f2db3781c05e109874b873d4458ca8e2964376b5412ef1f326e62da22cd6d8b09d26ce93b8f7a2afffcc8d70d7b10ebaee513f7f66f34f25ee32599b867a995b916504b4cc3a5e5de12f43253b383b0261daf614d1ce40339dacd3820f62cb953bc023533b72a5e65e7105986889cd6af2b017d6244c7ddb072187ff4f7518d8110917e7d34a502fe61ff24ddd3914d9aaab7f08636a62338265453e96ac5c824e78f938841677a0f8184209a374ae332cf6be671791f65a34507f4bf96dd16b18e2d1ca07c2deb33d2e20fd1de5a3ef766adc48ce375f95303bfaecafeeac64122dbc31a500b601689ebbebcf761169c8f6cd3807a04a79b0010c64af1796c7e7cf2293514c88381adc516e1e6e16ca4a5db595df01cb3045a9496f9d84218f208f43f3d791ec854c0df21d2e75203d91aa6aa10fb28b621661b63513582836161ee339d4e6feb02d23f5753a17b93d6082b06b5490a2ca2432be7771e791f8e922e7e43a991b9d7d794fda0facca6e9ae058a53c503852cfc1c316bfd899f31d56d778fe3bce0fd0b64e879afc150026e9881f4eeb0b49ea1349cffb2e3d200e793c128cb024e6ff866748d05bdb6250556cb68c37fe40d75b01466e1d4376e8f4a6d0c5d032aaeb16d9600a1007455e112457bf79ffca7f8e074ed3299b4a389222cbc0a296e640bdd0a96bb53e126da145b330f63d6bae2eb69ff0285ae7c722ea2ffc40e30e1f23cce64bd67eb340bab25bf40959792144e4ca866deaaf6d86768eab9607f12cd9b6d79a674a5b67f5b8de03222b3e2ebde8dcc64dba5134ad45b8cc4ed5bde96bf448af0a2364e13a75dc5c7208205f79aedd45e9cf004748293abf881370b9fd5b12a030f0b90edd59b3c5e5f0007748dded6a9d6f40e1025e3b296ccf694467dfd1443e660e10b22565f6d31db50a1ba56b4514d027116c627d41ba7c850be5c117e0b71f569f859b528e1ddbf154301680d5098c115a2d8815ed5d3fb92f59e0bd53b12c81a6577c530690f1e830d4a5c386a44c3142d34e261a7feb63399740abfe0ee107a68a842480f50486de9b7b3a833e0f5a8ab31feb00cce9c81ee3645bb9f627e2a80694ce81b4c1da4759e246bda9f27a3233a883e446018ffd89cb2b16852014add966adb48168e824dae77da8c1620be3b95c77c1f54a9c851355f3cb532eee04342e38e72f21c1f4bb69b28beb1fa54806db2f9332ab7768b6252b2e0b5fbff7b0985749a2897919c4c707c27484b86664aa081c76cb55bdc04e738881c1f4137acb28d4c548e96747eb9706a22fe8121ffde8babd42fe64cc15878177e2d867fe3ad6e99b6f0b1447080e974f8d224621c1725ece65fa2b190fe1d9609437803daeb81b35506d3a7806da85e30ae49b7e0ee215517f5ace5e10fd174393054ef75045d145cc30930ee1536f9df0d4d46dec3b24ad65bc5967827944f551a301731c2f03cbb283d745c6ca01c2386d98a5876b0f27398a8efe0bf5d569ae2b8a91a7d95a6e4da18b801330c9c8eb1916838bd74b7a7d65d2b034ec3021bde354a428fd59a5c3b726a0ed4a90564727b15c262209ce4c083fab3b2104fb360b155388295e69bbca2a06328f885b846144ec789f1fdf46940a91a94abe9b79fa1501b33389cb9f8590a71510a4a527e4478216d89dd8bd43847fe91c559324bf1e5b94f3f8c6500c42a88aadd1e900fc791e21da20869b4792277328ef7f7a5dde9da8ae1fa7efd214ea1a269d7132c8f74f2874f84386b17b32c01a91b36ff9fadd2e90ee76ca8d03d87d251b46cba9b8194c0364a4f04dba950521b9b0bb82fde863de02b3881b9c2790ae02590153642f688b192a527eae6d6428172b1f0a4ddd22e17d1e6e4fbf048aa101c35df37ad29ccba868a084c55b1f6411aef4b9a132f270400f4979d061143cefecd71c2e38a24885dea7705b56d36fbb04f81f4a02679519eb48195c0920841b4bfeb49a6a15afb805c3e54493b1608c403304f31bc3593ad0958f88fb643155f81071fb8c062b74c7a07c54c1649f2b25b3d504cb1fe84f8a36d7a34a9ee9160aae9d60770ddc6c4d73822d4ae437935dc42a83582a024df613f88804a6c1dfe1098fd30434c6210c858a6a1caf55d2a32aea4f2ffc39501b9ff75729c66291bf0f8bf325c098f7cb8e3b58f2d1403ab76804a40ab6e37b75a2685fba4bfbf26bbb6a9cbb5920a4e44ad00e1bf3464c3bf40d3534ec0dcaa4640bdcb1e9e72f8ec1fe0f9c79e6c7c8bce8ab6aa376da71ef5fd466115bc7b331193ce90561ea3121c909796c7980603fcfeda07498fa34902f648558d3e7b965eb08f50736909856fdd8d06e485fd03e76b9bd54c375dc69e8536dc49edbafa30041c46f39204dc26cd96891d9e6310ae374b94ffcc64d1133ed60de2204a3715a5d289b170f4a18e6d6374272dd7f282d865cf3396b6a5c44c68f7bd27bed6c1182018d12c803d245ba5e683eb463912f344cadcd98658d6c1a2cf18c0ba9e2782f3adab1182450e950856b09f6f3277456a6fef57d9cf603bc3b73e65217b0339de0084ca3229cb9202a567e86c50c160fa5b103cbbbcef6f2fc0b0e5cb64f54c3797ac8e064dc36f93558847817d2dc5fc489da847116efa7767707aab91ec1549ac62a01ada9800315da40558d343855bbd37133c448717f411e4b9158df1d90d581d3d3b9ac299934bc5a7731ad8e176f3255096a12ac16932cb7f3b29c213bbb5643a2d52c86453f53f851dc54119afcf833ef20881381ae9ec70ad9b30bb99681c794982654047078f82c3d9c9352207838736e2537bd0e54c1f43a58ef581dc0d820ec9350fee083de0f70a81ae875a55f6f32474f6f455aed00fff7908ba52f2837b8b3936b0c7edc4a92e4f8e3267de4cb3a5ad17f94a00b1066a3f96ab93ae4d1c57e45bd0c292a431f89da64c396d6fe021715c8b970e88e95ab6941f688e3ea1598e6d34a0a17e4f8975447a5534c1fa821e33c483455801fb56d7b3966ddc605b8a970684f1575f53b1e3179853b634d3fa38bbdc99caca39076dadac778ad7a7b831346b887b6a44fed262e592d90d9f69263b55eef1fbd869092befaba01c3b9196ce366feaa1fd04b39dd946e64a82f9e59622646818e4959b385e0246a5dd54fa59abb8f1619cf0bf4646fb5dfecba09eb4fbfe7a3f5f643752dde73ebbe5eee59e5982ccf16fee8d74f1145c6ada1d152d9f85aabe2766ee94d01cc56646d6594fbbdd1e16ec2aa14361c60bd9197df9ae2543c13fcea620de0195a7c92c455a3369533cbf9dcf6182675c94749b7028b2df8ff2e2e98ea242941c70d7d1fac6af8e71775d2db97bf4fa1cde17049e547717c1f4c0fca9e48b9f21b4200587d3ee2220f56c6ebf75aa8f1afb058e523c88c8950c4a46ed91814a9239bd798c5ebf0bc0875a87cabe88f2b4831add655cec469bc137487307b4e7f7a494fb60fef7e9541b28588f7d0e852b5d410eaed1308ecc973f1767ed4956b16964a7c6347038797dce39fae972d5e06b2356fd5a19e2c0fd59bcce514a490408fb23179d27b8e9d6537c4b536e6381946ff7cc606f810b1320ad46fe33a4697286553a718f8c31dcec94397fa8a28cb3215a704f3ae8332bb88781941ce9bd05d10f060e21e3b3801e4a360f3e633328a5d893a430c87af1f727530f9581ddf827b1961de5a1c0e28a182fc94ff35448efb3b38c1a612ccfcbfb56bb7a3d6c420a7e3770455ed0a3bef5f1b6fa0a8dc1f1de8187bd05d093b91fcc3f6c242090537448f674bace26045fb781c15b04385d6e0b8f31fbd6e3d99d0b0e414b4315141fe7770a09da458365e38a0b837bac966a1bf056de0ba50f978fbf98029197def1a000f717105ea05631f904cbb2dc942cdff043abf3dbde45989c9280db5bd42a6a13b7da4188d91689b59c353b188c5100179d1fa02a5de0549bc085e145b60e920d4e884d4ce74d0284c678597e19b464df26a7c725354313a643d666e3f3a871ea1bf72f6e39c0ff751b723b20f15d5a5f0c6c599dba9357ea17e4f9e2a9610c6cc19e21ceb2dd2c0a700eb6e8b822de545186fba06844010588ba80b795bb276a4b97eb54339413956469384e7f1aba6610d2b344d8b51758c9d8e4c7a61d4b9a18043cee56a6683cbe0172c22a1a4a485ed3f1f93a654beae4433e186e6707cd061f7b1f7485e9713c9b17d04044266777f16553db3b7a111d268c54f2a61e30d0e5eb71ecabe4b249d52e3ffeac844eb01185</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>网络层</title>
    <url>/2021/04/09/%E7%BD%91%E7%BB%9C%E5%B1%82/</url>
    <content><![CDATA[<h2 id="网络层"><a href="#网络层" class="headerlink" title="网络层"></a>网络层</h2><p>网络层的主要任务是实现网络互连，进而实现数据包在各网络之间的传输。</p>
<p>网络层需要解决的问题：</p>
<ul>
<li>网络层向运输层提供怎样的服务（可靠传输或不可靠传输）；</li>
<li>网络层寻址问题；</li>
<li>路由选择问题。</li>
</ul>
<p>TCP/IP体系结构的因特网的网络层提供的是简单灵活、无连接的、尽最大努力交付的数据报服务。</p>
<h3 id="IP地址"><a href="#IP地址" class="headerlink" title="IP地址"></a>IP地址</h3><p>IP（Internet Protocol）地址是因特网上的主机和路由器所使用的地址，用于标识两部分信息：</p>
<ol>
<li>网络编号：标识因特网上数以万计的网络；</li>
<li>主机标号：标识同一网络上不同主机（或路由器各接口）。</li>
</ol>
<p>很显然，之前介绍的MAC地址不具备区分不同网络的功能。如果只是一个单独的网络，不介入因特网，可以只使用MAC地址（这不是一般用户的应用方式）；如果主机所在网络需要接入因特网，则IP地址和MAC地址都需要使用。</p>
<p>数据包转发过程中<strong>源IP地址和目的IP地址保持不变</strong>。这与MAC地址是不同的。</p>
<h4 id="IPv4地址"><a href="#IPv4地址" class="headerlink" title="IPv4地址"></a>IPv4地址</h4><p>IPv4地址就是给因特网上的每一台主机（或路由器）的每一个接口分配一个在全世界范围内唯一的<strong>32比特的标识符</strong>。</p>
<p>熟记8位二进制数每个位的权值：</p>
<ul>
<li><code>2^7 = 128</code>；</li>
<li><code>2^6 = 64</code>；</li>
<li><code>2^5 = 32</code>；</li>
<li>……</li>
</ul>
<h5 id="分类编址"><a href="#分类编址" class="headerlink" title="分类编址"></a>分类编址</h5><ul>
<li>A类地址：8位网络号（最高1位固定为0）+24位主机号；最小网络号0，保留不指派；第一个可指派的<strong>网络地址</strong>为<strong>1.0.0.0</strong>；最大网络号127，作为本地环回测试，不指派，最小本地环回测试地址为<strong>127.0.0.1</strong>；最大本地环回测试地址<strong>127.255.255.254</strong>；最后一个可指派的<strong>网络地址</strong>为<strong>126.0.0.0</strong>。</li>
<li>B类地址：16位网络号（最高2位固定为10）+16位主机号；最小网络号128.0也是第一个可指派的网络号，网络地址为<strong>128.0.0.0</strong>；最大网络号191.255也是最后一个可指派的网络号，网络地址为<strong>191.255.0.0</strong>。</li>
<li>C类地址：24位网络号（最高3位固定为110）+8位主机号；最小网络号192.0.0也是第一个可指派的网络号，网络地址为<strong>192.0.0.0</strong>；最大网络号223.255.255也是最后一个可指派的网络号，网络地址为<strong>223.255.255.0</strong>。</li>
<li>D类地址：多播地址（最高4位固定为1110）；</li>
<li>E类地址：保留地址（最高4位固定为1111）。</li>
</ul>
<p>由上述可知，根据地址左起第1个十进制数可以判断出网络类别（A类：小于127；B类：128 - 191；C类：192 - 223）。</p>
<p>以下三种情况的地址不能指派给主机或路由器接口：</p>
<ol>
<li>A类网络号0和127；</li>
<li>主机号为“全0”，这是网络地址；</li>
<li>主机号为“全1”，这是广播地址。</li>
</ol>
<h5 id="划分子网"><a href="#划分子网" class="headerlink" title="划分子网"></a>划分子网</h5><p>如果需要将一个已经分配好的网络划分成若干个不同的网络，为新增网络申请新的网络号① 往往会需要等待时间和花费更多费用；② 会增加路由器中路由表记录的数量；③ 浪费原有网络号中大量剩余的IP地址。因此可以从主机号中借用一部分比特作为子网号来划分子网。</p>
<p>32比特的子网掩码可以表明分类IP地址的主机号部分被借用了几个比特作为子网号。子网掩码使用连续的比特1表示网络号和子网号，使用连续的比特0表示主机号，因此将IPv4地址与其相应的子网掩码进行<strong>逻辑与运算</strong>就可以得到IPv4所在子网的网络地址。</p>
<p>默认的子网掩码是指在未划分子网的情况下使用的子网掩码。</p>
<ul>
<li>A类：255.0.0.0；</li>
<li>B类：255.255.0.0；</li>
<li>C类：255.255.255.0。</li>
</ul>
<h5 id="无分类编址"><a href="#无分类编址" class="headerlink" title="无分类编址"></a>无分类编址</h5><p>划分子网在一定程度上缓解了因特网发展中遇到的困难，但是数量巨大的C类网址因为其地址空间太小没有得到充分使用。为此提出了采用无分类编址的方法解决IP地址紧张的问题。</p>
<p>1993年IETF发布了无分类域间路由选择CIDR（Classless Inter-Domain Routing）的RFC文档。</p>
<ul>
<li>CIDR消除了传统A类、B类和C类地址，以及划分子网的概念；</li>
<li>CIDR更加有效地分配IPv4的地址空间，并且可以在IPv6使用之前允许因特网的规模继续增长。</li>
</ul>
<p>CIDR使用斜线记法，在IPv4地址后加上斜线，后面写上网络前缀所占的比特数量。实际上是将网络前缀都相同的连续的IP地址组成一个<strong>CIDR地址块</strong>。</p>
<p>为了减小路由表中记录的地址规模，需要进行<strong>路由聚合</strong>（构造超网），路由聚合的方法就是找到IPv4地址的共同前缀，将前缀相同的地址聚合成一个地址记录在路由表中。</p>
<p>网络前缀越长，地址块越小，路由越具体。若路由表转发分组时发现有多条路由可选，则选择网络前缀最长的那条，这称为<strong>最长前缀匹配</strong>。</p>
<h3 id="ARP协议"><a href="#ARP协议" class="headerlink" title="ARP协议"></a>ARP协议</h3><p>ARP（Address Resolution Protocol）协议是一个通过IP地址解析得到MAC地址的网络协议。</p>
<p>源主机在自己的ARP高速缓存表中查找目的主机的IP地址所对应的MAC地址，若找到，则可以封装MAC帧进行发送；若找不到，发送<strong>ARP请求（封装在广播MAC帧中）</strong>。</p>
<p>目的主机收到ARP请求后，将源主机的IP地址和MAC地址记录到自己的ARP高速缓存表中，然后给源主机发送<strong>ARP响应（封装在单播MAC帧中）</strong>，ARP响应中包含目的主机的IP地址和MAC地址。</p>
<p>源主机收到ARP响应后，将目的主机的IP地址和MAC地址记录到自己的ARP高速缓存表中，然后封装之前想要发送的MAC帧并发送给目的主机。</p>
<p>ARP高速缓存表中存储的地址分为静态和动态两种类型。静态的是手工设置的，不同操作系统下生命周期不同，例如系统重启后不存在或系统重启后仍有效；动态的是自动获取的，生命周期默认为两分钟。</p>
<p>ARP的作用范围：<strong>逐段链路</strong>或<strong>逐个网络</strong>。不可以跳过中间的路由器。</p>
<p>除了ARP请求和响应外，ARP还有其他类型的报文，例如用于检查IP地址冲突的无故ARP（Gratuitous ARP）。</p>
<p>ARP没有安全验证机制，因此<strong>存在ARP欺骗（攻击）问题</strong>。</p>
<h3 id="网际控制报文协议ICMP"><a href="#网际控制报文协议ICMP" class="headerlink" title="网际控制报文协议ICMP"></a>网际控制报文协议ICMP</h3><p>为了更有效地转发IP数据报和提高交付成功的机会，在网络层使用了网络控制报文协议ICMP（Internet Control Message Protocol）。</p>
<p>主机或路由器使用ICMP来发送<strong>差错报告报文</strong>和<strong>询问报文</strong>。<strong>ICMP报文被封装在IP数据报中发送</strong>。</p>
<h3 id="网络地址转换NAT"><a href="#网络地址转换NAT" class="headerlink" title="网络地址转换NAT"></a>网络地址转换NAT</h3><p>由于IP地址的紧缺，虚拟专用网中各主机所分配的地址应该是本机构（局域网）可自由分配的专用地址，而不是需要申请的、在因特网上使用的公有地址。</p>
<p>网络地址转换（Network Address Translation）能使大量使用内部专用地址的专用网络用户共享少量外部全球地址来访问因特网上的主机和资源。</p>
<p>由于绝大多数网络应用都是使用运输层协议TCP或UDP来传送数据，因此可以利用运输层的端口号和网络层的IP地址一起进行转换，这种将端口号和IP地址一起进行转换的技术叫作<strong>网络地址与端口号转换NAPT（Network Address and Port Translation）</strong>。</p>
<p>由于NAT对外网屏蔽了内网主机网络地址，能为内网的主机提供一定的安全保护。</p>
<blockquote>
<p>学习资料：</p>
<p><a href="http://topurl.cn/5jl">计算机网络微课堂</a>    UP主：湖科大教书匠</p>
</blockquote>
]]></content>
      <categories>
        <category>Computer Network</category>
      </categories>
  </entry>
  <entry>
    <title>脑洞之三</title>
    <url>/2021/04/05/%E8%84%91%E6%B4%9E%E4%B9%8B%E4%B8%89/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="d3cffb5102e0d8f7d9bd28207352cbe7d86d37d9042c070cef850487be1b4bde">e60a61a1055049834be66d4bcabc523393f51062e894fd34f34b8f1f958a672d604213a6cf91c36125609b3aa7123681e28c4a96dbbe655840ba3d685fd95ab4bccc9501344ff19fbb9cdf2e50b5b2afb2a89710b52e56ea172bfebb9320064bb05b3215ad877852f8b4fb705198a667c97616d55d4ebac272b7cc3cdde275ea30e93988aa5be2ac2c9d3a3f03314e6de97dee3b14ef428cf990c9ccec9ab26a1f9b02a4b3f035d89a711d526ccc9eae2039ad773f5e5d7580766909ffa3173aa8d345748b48b1fdcb89bf59eaeac2ac69e3437b8ea237c6d1ea23ac1ad4c1709390a03e46290e92db4a4556475ff075e1e3b4a0aa96123f122abdab1c6506aeacca6d6cc4abe5c80c31107641e362688358c6556bc8d151e84e938b99b8901f10044103d45a00164a3d49e0329646d688f573321f8b61e21acf59d47c77fea19e7539738fdc74e657c5dbb778c242c7841c941b9a0f707f5e363b57a16efed55543e41545a53a786fac0b8aeb90ebf14b8ebcc26f5e4abb1ca9e86aa191760c2cd3a3d004dac291b265e9bc4c07ee04b972e5b7d053f4c3be105332fb2c4cadc7cca9d7d6134eaa144bcd0d4011aa159a152666c350483c752699f3a4cedba359e4aa8eaf6ebf209bd6da02036574870c3861b731523ec65064f81113ea8c5f7d0a56066b781792760008e39b61fac1a896da8ac7f99424f7341604f2ebb7330ccbff20c98cabcb519a60edec741ae818d6ad6c8d8a12f1aaa5989bc50f97324f89a1da3bebf9a2286d583a342b13627d1d881ce7b8c2b0483b35f1a2dcc6e0ce034549a1f665dfb9df17cfa56e285b809fdf232faa8267a2e0523fa2b2609fc2abbad506735af8a3747ecc26e98a6c5cfc3a244153f6872816a372b2996713aaade2954c6a71be600ede352b18a70368dce585f74a80b0e09f57d80e292bd840572461eb3499f75ba8c5f9dbb2544d1f9550fa024719966011befcee91644a7ccc1b16c97e578797331b3d2293ec7de2699e34f17bd5e12da4eca0f6bdaf2d5a946a432e0b628c550c23a99130003ae7db4f8c9c574938b6e46e27e804fac6c21a906906fa107bfc17a07a0177bd005299c7d04b473a2f3c383d234c4308aa9d3b3dfee2b967d8d5284f275f62766e198daa5b8a2667133cf9de08de95c0b66d84571ebfee105e70ed5e9adf2a64bbf060dd17989ff6cb208281fc03063cfe576a7125cda274eb0dcdb9ce773cbff30f1443536f02a36185fd0d8f0f8fd5360fbac52f44ba3291abb074984b664b7a8eecae1b6ad68bdb29c6fb1eb742e6b3408db525db650d088fead588e00d706c08e0b0c1e9f931c51c0928a16af4feabab80b729618a8b05436913b20845bb76cdbe1a1f1801ec9e9f56ae3e78882a98a64f426f8a6822d756831d44bd2c2ce8e2dec898a2f68942620ad47872291ea3aba4ada82f575781cd9b5180017e8e31aee884e455e49f41ae2e6fca051dbf5c97a4d00f5fdc03049e28787b45ed9d9890db0e63c0cdaaf790fcd7b00479fd1df616a38a6aa91f088a5d167667754ba5b60a52038727c4dba32445bb6cb44f1e2c9555bba0db376b3265ae826d21231bc6d166b82c44d63bc7a83df44f9945efcef62930be4a99a1929ab63044b77275536733d4235683e47a59f18345edab192c2c3d6c83d817eff04d4f3d402d87adc41176559eaef986f966c19313b61582dc5de6fb85adf0a5d583ffdb9726705d5fface15a6e380d5adbeedfb5ed11a1e7272a7d60aa19e492a30d40f9b399521d1e7fd2741ae3883556a5bfcc9da56b7554a4120a8ae7e88ebf7af4feae2bf2e22cf9552db1e6396b3b563089631d8cfd3023660c96df165e46097f18aa50e6eb728cbe9484181286401a824044f193d7eaa04bdab73ce6f91a81b270380b886d54a00741fd60fa0e854476aa9d8848fc4390e966c03c8b8b761721a9048b86cfc514bb1a5cfa9ec30cf53bf6defbd9fb4bc3fb62ab05377a323cfbb0e65ff06c284c51171aa88d21992929bf11045c6b67805dba5149833f51feade16b86cc5cec7a7eabf703f87f870e39014a4a32eebac891c7b49313c9f1af0fb54254d91fd4a3eb0a13d01e556de3ba2c699cbb12d701aff6c7d1720b00e88a4977ab3763a73112da10721d0d4922a9c4a91f5cf5d096c3fdce5cea5fa87a684de661038fee8a3c1660b04e38084cb13e615aa7de662cf873a25fce27c71ec0bac14f32e818255e4c50864b0822da57fcfd9ad4943648b3140cae4609fc08e7217b07dddf718c1e452d8c5d750d9ae68fde61278efdbb5853b950a1883e1d23558aa92fe19f675f125a3ba57cabf7b58c0477250e3e489d10b9b7ce0e68f3b8dfec23a001dcfa574838260919ca6397fb527236f842fd0e5b918294c4d86aa40cc0b95933563f9c41d32042ac3174e616e8f3a5fef37cf73737fb043dffa348b2934561df17357f19f576269d92782512593289ee9a5cb575c29a97b95d561baec0219093ab9dca398ef39028f87debe6a48eba19a2f459a256b8d4d07c7a75a7342601427086b26ec5689ac800cb9e40b65a5bdee6797af75c1591fc72e715869f64f0f122500a5f2e31a00f5c4ab1d7c902f415d650f3be0a500b40d440e75e4d7eff4531cae1d6cc7e620547e06cbe264ec7f2f9f94ae36e0d5cdc667722687541475a3ca7714a8f72618b4d1a37f704ffe6c713b7f49a7a397f9b1d36b556c77019e2dbb7a086c4a8df8bb813d0020a5faeac6a71c5df0c31218e6bd45dac65fec72297f68598d70e1be8c7a4b07f51bc881f788b6de02e84a25653fc97d5695c9045dad86268dfa8673ce90a19f925b1a689f2ce2b75bd5eeecef7732de302c2da00d28d3aa0ce38a0a59f1564e63d92911650715c687c759dccb3d09adc5faa57f4aa3f7afce94762b11ddd79bd78485fe4d039bf3c6d0adaa4b078e9a06a2986dfdb94bd0d4bad572a1961b05ed82e92ab0af7b696830473a7ad0cf7610cb19759cdfad2bffd2e4aa78f77ee4963d35bf0e756dad9cb16001775d07fe313d8a12a5cef5654856b5470a0fac45e80c5d71600482e724c46de148eaece313139f97093f79f51160063c4d6d1c62846f8036e2f02206336605c90f607e7c4f03637a07d0b33f51dbe3639ac8d2688913ed9bb3ad81451d37f9d51410b50e8f849e277d0894e06621e6cc95f0defecb59f4b84958042e1c3225fac38f1a27a214f271dc5e0e8247789c2f456663f8d4a557318443d7b34a867c4cdf1db7543fcc3b68e20d0ad689dab036ebd87aec702390375fd5780887f729b9654beef146ad04c01c34fbb8de2075a357f73919f9ea41dbb1c8ed19b00bf7f094a613b8850ffbcd51144f3d3ea1ab8cbef2ecb41f3d32165acf21cd1b14b9f4c8cb286538e727b39969e03e1ce04ba1504e45846f477d9bfef62c9aeb64de11e4071aa5cdafda56</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>脑洞之二</title>
    <url>/2021/04/05/%E8%84%91%E6%B4%9E%E4%B9%8B%E4%BA%8C/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="768a7616b3a367f094cd698e2068bb4c40e5cf39d136ae65a85415a5f56cc109">e60a61a1055049834be66d4bcabc523351d4ad378a09639b44b03d359b75daa28f053fe660abf0a744646d63c5d81e001ce66c379c34379b1f4834f6f748f74c3ab6d3a1ee6188748526fac2115c8c853468400e87b2b9fde2aa30d8a275502fe3c7598886a778f25e7a10ce21567425a840545e59f0f41fecdf457d5c219af6eac4bbbfdfd9018fb3e09154408362d03b2c4dd49a1bc81853fcfd2587843fcb3a4277c97f12612b8b51f46e6c53376cf30eb3c270a7d06999fb2882c1d8de878b29b65e1b63ff14994da79584f429fabe48c175023c700b0196291f042cd1561ffb20feb1af999c9fa2b3940b0932ce95ac70ff4dd6363abb205324fd85a36ac19ccb655f050a89076659cf768116b2942db76df1fa12dc408e49aeba355ef46a595fc8443b8ca06617e6358bfce3fb5350b993749bfbe32db7063d4e40b7a3aa7d88a6f27e15e1e69b86ee5a8cbd218dffd62c6a4140f933c2bf1e282aa1ecbd4ce757b3cb008fc0ab5d71b35ed02768f6e0856e30685d39cded9892631302ef0f929c6e52914fd18e4afad91cd11d74951496ab55d009c238693d48f5ec6a639a056d32962ada0443eec47ddd5bf6469fda855fc2b5cc523aa7560ac08cc98dd8e78491ee5ae7ddfb83eca1fa1464177393bf493c147f8881c727cbd942f43f92fc0eca9eb1a8d772f3a1b0d313c05ce6bb1a4a80872e294748e27e6150dc16830833282b6a04e330eed9d272201d9aac651c17c8ad6f9388ba6ec0bcb7227567bcd1df3bb58a4057791b2d61b1ab1b5c9cdd372781eed03b570991224fa88829c74bca272829493ab81b35ed9ae1cf5f749bde202673d8e156ff8b7554005f7f1f83c3c154fae4b8d30a967010487d86202a84b9fde5554392ca0d647a9ecdcfffd52244b906bc1a24cc60c15fc214cc63ac5cff2f22a7b29aa9ef2283e162bc719c8ccb05a4ae5fde2c9cde6decb6187f37acc3c357f22f0ed5d4f7e3e62888f460f21f9ebc15814100d703ff9701eec19537dcf525c905a4b13adcd2059c42b8f69cb15a3969007be0ac8bbdcf2edafe7b76f07645be0c889ce0666f20e35d294fb3eb0f09002f6e34de172a3fe29c92dccc189bb2bbd01f6b73af6f83475f39cc7f092d29d9044491486a5721d178b173cd879a040767f5154e7e2015b10560cd8a9bea6cb4e08f242862c6562d970b79606c28be40e43ce6c0203b0b7b7d647c8c89835d3bebc093acc148c7eef53cb7e4f174f5e20dffa88885049256bfa4dc2b118764aaa24d07bf4b82b551a3e43194fd21f07c5f678c80c0fe25f830cc9bfb08b9b3572de57c38e07210da1f97f23a3a8d270bf08ab235253cd4e4bef236b6d88d41f1acfb78469f9982cb5a2055875c9b5b7b281a02c9b669e264294618e627e7fb96ea9e35717b07754c2d228a879a1fc9800806dec194413dac6afa0feae6799f2a31112bd6ac3469f7c174abef3768b0ce3a68b0ae6250083b0f1e4e8c51d8ae665e61f5e799b713484d54befbe66a951df000ba2b88e01b3e02f7fafc6fa02de6c67e2aeb07fb9e4ba6eebba9f7dfed0d9ada1b6140e0932341149a12702ab57b482807715e6b78a6e11e84fe5305cd7b51d8e4ec18d5d19929ad97f09512dd0b4b9f088eb11050ec4adc0de2bea0792df32ab5f4f4518a94ebb0e210db7452e626a832c1ecc45d24b7ecdf9483e99de8e1a6bd960e2df9a46c85a040604072630bc8c3cd2fe67d22edc92793ca5a901adfe24840db1275e124caa9737857243872237d8d5437791f3b60c5ae9a560dce63940b63951e3b2280cdaaef5ec75ba525bea3d20e9cb63128c24ac018e29c2aaab7bde018fb29388430f7f546ec2385c7c349bac35f70341919e2338a6caa13d24a94c335a6ee678b754bfb696dab06945f51609edc688e51ec275d1bc60054d19160e1e5f8621273e30562391bb7e518e632ff7d5a3568983cd32d6d28dc45a51b98367aa7c80a9fee909610f34d42cbc8e731a05c8a5a3ae594cff515791df9edd3e9ca7aea7bf6b9d9f35ca7dcc340cbf847212ae1e0041e86761e01f6285a6125483e45b533ef5f4ed5b5b9a8c10211202f7f5f035219afa5603901d3e68bffcc4fef8ead0936c94196cb28eacbc3b60838f856a5c1c20a2783a760338654ed7b0de5816df9e3f90a4366dc0675e8b19d25c5f15c351dba0d987b7cf610b063f035833247c5fae1c28eb2f278fe5f6ed2e1b041529a12415c7badb8d87dd40973f7f0462897bf60f2df39fe8b4ab2dbbea8d172167b8a0b6fd38c2e87fd6f0620f7cf39a65a686bf2cf9dae5d44981e816cc1ccb17a71252091ebd74a6310fa7f1e23c817101e070c58a99220baeee2632677e74049da41008dd1d3db09cd4b268af9d99490390e6db95987f8bb40851a86f826454891241c6162f91f323ad9652ba43167d25345eea5dee1c9b14ec023cd1b158a47de0ca3a9de92d2644c8ecb065161bd05c8235456339911a6526e2b53fc58ef5767abe8cf6e724daf43a0c96f7cb0b721623405ec754a4b8d88824fd793ce979a0557c317fcfc732d1467131c17b83e6b981c1ab7a1c34a14cddb80a7c000821b3ad657397a7683b6f0bb22b8c377aa9701d064ffd15a538358f3012367b3efad9406e3c8d18927a8ecfb8bc5cbe0b7a33a1b6c1b2309e711f874bc13d1eacfc8696405ff54987b5cfd15147b8da36513526fd67f79838247fa5e91d4d2a6eea2a8f467b32b3074aaaff5a219ab62e0d2a23a7b1a591d1cf1740a3db2279bf7d08d838b5b5a03402aeda8ac5ac3a0b9f3e17c7181bb66fac56cf8e877a7672844db345a6cf2e14aedc48936872f498faaed203ddba7d555544a45f9453ec50e096580b2d3038405baedcb8f892ca335c8de64a108aaf8d38f2f693052ae8cbe74ae4b41f2a950904ae9f365dc6450c0</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>脑洞之四</title>
    <url>/2021/04/05/%E8%84%91%E6%B4%9E%E4%B9%8B%E5%9B%9B/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="159baeb02fa46691b980a23f18e7abe0f04b8361d2b8278a0e83dba896912080"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>脑洞之五</title>
    <url>/2021/04/05/%E8%84%91%E6%B4%9E%E4%B9%8B%E4%BA%94/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="262f9d64c674d762746cc3e45bda46bbf31586a8fa71bc1f0b84646645f1398a"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
  <entry>
    <title>运输层</title>
    <url>/2021/04/10/%E8%BF%90%E8%BE%93%E5%B1%82/</url>
    <content><![CDATA[<h2 id="运输层"><a href="#运输层" class="headerlink" title="运输层"></a>运输层</h2><p>计算机网络体系结构中的物理层、数据链路层和网络层共同解决了将主机通过异构网络互联起来所面临的问题，实现了主机到主机的通信。</p>
<p>然而实际上在计算机网络中进行通信的真正实体是<strong>位于通信两端主机中的进程</strong>。如何为运行在不同主机上的应用进程提供直接的通信服务是运输层的任务，运输层协议又称为<strong>端到端协议</strong>。</p>
<h3 id="端口号"><a href="#端口号" class="headerlink" title="端口号"></a>端口号</h3><p>为了使运行在不同操作系统的应用进程之间能进行网络通信，必须使用统一的方法对TCP/IP体系的应用进程进行标识。TCP/IP体系的运输层使用<strong>端口号</strong>来区分应用层的不同进程。</p>
<p>端口号使用16比特表示，取值范围0 - 65535。</p>
<p>注意：端口号只具有本地意义，即端口号只是为了标识本计算机应用层中的各进程，在因特网中，不同计算机中相同的端口号是没有联系的。</p>
<h3 id="UDP和TCP的对比"><a href="#UDP和TCP的对比" class="headerlink" title="UDP和TCP的对比"></a>UDP和TCP的对比</h3><ul>
<li>用户数据报协议UDP（User Datagram Protocol）是无连接的，传输控制协议TCP（Transmission Control Protocol）是面向连接的；</li>
<li>UDP支持一对一，一对多，多对一，多对多交互通信。每一条TCP连接只能有两个端点EP，只能是一对一通信；</li>
<li>UDP对应用层交付的报文直接打包。TCP面向字节流；</li>
<li>UDP不可靠，不使用流量控制和拥塞控制。TCP是可靠传输，使用流量控制和拥塞控制；</li>
<li>UDP首部开销小，仅8字节。TCP首部最小20字节，最大60字节。</li>
</ul>
<h3 id="TCP的流量控制"><a href="#TCP的流量控制" class="headerlink" title="TCP的流量控制"></a>TCP的流量控制</h3><p>所谓流量控制（Flow Control）就是让发送方的发送速率不要太快，以便接收方来得及接收。</p>
<p>利用<strong>滑动窗口</strong>机制可以很方便地在TCP连接上实现对发送方的流量控制。</p>
<ul>
<li>TCP接收方利用自己的接收窗口大小来限制发送方的窗口大小；</li>
<li>TCP发送方收到接收方的<strong>零窗口通知</strong>后，启动持续计时器。持续计时器超时后，向接收方发送<strong>零窗口探测报文</strong>。</li>
</ul>
<h3 id="TCP的拥塞控制"><a href="#TCP的拥塞控制" class="headerlink" title="TCP的拥塞控制"></a>TCP的拥塞控制</h3><p>拥塞（Congestion）：在某段时间内，若对网络中某一资源的需求超过了该资源所能提供的可用部分，网络性能就会变坏。</p>
<p>发送方维护一个叫做<code>拥塞窗口cwnd</code>的状态变量，其值取决于网络的拥塞程度，并且动态变化。若网路没有出现拥塞，拥塞窗口就再增大一些；只要网络出现拥塞，拥塞窗口就减少一些。</p>
<p>判断出现网络拥塞的依据：没有按时收到应当到达的确认报文（即发生超时重传）。</p>
<p>发送方将拥塞窗口作为<code>发送窗口swnd</code>。</p>
<p>维护一个慢开始门限<code>ssthresh</code>状态变量：</p>
<ul>
<li>当<code>cwnd &lt; ssthresh</code>时，使用慢开始（slow-start）算法（例如拥塞窗口的值指数性增长）；</li>
<li>当<code>cwnd &gt; ssthresh</code>时，停止使用慢开始算法而改用拥塞避免（congestion avoidance）算法（例如拥塞窗口的值线性增长）；</li>
<li>当<code>cwnd = ssthresh</code>时，既可使用慢开始算法也可使用拥塞避免算法（个人感觉使用拥塞避免好一点）。</li>
<li>当重传计时器超时，说明网络很可能出现了拥塞，将<code>ssthresh</code>值更新为发生拥塞时<code>cwnd</code>的一半，将<code>cwnd</code>置为初始值，重新开始执行慢开始算法；</li>
</ul>
<p>有时，个别报文段会在网络中丢失，此时并未发生网络拥塞，但这导致发送方超时重传，从而误认为网络发生了拥塞，并错误地开始重新执行慢开始算法，因而降低了传输效率。为了改进这个问题，可使用快重传（fast retransmit）算法。</p>
<p>快重传可以让发送方尽早知道发生了个别报文的丢失。它要求：</p>
<ul>
<li>接收方不要等待自己发送数据时才进行捎带确认，而是立即发送确认；</li>
<li>即使收到失序的报文段，也要对已经收到的报文段进行重复确认；</li>
<li>发送方一旦收到<strong>3个连续的重复确认</strong>，就将相应应该重传的报文段立即重传，而不是等超时再重传。这时发送方不启动慢开始算法，而是执行快恢复（fast recovery）算法，即发送方将慢开始门限<code>ssthresh</code>和拥塞窗口<code>cwnd</code>调整为当前窗口的一半，并开始执行拥塞避免算法。</li>
</ul>
<h3 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h3><ul>
<li>TCP基于以字节为单位的滑动窗口来实现可靠传输；</li>
<li>在同一时刻，发送方窗口和接收方窗口并不总是一样大。网络传送窗口值需要经历一定时间的滞后；且发送方窗口值还可能取决于网络的拥塞情况；</li>
<li>对于不按序到达的数据，TCP并无明确规定。一般来说是先临时缓存在接收窗口中，等字节流中所缺少的字节收到后，再按序交付上层的应用进程；</li>
<li>TCP要求接收方必须有<strong>累积确认</strong>和<strong>捎带确认</strong>机制，这样可以减小传输开销。</li>
<li>TCP的通信是全双工通信，即通信中的双方都在发送和接收报文段。</li>
</ul>
<h3 id="TCP的运输连接管理"><a href="#TCP的运输连接管理" class="headerlink" title="TCP的运输连接管理"></a>TCP的运输连接管理</h3><h4 id="TCP的连接建立"><a href="#TCP的连接建立" class="headerlink" title="TCP的连接建立"></a>TCP的连接建立</h4><p>TCP的连接建立要解决以下三个问题：</p>
<ol>
<li>使TCP双方能够感知对方的存在；</li>
<li>使TCP双方能协商一些数据（如最大窗口值、是否使用窗口扩大选项、时间戳选项以及服务质量等）；</li>
<li>使TCP双方能够对运输实体资源（缓存大小、连接表中的项目）进行分配；</li>
</ol>
<p>TCP使用<strong>三报文握手</strong>建立连接：</p>
<ul>
<li>TCP客户端和TCP服务端最初都是CLOSED关闭状态；</li>
<li>TCP服务端首先创建传输控制块用来存储TCP连接中的一些重要信息，被动打开连接，进入<strong>LISTEN监听状态</strong>，等待来自TCP客户端的连接请求；</li>
<li>TCP客户端也首先创建传输控制块，在打算建立连接时主动打开连接，发送TCP连接请求报文段，并进入<strong>SYN-SENT同步已发送状态</strong>；TCP请求报文段首部中的<strong>同步位SYN</strong>被设为<code>1</code>，表明这是一个TCP连接请求报文段；<strong>序号字段seq</strong>被设为初始值<code>x</code>，作为TCP客户进程所选择的初始序号。</li>
<li>TCP服务端收到TCP连接请求后，若同意连接，则发回TCP连接请求确认报文段，并进入<strong>SYN-RCVD同步已接收状态</strong>；该报文首部中的<strong>同步位SYN</strong>和<strong>确认位ACK</strong>都被设为<code>1</code>，表明这是一个TCP连接请求确认报文段；<strong>序号字段seq</strong>被设为初始值<code>y</code>，作为TCP服务进程所选择的初始序号；<strong>确认号字段ack</strong>被设为<code>x+1</code>，这是对TCP客户进程所选择的初始序号的确认。</li>
<li>TCP客户端收到TCP连接请求确认报文后，还要发送一个普通的TCP确认报文段，并进入<strong>ESTABLISHED连接已建立状态</strong>；该报文首部的<strong>确认位ACK</strong>被设为<code>1</code>，表明这是一个普通的TCP确认报文段；<strong>序号字段seq</strong>被设为<code>x+1</code>；<strong>确认号字段ack</strong>被设为<code>y+1</code>，这是对TCP服务器进程所选择的初始序号的确认。</li>
<li>TCP服务端进程收到该确认报文段后，也进入<strong>ESTABLISHED连接已建立状态</strong>。</li>
<li>此时TCP双方可以基于已建立好的TCP连接进行可靠的数据传输了。</li>
</ul>
<p>注意：</p>
<ol>
<li>TCP的标准规定，<code>SYN=1</code>的报文段不能携带数据，且要消耗掉一个序号。</li>
<li>TCP的标准规定，普通的<strong>TCP确认报文段</strong>若不携带数据，则不消耗序号。</li>
</ol>
<h4 id="TCP的连接释放"><a href="#TCP的连接释放" class="headerlink" title="TCP的连接释放"></a>TCP的连接释放</h4><p>TCP通过<strong>四报文挥手</strong>来释放连接：</p>
<ul>
<li>TCP客户进程主动关闭TCP连接，会发送TCP连接释放报文段，并进入<strong>FIN-WAIT-1终止等待1状态</strong>；该报文首部中的<strong>终止位FIN</strong>和<strong>确认位ACK</strong>都被设为<code>1</code>，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认；<strong>序号字段seq</strong>被设为<code>u</code>，是TCP客户进程之前已经传送过的数据的最后一个字节的序号加1；<strong>确认号字段ack</strong>被设为<code>v</code>，是TCP客户进程之前已经收到的数据的最后一个字节的序号加1；</li>
<li>TCP服务进程收到TCP连接释放报文后，会返回一个普通TCP确认报文段并进入<strong>CLOSE-WAIT关闭等待状态</strong>；该报文段首部的<strong>确认位ACK</strong>被设为<code>1</code>，表明这是一个普通的TCP确认报文；<strong>序号seq</strong>被设为<code>v</code>，是TCP服务器进程之前已经发送的数据的最后一个字节的序号加1；<strong>确认号ack</strong>被设为<code>u+1</code>，是对TCP连接释放报文的确认；</li>
<li>TCP服务器进程这时应通知高层应用进程：TCP客户进程要断开与自己的TCP连接。这时的TCP连接处于半关闭状态，TCP客户进程已经没有数据要发送了。但TCP服务端进程若还有数据要发送，TCP客户端仍要接收。</li>
<li>TCP客户进程收到TCP确认报文后进入<strong>FIN-WAIT-2终止等待2状态</strong>，等待TCP服务端进程发送TCP连接释放报文段；</li>
<li>若使用TCP服务器进程的应用进程已经没有数据要发送了，就通知TCP服务进程发送TCP连接释放报文，被动关闭连接，并进入<strong>LAST-ACK最后确认状态</strong>；该报文段首部的<strong>终止位FIN</strong>和<strong>确认位ACK</strong>都被设为<code>1</code>，表明这是一个TCP连接释放报文段，同时也对之前收到的报文段进行确认；<strong>序号seq</strong>被设为<code>w</code>，是TCP服务器进程在半关闭状态下已经发送的数据的最后一个字节的序号加1；<strong>确认号ack</strong>被设为<code>u+1</code>，是对TCP连接释放报文的重复确认；</li>
<li>TCP客户进程收到TCP连接释放报文段后，返回一个普通的TCP确认报文段，并进入<strong>TIME-WAIT时间等待状态</strong>；该报文段首部的<strong>确认位ACK</strong>被设为<code>1</code>，表明这是一个普通的TCP确认报文；<strong>序号seq</strong>被设为<code>u+1</code>，因为TCP客户进程之前发送的TCP连接释放报文，需要消耗一个序号；<strong>确认号ack</strong>被设为<code>w+1</code>，是对TCP连接释放报文的确认；</li>
<li>TCP服务端进程收到TCP确认报文段后进入<strong>CLOSED关闭状态</strong>，而TCP客户进程还要经过2MSL后才能进入关闭状态。MSL（Maximum Segment Lifetime）最长报文段寿命，RFC793建议为2分钟。</li>
</ul>
<p>TCP服务器进程每收到一次TCP客户进程的数据，就重新设置并启动<strong>保活计时器</strong>（2小时定时）。若保活计时器定时周期内未收到TCP客户进程发来的数据，则到时后，TCP服务器进程就向TCP客户进程发送一个<strong>探测报文段</strong>，以后则每隔75秒发送一次。若一连发送10个探测报文后仍无TCP客户端的响应，则认为TCP客户所在主机发生了故障，接着关闭这个连接。</p>
<blockquote>
<p>学习资料：</p>
<p><a href="http://topurl.cn/5jl">计算机网络微课堂</a>    UP主：湖科大教书匠</p>
</blockquote>
]]></content>
      <categories>
        <category>Computer Network</category>
      </categories>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/2021/06/30/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h3 id="Design-Patterns"><a href="#Design-Patterns" class="headerlink" title="Design Patterns"></a>Design Patterns</h3><p>设计模式是解决软件开发中重复出现问题的优雅方式。</p>
<p>设计模式教你如何设计类的结构，并规定类之间如何交互。</p>
<p>GoF（Gang of Four）模式中的 23 种设计模式分为 3 大类：</p>
<ol>
<li>创造性（Creational）：关于如何创建对象；</li>
<li>结构性（Structural）：关于对象之间的关系；</li>
<li>行为性（Behavioural）：关于对象的行为或交互方面内容。</li>
</ol>
<h3 id="Interfaces"><a href="#Interfaces" class="headerlink" title="Interfaces"></a>Interfaces</h3><p>接口是一种约定，约定了类应该提供什么功能，使用接口可以创建低耦合的程序。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       <span class="comment">// 面向接口编程，实现低耦合</span></span><br><span class="line">       TaxCalculator calculator = getCalculator();</span><br><span class="line">       calculator.calculateTax();</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 在现实的企业级应用中不会这样写，而是使用叫依赖注入框架的东西</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaxCalculator <span class="title">getCalculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> TaxCalculator2019();</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h3 id="Encapsulation"><a href="#Encapsulation" class="headerlink" title="Encapsulation"></a>Encapsulation</h3><p>封装就是在一个类中绑定字段和操作字段，并在类的外部隐藏字段的数据或状态的方法。</p>
<p>这样就能开发出健壮稳定的程序，防止对象的状态变得不可预知。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Account</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> balance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deposit</span><span class="params">(<span class="keyword">float</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span>)</span><br><span class="line">            balance += amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">withdraw</span><span class="params">(<span class="keyword">float</span> amount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">0</span> &amp;&amp; amount &lt;= balance)</span><br><span class="line">            balance -= amount;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getBalance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> balance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Abstraction"><a href="#Abstraction" class="headerlink" title="Abstraction"></a>Abstraction</h3><p>抽象的意思就是对外隐藏类中不必要暴露的细节，帮助降低复杂性。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        connect();</span><br><span class="line">        authenticate();</span><br><span class="line">        <span class="comment">// Send email</span></span><br><span class="line">        disconnect();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Connect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">disconnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Disconnect&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">authenticate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Authenticate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h3><p>继承是一种实现代码复用的机制，允许跨类重复使用代码。</p>
<p>可以在一个父类或基类中实现一些功能，然后让子类都继承这个基类。</p>
<h3 id="Polymorphism"><a href="#Polymorphism" class="headerlink" title="Polymorphism"></a>Polymorphism</h3><p>多态的意思就是多种形态，也就是说一个对象可以展现多种形态。</p>
<p>基类：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">UIControl</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">enable</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Enabled&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 因为具体实现不能在基类中得知，所以声明为一个抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>程序入口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 调用继承自基类的一个子类</span></span><br><span class="line">    drawUIControl(<span class="keyword">new</span> TextBox());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">drawUIControl</span><span class="params">(UIControl uiControl)</span> </span>&#123;</span><br><span class="line">    uiControl.draw();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="UML（Unified-Modeling-Language）"><a href="#UML（Unified-Modeling-Language）" class="headerlink" title="UML（Unified Modeling Language）"></a>UML（Unified Modeling Language）</h3><p>标准建模语言是一种用来给系统建模的标准语言，可用它来表达类与类的关系。</p>
<p>设计模式需要用到的三种关系：</p>
<ul>
<li>继承关系 Inheritance ；</li>
<li>组合关系 Composition ：组合是一种强的“拥有”关系，是一种contains-a的关系，体现了严格的部分和整体关系，<strong>部分和整体的生命周期一样</strong>；</li>
<li>依赖关系 Dependency ：对于两个相对独立的对象，当<strong>一个对象负责构造另一个对象的实例</strong>，或者<strong>依赖另一个对象的服务</strong>时，这两个对象之间主要体现为依赖关系。</li>
</ul>
<p>其他关系可以参考 <a href="https://www.jianshu.com/p/57620b762160">UML类图</a> 这篇文章，个人觉得描述得很清晰。</p>
<p>一个很不错的画UML图的工具 <a href="https://mermaid-js.github.io/mermaid-live-editor/">Mermaid</a> ，非常好的一点就是可以使用代码生成图。</p>
<p>也可以直接使用 Typora 进入源代码模式生成 UML 类图，好处就是不用插入图片了！！</p>
<h3 id="Memento-Pattern"><a href="#Memento-Pattern" class="headerlink" title="Memento Pattern"></a>Memento Pattern</h3><p>备忘录模式用来实现撤销操作。</p>
<p>假如有一个编辑器类，需要对这个类中的字段实现撤销操作，那么总共要三个类来实现备忘录模式。</p>
<pre class="mermaid">classDiagram
    
    Editor ..> EditorState : Dependency
    History *-- EditorState : Composition

    Editor : -String content
    Editor : createState() EditorState
    Editor : restore(EditorState state)

    EditorState :  -String content

    History : -Stack<EditorState> states
    History : push(EditorState state)
    History : pop() EditorState</pre>

<ul>
<li><p>编辑器类 Editor ：对字段内容进行获取和修改，使用编辑器状态类 EditorState 创建当前的状态；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Editor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用这个方法时，编辑器会以一个编辑器状态对象保存现在的状态，并返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EditorState <span class="title">createState</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> EditorState(content);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 撤销</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restore</span><span class="params">(EditorState state)</span> </span>&#123;</span><br><span class="line">        content = state.getContent();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>编辑器状态类 EditorState ：可以存储需要保存的字段内容，并获取字段内容；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EditorState</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 保证一旦声明这个字段就很难在程序中修改它</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EditorState</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>历史记录类 History ：使用栈来存储所有状态，即字段记录，提供将状态入栈和出栈的两个方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Stack&lt;EditorState&gt; states = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(EditorState state)</span> </span>&#123;</span><br><span class="line">        states.push(state);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> EditorState <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> states.pop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>最后，要使用撤销这个功能，只需要在程序入口处调用相应的方法即可：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> editor = <span class="keyword">new</span> Editor();</span><br><span class="line">    <span class="keyword">var</span> history = <span class="keyword">new</span> History();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建状态并保存到历史记录中</span></span><br><span class="line">    editor.setContent(<span class="string">&quot;a&quot;</span>);</span><br><span class="line">    history.push(editor.createState());</span><br><span class="line"></span><br><span class="line">    editor.setContent(<span class="string">&quot;b&quot;</span>);</span><br><span class="line">    history.push(editor.createState());</span><br><span class="line"></span><br><span class="line">    editor.setContent(<span class="string">&quot;c&quot;</span>);</span><br><span class="line">    editor.restore(history.pop());</span><br><span class="line"></span><br><span class="line">    System.out.println(editor.getContent());	<span class="comment">// output: b</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="State-Pattern"><a href="#State-Pattern" class="headerlink" title="State Pattern"></a>State Pattern</h3><p>状态模式允许对象因状态不同而表现不同的行为。</p>
<p>假如当前有一个画布，画布中有若干工具，点击不同的工具可以进行不同的操作，这时就可以使用状态模式。</p>
<pre class="mermaid">classDiagram
    Canvas *-- Tool: Composition
    Tool <|-- Selection : Inheritance
    Tool <|-- Brush : Inheritance
    
    Canvas: -Tool currentTool
    Canvas: mouseDown()
    Canvas: mouseUp()
    
    <<abstract>> Tool
    Tool: mouseDown()*
    Tool: mouseUp()*

    Selection: mouseDown()
    Selection: mouseUp()

    Brush: mouseDown()
    Brush: mouseUp()</pre>

<ul>
<li><p>画布类 Canvas ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这个类可以相应鼠标事件，如鼠标点击和释放</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Canvas</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Tool currentTool;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 两种方法会做不同的事情，取决于当前选择的工具</span></span><br><span class="line"><span class="comment">     * 因此需要先确定当前被选择的工具，可以用一个枚举表示（最后变成了使用抽象类及其子类）</span></span><br><span class="line"><span class="comment">     * 如果使用判断语句来完成相应功能，程序的扩展性就会很差</span></span><br><span class="line"><span class="comment">     * 正确的方法是给画布一种能力，让它根据不同的工具表现不同状态 */</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentTool.mouseDown();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        currentTool.mouseUp();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Tool <span class="title">getCurrentTool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentTool;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCurrentTool</span><span class="params">(Tool currentTool)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.currentTool = currentTool;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>工具类 Tool ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Tool</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">mouseDown</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">mouseUp</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>选择工具类 Selection ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Selection</span> <span class="keyword">extends</span> <span class="title">Tool</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Selection icon&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw dashed rectangle&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>笔刷工具类 Brush ：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Brush</span> <span class="keyword">extends</span> <span class="title">Tool</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDown</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Brush icon&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseUp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Draw a line&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>程序入口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> canvas = <span class="keyword">new</span> Canvas();</span><br><span class="line"></span><br><span class="line">    canvas.setCurrentTool(<span class="keyword">new</span> Selection());</span><br><span class="line">    canvas.mouseDown();</span><br><span class="line">    canvas.mouseUp();</span><br><span class="line"></span><br><span class="line">    canvas.setCurrentTool(<span class="keyword">new</span> Brush());</span><br><span class="line">    canvas.mouseDown();</span><br><span class="line">    canvas.mouseUp();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：如果需要做的判断很少，没有必要使用状态模式；而如果需要做的判断很多，并且未来可能添加新的工具，那么就要使用状态模式来优化代码。</p>
<h3 id="Iterator-Pattern"><a href="#Iterator-Pattern" class="headerlink" title="Iterator Pattern"></a>Iterator Pattern</h3><p>迭代器模式是一种在多种语言中出现的非常流行的模式。</p>
<p>假如要开发一个浏览器，每个浏览器都有历史记录的功能，浏览了若干页面后可以通过返回按钮返回到上个页面。</p>
<p>用来保存历史记录的可以是列表、栈或者数组，因此需要提供类似迭代器的功能对各种容器都适用，这样就算改变容器，也不需要修改调用方法的代码了。</p>
<pre class="mermaid">classDiagram
    
    BrowseHistory ..> Iterator : Dependency
    ListIterator --|> Iterator : Inheritance
    ArrayIterator --|> Iterator : Inheritance

    
    BrowseHistory: push(String url)
    BrowseHistory: pop()
    BrowseHistory: createIterator() Iterator

    <<Interface>> Iterator
    Iterator: hasNext() boolean
    Iterator: next()
    Iterator: current() String

    ListIterator: -BrowseHistory history
    ListIterator: -int index
    ListIterator: hasNext() boolean
    ListIterator: next()
    ListIterator: current() String

    ArrayIterator: -BrowseHistory history
    ArrayIterator: -int index
    ArrayIterator: hasNext() boolean
    ArrayIterator: next()
    ArrayIterator: current() String</pre>

<ul>
<li><p>历史记录类 BrowseHistory ：用来封装保存网址和取出网址的操作，为了遵循单一目标原则（每个类都应该有一个单一的功能，并且该功能应该由这个类完全封装起来），将迭代器功能封装到迭代器类；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BrowseHistory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String[] urls = <span class="keyword">new</span> String[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">// 表示当前有多少历史记录</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> count;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        urls[count++] = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> urls[--count];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayIterator(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>迭代器类 Iterator ：用来封装遍历历史记录的功能，由于容器有多种，从技术上来说，这个类应该是一个接口，定义其他子类需要实现哪些能力；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function">T <span class="title">current</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>列表迭代器类 ListIterator ：专门用来迭代列表，在历史记录类内部；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/** 新建一个嵌入类，因为这样可以直接访问 urls 字段，就不需要 Getter 了</span></span><br><span class="line"><span class="comment"> * 用户也不知道这个类的内部使用的是什么容器</span></span><br><span class="line"><span class="comment"> * 容器修改后，可以直接删掉或注释这个内部类 */</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class ListIterator implements Iterator&lt;String&gt; &#123;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    private BrowseHistory history;</span></span><br><span class="line"><span class="comment">    private int index;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    // 用构造函数获取历史记录对象实例</span></span><br><span class="line"><span class="comment">    public ListIterator(BrowseHistory history) &#123;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">        this.history = history;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">    public boolean hasNext() &#123;</span></span><br><span class="line"><span class="comment">        return (index &lt; history.urls.size());</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">    public void next() &#123;</span></span><br><span class="line"><span class="comment">        index++;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    <span class="doctag">@Override</span></span></span><br><span class="line"><span class="comment">    public String current() &#123;</span></span><br><span class="line"><span class="comment">        return history.urls.get(index);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">    */</span></span><br></pre></td></tr></table></figure></li>
<li><p>数组迭代器类 ArrayIterator ：专门用来迭代数组，同样在历史记录类内部。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> BrowseHistory history;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ArrayIterator</span><span class="params">(BrowseHistory history)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">this</span>.history = history;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 注意这里是访问 history.count</span></span><br><span class="line">        <span class="keyword">return</span> (index &lt; history.count);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        index++;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">current</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> history.urls[index];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>程序入口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> history = <span class="keyword">new</span> BrowseHistory();</span><br><span class="line">    history.push(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">    history.push(<span class="string">&quot;bbb&quot;</span>);</span><br><span class="line">    history.push(<span class="string">&quot;ccc&quot;</span>);</span><br><span class="line">    history.pop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> iterator = history.createIterator();</span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="keyword">var</span> url = iterator.current();</span><br><span class="line">        System.out.println(url);</span><br><span class="line">        iterator.next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Strategy-Pattern"><a href="#Strategy-Pattern" class="headerlink" title="Strategy Pattern"></a>Strategy Pattern</h3><p>假设有一个程序，要保存用户上传的图片。为了保存图片，首先需要使用某种图片压缩方法来压缩图片，例如 jpeg 或者 png 等图像压缩算法，然后应用一个滤镜，如黑白滤镜或者高对比度滤镜，让图片都有一致的外观。</p>
<p>策略模式和状态模式都可以改变对象的行为，它们二者的区别在于状态模式中对象可以有一个简单状态，例如上述的 currentTool ，它的所有行为都取决于 Tool 接口的子类；对比来看，策略模式中是没有简单状态字段的，不同的行为是以不同的策略对象来定的。</p>
<pre class="mermaid">classDiagram

    Compressor <|-- PngCompressor : Inheritance
    ImageStorage *--> Compressor : Composition
    ImageStorage *--> Filter : Composition
    Filter <|-- BlackAndWhite : Inheritance
    
    ImageStorage: -Compressor compressor
    ImageStorage: -Filter filter
    ImageStorage: storage(String image)

    <<interface>> Compressor
    Compressor: compress(String image)

    <<interface>> Filter
    Filter: apply(String image)
    
    PngCompressor: compress(String image)
    
    BlackAndWhite: apply(String image)</pre>

<ul>
<li><p>图片存储类 ImageStorage ：决定保存图片的方式，例如使用何种压缩算法和滤镜；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 保存用户上传的图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageStorage</span> </span>&#123;</span><br><span class="line">    <span class="comment">/** 也可以去掉构造方法，直接将压缩算法和滤镜作为 store 方法的形参传入</span></span><br><span class="line"><span class="comment">     * 这样就可以使用同一个 ImageStorage 对象来对图片应用不同的压缩方式和滤镜 */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageStorage</span><span class="params">(Compressor compressor, Filter filter)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.compressor = compressor;</span><br><span class="line">        <span class="keyword">this</span>.filter = filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Compressor compressor; <span class="comment">// 更好的方法是使用枚举，因为可以将压缩算法限制在某些类型中</span></span><br><span class="line">    <span class="keyword">private</span> Filter filter;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">store</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        compressor.compress(fileName);</span><br><span class="line">        filter.apply(fileName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>压缩算法接口 Compressor 以及它的子类：用来定义与实现不同的压缩算法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Compressor</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 可以将图片看成字节数组，这里先简单使用字符串</span></span><br><span class="line">    <span class="keyword">byte</span>[] compress(String image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JpegCompressor</span> <span class="keyword">implements</span> <span class="title">Compressor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] compress(String image) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Compressing using JPEG&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PngCompressor</span> <span class="keyword">implements</span> <span class="title">Compressor</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] compress(String image) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Compressing using PNG&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>滤镜接口 Filter 以及它的子类：用来定义与实现不同的滤镜；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">byte</span>[] apply(String image);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BlackAndWhiteFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] apply(String image) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filtering using B&amp;W filter.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighContrastFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] apply(String image) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filtering using High Contrast filter.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>程序入口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> imageStorage = <span class="keyword">new</span> ImageStorage(</span><br><span class="line">        <span class="keyword">new</span> JpegCompressor(), <span class="keyword">new</span> HighContrastFilter());</span><br><span class="line">    imageStorage.store(<span class="string">&quot;image&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Template-Method-Pattern"><a href="#Template-Method-Pattern" class="headerlink" title="Template Method Pattern"></a>Template Method Pattern</h3><p>假设有一个银行管理系统，每次在进行转账任务或是生成报告任务时，都需要先进行审计跟踪（记录系统活动和用户活动），由于多种任务都要引入审计跟踪这个对象，引入的代码就是重复性代码，且多种任务都有一个共同的操作：执行任务。这种情况下可以使用模板方法模式。</p>
<pre class="mermaid">classDiagram
    
    TransferMoneyTask --|> Task : Inheritance
    GenerateReportTask --|> Task : Inheritance

    <<abstract>> Task
    Task: -AuditTrail auditTrail
    Task: execute()
    Task: abstract doExecute()

    TransferMoneyTask: doExecute()

    GenerateReportTask: doExecute()</pre>

<ul>
<li><p>审计跟踪类 AuditTrail ：用来记录每个活动；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuditTrail</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">record</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Audit&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>任务类 Task ：提供一个模板实例方法专门用来执行每个任务都需要执行的操作，例如审计跟踪，提供一个抽象方法允许子类重写各自的特殊操作；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> AuditTrail auditTrail;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// default constructor</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        auditTrail = <span class="keyword">new</span> AuditTrail();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Task</span><span class="params">(AuditTrail auditTrail)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.auditTrail = auditTrail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        auditTrail.record();</span><br><span class="line">        doExecute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>转账任务类 TransferMoneyTask ：继承自 Task ，重写抽象方法实现自身的操作；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TransferMoneyTask</span> <span class="keyword">extends</span> <span class="title">Task</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Transfer money&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>生成报告任务类 GenerateReportTask ：同上。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenerateReportTask</span> <span class="keyword">extends</span> <span class="title">Task</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doExecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Generate report&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>程序入口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> transferMoneyTask = <span class="keyword">new</span> TransferMoneyTask();</span><br><span class="line">    transferMoneyTask.execute();</span><br><span class="line">    <span class="keyword">var</span> generateReportTask = <span class="keyword">new</span> GenerateReportTask();</span><br><span class="line">    generateReportTask.execute();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="Command-Pattern"><a href="#Command-Pattern" class="headerlink" title="Command Pattern"></a>Command Pattern</h3><p>假如需要制作一个用户图形界面框架，开发者可以根据框架中的组件创建不同的用户图形界面。</p>
<pre class="mermaid">classDiagram
    
    Button *-- Command : Composition
    AddCustomerCommand --|> Command : Inheritance
    CustomerService --* AddCustomerCommand : Composition

    Button : -String label
    Button : -Command command
    Button : click()

    <<interface>> Command
    Command : execute()

    CustomerService : addCustomer()

    AddCustomerCommand : -CustomerService service
    AddCustomerCommand : execute()</pre>

<ul>
<li><p>命令接口 Command ：只有一个执行方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>用户服务类 CostumerService ：具体的用户服务操作；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 具体操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomerService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCustomer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Add customer.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>增加客户命令 AddCustomerCommand ：实现命令接口，执行具体的用户服务操作；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 执行相应操作命令</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AddCustomerCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> CustomerService service;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AddCustomerCommand</span><span class="params">(CustomerService service)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.service = service;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        service.addCustomer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>按钮类 Button ：触发具体操作命令的媒介。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Button</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String label;</span><br><span class="line">    <span class="keyword">private</span> Command command;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Button</span><span class="params">(Command command)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.command = command;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">click</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        command.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getLabel</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> label;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setLabel</span><span class="params">(String label)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.label = label;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="Composite-Command"><a href="#Composite-Command" class="headerlink" title="Composite Command"></a>Composite Command</h4><p>如果想要记录各种命令并允许逐个执行，类似 PS 中的 Action ，可以创建一个组合命令类，将所有需要执行的命令放到一个列表里，逐一执行。</p>
<pre class="mermaid">classDiagram
    
    CompositeCommand --|> Command : Inheritance

    <<interface>> Command
    Command : execute()

    CompositeCommand : -List<Command> commands
    CompositeCommand : add(Command command)
    CompositeCommand : execute()</pre>

<ul>
<li><p>组合命令类 CompositeCommand ：用来存储以及逐个执行各种命令，可重复执行；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CompositeCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Command&gt; commands = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(Command command)</span></span>&#123;</span><br><span class="line">        commands.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> command : commands)</span><br><span class="line">            command.execute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>滤镜命令类 FilterCommand ：执行具体的滤镜相关操作命令；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FilterCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Filter command.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>重设大小命令类 ResizeCommand ：执行具体的调整大小命令；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResizeCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;Resize command.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<p>程序入口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> composite = <span class="keyword">new</span> CompositeCommand();</span><br><span class="line">    composite.add(<span class="keyword">new</span> FilterCommand());</span><br><span class="line">    composite.add(<span class="keyword">new</span> ResizeCommand());</span><br><span class="line">    <span class="keyword">var</span> service = <span class="keyword">new</span> CustomerService();</span><br><span class="line">    composite.add(<span class="keyword">new</span> AddCustomerCommand(service));</span><br><span class="line">    composite.execute();</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="Undoable-Command"><a href="#Undoable-Command" class="headerlink" title="Undoable Command"></a>Undoable Command</h4><p>可撤回的命令与备忘录模式的区别：如果需要对一个视频进行编辑，使用备忘录模式的话每一次更改都需要每次对视频的状态进行存储，将浪费很多资源；而使用可撤回命令只需要存储对象的上一个状态。</p>
<pre class="mermaid">classDiagram
    
    UndoableCommand --|> Command : Inheritance
    BoldCommand --|> UndoableCommand : Inheritance
    BoldCommand *-- Document : Composition
    BoldCommand *-- History : Composition
    UndoCommand *-- History : Composition
    UndoCommand --|> Command : Inheritance

    <<interface>> Command
    Command : execute()

    <<interface>> UndoableCommand
    UndoableCommand : unexecute()

    BoldCommand : -String prevContent
    BoldCommand : -HtmlDocument document
    BoldCommand : -History history
    BoldCommand : execute()
    BoldCommand : unexecute()

    History : -Deque<UndoableCommand> commands
    History : push(UndoableCommand command)
    History : pop() UndoableCommand
    History : size() int

    UndoCommand : -History history
    UndoCommand : execute()

    Document : -String content
    Document : makeBold()</pre>

<ul>
<li><p>可撤回命令接口 UndoableCommand ：继承自命令接口，增加了一个撤回命令方法；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UndoableCommand</span> <span class="keyword">extends</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unexecute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>历史类 History ：用来存储和弹出对象的所有可撤回命令；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">History</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Deque&lt;UndoableCommand&gt; commands = <span class="keyword">new</span> ArrayDeque&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(UndoableCommand command)</span> </span>&#123;</span><br><span class="line">        commands.add(command);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UndoableCommand <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commands.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> commands.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>文件类 Document ：具体的需要使用可撤回命令功能的对象；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlDocument</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">makeBold</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        content = <span class="string">&quot;&lt;b&gt;&quot;</span> + content + <span class="string">&quot;&lt;/b&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>粗体命令 BoldCommand ：具体的操作命令，实现可撤回命令接口；</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BoldCommand</span> <span class="keyword">implements</span> <span class="title">UndoableCommand</span></span>&#123;</span><br><span class="line">    <span class="comment">// 上一个状态</span></span><br><span class="line">    <span class="keyword">private</span> String prevContent;</span><br><span class="line">    <span class="keyword">private</span> HtmlDocument document;</span><br><span class="line">    <span class="keyword">private</span> History history;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BoldCommand</span><span class="params">(HtmlDocument document, History history)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.document = document;</span><br><span class="line">        <span class="keyword">this</span>.history = history;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 存储当前状态</span></span><br><span class="line">        prevContent = document.getContent();</span><br><span class="line">        <span class="comment">// 具体的要执行的操作</span></span><br><span class="line">        document.makeBold();</span><br><span class="line">        <span class="comment">// 存储执行操作后的状态</span></span><br><span class="line">        history.push(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">unexecute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        document.setContent(prevContent);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>撤回命令 UndoCommand ：实现命令接口，用来获取历史记录中的对象，执行撤回命令。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UndoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> History history;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UndoCommand</span><span class="params">(History history)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.history = history;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (history.size() &gt; <span class="number">0</span>)</span><br><span class="line">            history.pop().unexecute();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="Observer-Pattern"><a href="#Observer-Pattern" class="headerlink" title="Observer Pattern"></a>Observer Pattern</h3><p>观察者模式用于当一个对象的数据发生改变时，告知其他对象这个改变。</p>
]]></content>
      <categories>
        <category>Design Patterns</category>
      </categories>
  </entry>
  <entry>
    <title>随笔</title>
    <url>/2021/04/05/%E9%9A%8F%E7%AC%94/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="e4aef260b52d35d43785b46eb1637cd2bd6bbd197780ab975fb46c1f44ba9a25">e60a61a1055049834be66d4bcabc52336ffebe77aafbb59cc4e6a700688caba21b7fa14c0eda4718336ebe9f1f6918a43b4c6f68b0cc2a0e5896464a7dcd65a025ca3b67c0c81b397836b00f58c7f3088d761fca63036d096548f9b57123f5e9be212f008a359d59c68e32554305537dafb200b2061c527eed4e745ae98623db7adde44f033420300c1bf37582764150dfff3b9b55da578beb73ef277586139c39c12e14d19dc67f68c42622beda98703c995b5087c7fac8a47b46db8623534c887243e9afb3d4ce9ffe73197b98445a1cddd7349289c25fbc194b2e0416a812fd37a0134402a43f9ad4a799fb13a5de32d3546b9c1ce098225f4f16096c151683dfa98eaf668034ce594e5403305eaf3c161d5782d09dd515501fd08416979df1f572219c247bc41133fe1923275fa4c81392b6c3169c613ec61df535333b727fde65d7894e12723be5a77d550d33a4cae40631c0717f8a81688146928f8d8fea0663db9f93e2bccaacec954f6c4c982a0d49945f39b2adcf2e251b3281e640fb7510b7eba31154a1c8e7b6057f0b0477a7f0263221275fb3fbe6c99b4596bd21b63451750028ffbb7964a5c8e20cc084286cd05793f1eaf580104d8d442cea2988c362d750fa1ea09ba8022bd8afdaf257e69d56f2d192f85aca7bbfbafac348cd6d295f012cf3091bb00d0bce8b3b628e22c34fb1847aef52ddbf2964ede6b799d4d10920674ea63b932c3a3a1278c2f6857ee2b9802c672dee1b0fbde2679b3a498fb03548a3bdf2bb80ef90a0b3b5b66cca118b2d0d7e431f95bcbd31c80d2f4f2cb63b63179cf47a2c31a5e95fff19637209bb1e54b2fa0999e8292199e8825b79513b4b5970e69145271cbeb2c24f572caa5ff7b8b7e13d3fa9e23d09b5a1fbd438cebbcd04d1b803448170e2535b2c8629a79acb6d9fc2a9ec288d82b3b93c326a563a7776ef9073d7fccb8a0d35b037079e1ef5d9b511890653803ab2b92036fb211772f0d3dd8fcee62af8982f5a73edeb5a66686b01a2a864333f77460c22b3c2a6d92b991cefccf3cac67da085f2ea9d40a88d91066e1626149f38c152d3613706dabcc9d9dfb6bd44401525c52cac9cce537b41ad3f792aeba3a84fcf719a20c83d583945e844e0d7de8158a1633373b06fc128e18e445e5aceeb8c1db21935f3470e956c75824db26ce0377bc74e73d403e004dcba998bb5213a7ed0320cf1e734025542a1aae7361dde1d576de669443971bebfa2b7fb6b7ef98171de21bf35c797d90ea731f46d19ac3d036e395c1fe70dc1892810edaa6f3af088f1e6bc11706d43b4901c24c8138447b0a626fccb2a1778116341540fbc55eb520f8e395cefeeba2e70bcb96e8c26588148bb68c9ef0b937aa2dfdf476db95a9dde8d3ad6c377ccbbae43ea4704e0b569be211e3213bcce875db2a97d03a035a46be054ed6e411141ad19018177bb9033273bf385c8b0f17341f7e8eb4a42d6d94673f336d96a2239613603e984c4d13c55b4f424002d1c4822128374495b69b2964bcc05271b4abca3942894654a2a91f3ff485fd0834daeabc13ff9d78e64a958c3aad6248eca699a9637558a35e38980861d4649c5b0bb6b70a91fdb12983195e9a3dd7ed8da8171ff263009f4b99280ccd70d7e8bbea62fc0c57b448b1c315696e2babb898a054a4ef46c37f8757f0ea5bedd9eaa6376345721749f7440848568fcc3a48c8afeb9136dd2876b20a3c17fc914677ee360a936c84dfaadc36fb5b9cc36dc6194fe9279e63a9abd08dbe19d5037de93bbb5b4f85638e38971555024df3bfca695e4af8ef66f3716aa69de7842ff231af7ee3516029d50c9f87f6aed0f4627fa2253d64f8e6d6c70ce39cfb9aa2377160451bbb54c9e7efb608308c0860dfddb052894c2ac788fa391f424f9a567a62d1d337a7d971915c8f26c1ae88cfa43ae0efed5faf9c02f6091c1acd5c757a07c2e35abfc0d21c21df53e8d447cc199b2724f2dfbe03be0892aa078eadb283ea56b63afb6497b691fecf761314913e3e184aca9436e229874cc3a56ca875626c2eaf3d547c1e9792902d72e87025edc3c3c5f3ec7a801f26fe89f060acc540aa5e96f633b9c6bccbae3491ac6dd552bb9962cf2dc8645eedd46377ab9bd1f0a3f78b1879b0e14361b27e04369608598583bc4ad9efc9846a8f121e6a8f357f50b39558dd02d07b4bdc267aff5a3d4f6275103032879311f1a2c609043f068ecd94e85ee74b48d579ca7f605484b8c07d063599e6966302011ac6f2d0323d78d9961ad1ddbf0fc34e07e45475fb748b02c65a0d4d408a9823ca6969875a1c1175cebb40ae5888dc9a7ccb706e0c1e5149b9b0638f9a355a95276ebe9f209947f7728e04b0f781a220b65f8c42bbbdeb95b0babd95d16f43d38a661faca0501db610e78d151d56fb58cf2f7ee450d5e5366c93f2ddc82744bd2f8d3c16f3252b43b1ef9019be5fb7086a22c6067fa880b676323422bcebcca217989c1b6f5d8a9457f753777472a9faae6b0efc38f1b31f0004f3cd777e63f89d1df27315935d4b078905079542ba350c8122fcc065de258dd439641c42c6ec332dcec313fddc526bbe323ec6e8ea7c0420f8309a57c704b962b18726bfef6a12c9eda93db5ddb5d56dd473111ae135cc571f85b6d5bcb3421c5e5e9c205c78f103eca3cc54e5e5d965a43a8013a24c8c77277529cd055ece4785d146bed696436cb0b99f55a38db7a8e48675d116eadc35bc3e1bf7c8518fda32dc819236e574e29f0ecb27e397ee620a2010111a89bee026bd951ee59a69a26af8cd02c2b0751e6c8309522acf14e41f9e6597d93c932cbfad62dc4824cdc036242ad41631987318a2179c71e961f508bb926e469c05263d204a42022a38a93e32c1efd4c497c381cabe427bd6b14055adc0af8e39adf3f92815d8a624865eee190aef26b2b1529784d3ef2156700bd7e58a33772fc994f852b7c932251587db295a0df59a59f3f16c0002d082a7a74ce38db4f9ae0fc806723e5fafeaa02d468318b3483f5e4cdcae7ab1232c6694817600898bfe4224ea39a7fc385ea4389b7381a170ca64d65d3efe417eb015eee764f5901654aefae5e50ec99495d556e1464f2b2cbd36f5d1c32f79c47fbceb4aad1908705391d6618448adff8a82cf1106aa606fc8be29adee956db7d86c53343396b8ad0ac7779d42da0d4cdf60976392ba358d2e3c96ae0df94387c91335044d27a169f738df7ab8dacf59ae26c6e6964bd0674c2ff9984772c731c99db5a591326caaead8ffbcba364d985ff5e618c7c590d64c1f2ce92834f8eede72df22ef6169cb31c04d3d98ec94f47019725f391fc816595d9dc62ad994b83860b494eb223ba54b6e63a8a6f88fd115b76effa933365065c13b2043b6db2d527023d7f7e550489293312bedca2e943cb0320b013f0f471cb4a5b25773df56a30e2baa24038b0d01ae078421a8a6061c10e0e4444573ab3c20c8b66dc3ab0a1448dc5b006aec83ba92e5ad45b7acad6d2c76344f2bc327f6064817dbe4f73911e14fe7b8451dd8a8c28bd09fb894e01492d74821fc8b7212e52b589ffd946a87e1d03f02d844c7de00c3b00677ce73d4d2a3d1c4f8b6471e9ffff9a0ac0eebfb4761554bf9628bd37a36c376f33e97fe3c1a50c8e1fa06aee7353b329a9d18a2ce582a35dc7ae75e99ac6167dd7344adc7b4231515adbcd7e0dbea256b89b576dc8c89c2949480a340a0e3dca1841a11e00db8ed7ae2e022bacce258703ddc527d749fdef93e8dde09bef7c021ab88486052a5fbd3f557f3387a3adb8c70579163cb7c691954106fba03fc20f39dd204126497fea3a1e96c9504652baed12f9466c8d407381710f1a49dd7b848641563c368ba85c0ce87fc86e5ebc1ca292719aa151227a3cf6ea834ebe004180600cf57df1e0f479901f894c296350dd00ba2a1345510fa5c7623de33297a167b0e9f9d2bd626a02230f49f19d0cb6f75a9be8bf7e58c427a22e777d0a96159c20d060b2e85869d9a012678f3df5e82cdc570abe561397b40b6c09adfccb49ef882239f10df11bddb750</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>Diaries</category>
      </categories>
      <tags>
        <tag>Diaries</tag>
      </tags>
  </entry>
</search>
